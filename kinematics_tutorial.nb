(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     43068,        969]
NotebookOptionsPosition[     42131,        933]
NotebookOutlinePosition[     42466,        948]
CellTagsIndexPosition[     42423,        945]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  StyleBox[
   RowBox[{"SetDirectory", "[", 
    RowBox[{"NotebookDirectory", "[", "]"}], "]"}],
   FontSize->18,
   FontWeight->"Bold"]}]], "Input",
 CellChangeTimes->{{3.766484040686846*^9, 3.7664840415269337`*^9}}],

Cell[BoxData["\<\"/home/students/marco.negrini6/Documents/github/robotica2\"\>\
"], "Output",
 CellChangeTimes->{3.7664841351088867`*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.766484051801214*^9, 3.7664840528119802`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"Needs", "[", "\"\<robotica`\>\"", "]"}],
  FontSize->18,
  FontWeight->"Bold"]], "Input"],

Cell[BoxData["\<\"hello\"\>"], "Print",
 CellChangeTimes->{3.7664841353863697`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.766484022797575*^9, 3.766484023083631*^9}}],

Cell["\<\
#Welcome!\[LineSeparator]
This is a robotics tutorial, here will be described how a robotic manipulator \
works.

//Image of robot, some joints, both types

A robotic arm is made of link connected by joints that can be of two kind:
    prismatic, traslatory: capable of translating a link
    revolutionary, rotative: capable of rotate a link
    
 // replicate image 81 with robotica\
\>", "Text",
 CellChangeTimes->{{3.766295733165847*^9, 3.7662957565178432`*^9}, {
   3.7662958016298227`*^9, 3.76629604552754*^9}, {3.7662961146401043`*^9, 
   3.7662964047396603`*^9}, {3.766296452268139*^9, 3.76629660046236*^9}, {
   3.766296846496715*^9, 3.766296898554006*^9}, {3.766296974338636*^9, 
   3.76629698946663*^9}, {3.766297030477318*^9, 3.7662971434772463`*^9}, {
   3.7662972028964157`*^9, 3.766297213480227*^9}, {3.766297244609701*^9, 
   3.766297359895707*^9}, {3.766297397073382*^9, 3.766297430267271*^9}, {
   3.7662974674283743`*^9, 3.766297478700749*^9}, {3.766297568136389*^9, 
   3.766297582201277*^9}, {3.7662976306020412`*^9, 3.766297813704967*^9}, {
   3.766297884387218*^9, 3.766297887202635*^9}, {3.7662979199315443`*^9, 
   3.766298284743136*^9}, {3.7662983239281816`*^9, 3.766298346656746*^9}, {
   3.766298453123595*^9, 3.766298546734469*^9}, {3.7662987219932613`*^9, 
   3.7662987326510897`*^9}, {3.7662988251167173`*^9, 3.766298886430357*^9}, {
   3.7662990287939587`*^9, 3.766299091632475*^9}, {3.7662991282637157`*^9, 
   3.766299338947137*^9}, {3.766299415002293*^9, 3.7662995748418293`*^9}, {
   3.766299674481448*^9, 3.7662999001787643`*^9}, {3.766299951409079*^9, 
   3.766300187237356*^9}, {3.7663003527012653`*^9, 3.766300521057148*^9}, {
   3.766464168435871*^9, 3.766464175055335*^9}, 3.76646427986097*^9, {
   3.766464319404605*^9, 3.7664643319132147`*^9}, 3.766464959779932*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.766465115186953*^9, 3.766465138603393*^9}, 
   3.766484018060095*^9, {3.76648407652689*^9, 3.766484082995057*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"drawAPI", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "\"\<r\>\"", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "\[Pi]", "}"}]}], "}"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{
  3.7664840876857643`*^9, {3.7664841528004704`*^9, 3.766484173878251*^9}},
 NumberMarks->False],

Cell[CellGroupData[{

Cell[BoxData["%12"], "Input",
 NumberMarks->False],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{robotica`Private`g$$910$$ = 1., 
    robotica`Private`params$$910$$ = {Rational[-1, 8] Pi}, 
    robotica`Private`planei$$910$$ = 0, robotica`Private`showRobot$$910$$ = 
    True, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[FE`robotica`Private`params$$910], {0}}}, {
      Hold[
       Dynamic[
        Grid[
         Table[
          With[{robotica`Private`i$ = robotica`Private`i}, 
           If[
            robotica`isPrismatic[
             Part[{"r"}, robotica`Private`i$]], {
             Subscript["d", robotica`Private`i$], 
             Slider[
              Dynamic[
               Part[FE`robotica`Private`params$$910, robotica`Private`i$]], {
              0, 1, 1/20}, ImageSize -> Small], 
             Dynamic[
              Part[FE`robotica`Private`params$$910, robotica`Private`i$]]}, {
             Subscript["\[Theta]", robotica`Private`i$], 
             Slider[
              Dynamic[
               Part[FE`robotica`Private`params$$910, robotica`Private`i$]], {-
               Pi, Pi, Pi/32}, ImageSize -> Small], 
             Dynamic[
              Part[
              FE`robotica`Private`params$$910, robotica`Private`i$]]}]], {
          robotica`Private`i, 1}]]]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[FE`robotica`Private`g$$910], 1, "grip"}, 0, 1, 0.01}, {{
       Hold[FE`robotica`Private`showRobot$$910], True, "show robot"}, {
      True, False}}, {{
       Hold[FE`robotica`Private`planei$$910], 0, "xy Plane"}, 0, 1, 1}}, 
    Typeset`size$$ = {425., {210., 215.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False, 
    robotica`Private`g$$910$3103$$ = 0, 
    robotica`Private`showRobot$$910$3104$$ = False, 
    robotica`Private`planei$$910$3105$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       robotica`Private`g$$910$$ = 1, robotica`Private`params$$910$$ = {0}, 
        robotica`Private`planei$$910$$ = 0, robotica`Private`showRobot$$910$$ = 
        True}, "ControllerVariables" :> {
        Hold[robotica`Private`g$$910$$, robotica`Private`g$$910$3103$$, 0], 
        Hold[
        robotica`Private`showRobot$$910$$, 
         robotica`Private`showRobot$$910$3104$$, False], 
        Hold[
        robotica`Private`planei$$910$$, robotica`Private`planei$$910$3105$$, 
         0]}, "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> (Chop[
         Manipulate[Chop[
            robotica`drawRobot[{{$CellContext`r}, {2}, {Pi}}], 10^(-10)]; 
          DynamicModule[{
            robotica`Private`jr = 1/10, robotica`Private`ar = 1/40, 
             robotica`Private`Td, robotica`Private`j, robotica`Private`i, 
             robotica`Private`d, robotica`Private`theta}, 
            robotica`Private`d = Range[1]; robotica`Private`theta = Range[1]; 
            For[robotica`Private`i = 1, robotica`Private`i <= 1, 
              Increment[robotica`Private`i], If[
                robotica`isPrismatic[
                 Part[{$CellContext`r}, robotica`Private`i]], 
                Part[robotica`Private`theta, robotica`Private`i] = 0; 
                Part[robotica`Private`d, robotica`Private`i] = 
                 Part[robotica`Private`params, robotica`Private`i], 
                Part[robotica`Private`theta, robotica`Private`i] = 
                 Part[robotica`Private`params, robotica`Private`i]; 
                Part[robotica`Private`d, robotica`Private`i] = 0; Null]; 
              Null]; robotica`Private`Td[1] = Dot[
               RotationTransform[
                Part[robotica`Private`theta, 1], {0, 0, 1}], 
               TranslationTransform[{0, 0, 
                 Part[robotica`Private`d, 1]}], 
               TranslationTransform[{
                 Part[{2}, 1], 0, 0}], 
               RotationTransform[
                Part[{Pi}, 1], {1, 0, 0}]]; 
            For[robotica`Private`j = 2, robotica`Private`j <= 1, 
              Increment[robotica`Private`j], 
              robotica`Private`Td[robotica`Private`j] = Dot[
                 robotica`Private`Td[robotica`Private`j - 1], 
                 RotationTransform[
                  Part[robotica`Private`theta, robotica`Private`j], {0, 0, 
                  1}], 
                 TranslationTransform[{0, 0, 
                   Part[robotica`Private`d, robotica`Private`j]}], 
                 TranslationTransform[{
                   Part[{2}, robotica`Private`j], 0, 0}], 
                 RotationTransform[
                  Part[{Pi}, robotica`Private`j], {1, 0, 0}]]; Null]; 
            Graphics3D[{{LightBrown, 
                Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
               If[
                robotica`isRevolutionary[
                 Part[{$CellContext`r}, 1]], 
                robotica`drawJoint[
                 Part[{$CellContext`r}, 1], 
                 Part[robotica`Private`d, 1], 
                 Part[{2}, 1], 
                 Part[robotica`Private`params, 1], 
                 OptionValue[
                 robotica`drawRobot, {}, robotica`Private`showArrows]], 
                robotica`drawJoint[
                 Part[{$CellContext`r}, 1], 
                 Part[robotica`Private`params, 1], 
                 Part[{2}, 1], 
                 Part[robotica`Private`theta, 1]], 
                OptionValue[
                robotica`drawRobot, {}, robotica`Private`showArrows]], 
               If[1 == 1, 
                GeometricTransformation[
                 robotica`drawGripper[robotica`Private`g, 0, 
                  OptionValue[
                  robotica`drawRobot, {}, robotica`Private`showArrows]], 
                 Chop[
                  robotica`Private`Td[1]]], 
                If[robotica`Private`showRobot, 
                 Table[
                  If[
                   robotica`isRevolutionary[
                    Part[{$CellContext`r}, robotica`Private`i]], 
                   GeometricTransformation[
                    robotica`drawJoint[
                    Part[{$CellContext`r}, robotica`Private`i], 
                    Part[robotica`Private`d, robotica`Private`i], 
                    Part[{2}, robotica`Private`i], 
                    Part[robotica`Private`params, robotica`Private`i], 
                    OptionValue[
                    robotica`drawRobot, {}, robotica`Private`showArrows]], 
                    robotica`Private`Td[robotica`Private`i - 1]], 
                   GeometricTransformation[
                    robotica`drawJoint[
                    Part[{$CellContext`r}, robotica`Private`i], 
                    Part[robotica`Private`params, robotica`Private`i], 
                    Part[{2}, robotica`Private`i], 
                    Part[robotica`Private`theta, robotica`Private`i], 
                    OptionValue[
                    robotica`drawRobot, {}, robotica`Private`showArrows]], 
                    robotica`Private`Td[robotica`Private`i - 1]]], {
                  robotica`Private`i, 2, 1}]]], 
               GeometricTransformation[
                robotica`drawGripper[robotica`Private`g, 0, 
                 OptionValue[
                 robotica`drawRobot, {}, robotica`Private`showArrows]], 
                Chop[
                 robotica`Private`Td[1]]], 
               If[
                OptionValue[
                robotica`drawRobot, {}, robotica`Private`showPlanes], 
                GeometricTransformation[{Thick, {Blue, 
                   Rotate[
                    robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                   Text[
                    Subscript["x", robotica`Private`planei], {
                    0.9, 0.2, 0}]}, {Green, 
                   Rotate[
                    robotica`drawZArrow[1/2], -Pi/2, {1, 0, 0}], 
                   Text[
                    Subscript["y", robotica`Private`planei], {0.2, 0.9, 0}]}, 
                  Blue, 
                  Opacity[0.2], 
                  Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
                 
                 If[robotica`Private`planei > 0, 
                  robotica`Private`Td[robotica`Private`planei], 
                  IdentityMatrix[4]; Null]]], 
               If[
                OptionValue[robotica`drawRobot, {}, robotica`Private`showH], 
                Text[
                 StringForm[
                 "\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
                  MatrixForm[
                   N[
                    Chop[
                    robotica`Private`Td[1]], 2]]], {0, 0, -3.2}]]}, 
              SphericalRegion -> True, ImageSize -> 425, Boxed -> False]], {{
           robotica`Private`params, {0}}, ControlType -> None}, 
          Dynamic[
           Grid[
            Table[
             With[{robotica`Private`i$ = robotica`Private`i}, 
              If[
               robotica`isPrismatic[
                Part[{$CellContext`r}, robotica`Private`i$]], {
                Subscript["d", robotica`Private`i$], 
                Slider[
                 Dynamic[
                  Part[robotica`Private`params, robotica`Private`i$]], {
                 0, 1, 1/20}, ImageSize -> Small], 
                Dynamic[
                 Part[robotica`Private`params, robotica`Private`i$]]}, {
                Subscript["\[Theta]", robotica`Private`i$], 
                Slider[
                 Dynamic[
                  Part[robotica`Private`params, robotica`Private`i$]], {-Pi, 
                  Pi, Pi/32}, ImageSize -> Small], 
                Dynamic[
                 Part[robotica`Private`params, robotica`Private`i$]]}]], {
             robotica`Private`i, 1}]]], 
          Delimiter, {{robotica`Private`g, 1, "grip"}, 0, 1, 0.01, ImageSize -> 
           Small, Appearance -> "Labeled"}, {{
           robotica`Private`showRobot, True, "show robot"}, {True, False}}, {{
           robotica`Private`planei, 0, "xy Plane"}, 0, 1, 1, ImageSize -> 
           Small, Appearance -> "Labeled", ControlType -> None}, 
          ControlPlacement -> Left, SaveDefinitions -> True], 10^(-10)]; 
       DynamicModule[{
         robotica`Private`jr = 1/10, robotica`Private`ar = 1/40, 
          robotica`Private`Td, robotica`Private`j, robotica`Private`i, 
          robotica`Private`d, robotica`Private`theta}, 
         robotica`Private`d = Range[1]; robotica`Private`theta = Range[1]; 
         For[robotica`Private`i = 1, robotica`Private`i <= 1, 
           Increment[robotica`Private`i], If[
             robotica`isPrismatic[
              Part[{"r"}, robotica`Private`i]], 
             Part[robotica`Private`theta, robotica`Private`i] = 0; 
             Part[robotica`Private`d, robotica`Private`i] = 
              Part[robotica`Private`params$$910$$, robotica`Private`i], 
             Part[robotica`Private`theta, robotica`Private`i] = 
              Part[robotica`Private`params$$910$$, robotica`Private`i]; 
             Part[robotica`Private`d, robotica`Private`i] = 0; Null]; Null]; 
         robotica`Private`Td[1] = Dot[
            RotationTransform[
             Part[robotica`Private`theta, 1], {0, 0, 1}], 
            TranslationTransform[{0, 0, 
              Part[robotica`Private`d, 1]}], 
            TranslationTransform[{
              Part[{2}, 1], 0, 0}], 
            RotationTransform[
             Part[{Pi}, 1], {1, 0, 0}]]; 
         For[robotica`Private`j = 2, robotica`Private`j <= 1, 
           Increment[robotica`Private`j], 
           robotica`Private`Td[robotica`Private`j] = Dot[
              robotica`Private`Td[robotica`Private`j - 1], 
              RotationTransform[
               Part[robotica`Private`theta, robotica`Private`j], {0, 0, 1}], 
              TranslationTransform[{0, 0, 
                Part[robotica`Private`d, robotica`Private`j]}], 
              TranslationTransform[{
                Part[{2}, robotica`Private`j], 0, 0}], 
              RotationTransform[
               Part[{Pi}, robotica`Private`j], {1, 0, 0}]]; Null]; 
         Graphics3D[{{LightBrown, 
             Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
            If[
             robotica`isRevolutionary[
              Part[{"r"}, 1]], 
             robotica`drawJoint[
              Part[{"r"}, 1], 
              Part[robotica`Private`d, 1], 
              Part[{2}, 1], 
              Part[robotica`Private`params$$910$$, 1], 
              OptionValue[
              robotica`drawRobot, {}, robotica`Private`showArrows]], 
             robotica`drawJoint[
              Part[{"r"}, 1], 
              Part[robotica`Private`params$$910$$, 1], 
              Part[{2}, 1], 
              Part[robotica`Private`theta, 1]], 
             OptionValue[
             robotica`drawRobot, {}, robotica`Private`showArrows]], 
            If[1 == 1, 
             GeometricTransformation[
              robotica`drawGripper[robotica`Private`g$$910$$, 0, 
               OptionValue[
               robotica`drawRobot, {}, robotica`Private`showArrows]], 
              Chop[
               robotica`Private`Td[1]]], 
             If[robotica`Private`showRobot$$910$$, 
              Table[
               If[
                robotica`isRevolutionary[
                 Part[{"r"}, robotica`Private`i]], 
                GeometricTransformation[
                 robotica`drawJoint[
                  Part[{"r"}, robotica`Private`i], 
                  Part[robotica`Private`d, robotica`Private`i], 
                  Part[{2}, robotica`Private`i], 
                  Part[robotica`Private`params$$910$$, robotica`Private`i], 
                  OptionValue[
                  robotica`drawRobot, {}, robotica`Private`showArrows]], 
                 robotica`Private`Td[robotica`Private`i - 1]], 
                GeometricTransformation[
                 robotica`drawJoint[
                  Part[{"r"}, robotica`Private`i], 
                  Part[robotica`Private`params$$910$$, robotica`Private`i], 
                  Part[{2}, robotica`Private`i], 
                  Part[robotica`Private`theta, robotica`Private`i], 
                  OptionValue[
                  robotica`drawRobot, {}, robotica`Private`showArrows]], 
                 robotica`Private`Td[robotica`Private`i - 1]]], {
               robotica`Private`i, 2, 1}]]], 
            GeometricTransformation[
             robotica`drawGripper[robotica`Private`g$$910$$, 0, 
              OptionValue[
              robotica`drawRobot, {}, robotica`Private`showArrows]], 
             Chop[
              robotica`Private`Td[1]]], 
            If[
             OptionValue[robotica`drawRobot, {}, robotica`Private`showPlanes], 
             GeometricTransformation[{Thick, {Blue, 
                Rotate[
                 robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                Text[
                 Subscript["x", robotica`Private`planei$$910$$], {
                 0.9, 0.2, 0}]}, {Green, 
                Rotate[
                 robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                Text[
                 Subscript["y", robotica`Private`planei$$910$$], {
                 0.2, 0.9, 0}]}, Blue, 
               Opacity[0.2], 
               Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
              If[robotica`Private`planei$$910$$ > 0, 
               robotica`Private`Td[robotica`Private`planei$$910$$], 
               IdentityMatrix[4]; Null]]], 
            If[
             OptionValue[robotica`drawRobot, {}, robotica`Private`showH], 
             Text[
              StringForm["\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
               MatrixForm[
                N[
                 Chop[
                  robotica`Private`Td[1]], 2]]], {0, 0, -3.2}]]}, 
           SphericalRegion -> True, ImageSize -> 425, Boxed -> False]]), 
      "Specifications" :> {{{robotica`Private`params$$910$$, {0}}, 
         ControlType -> None}, 
        Dynamic[
         Grid[
          Table[
           With[{robotica`Private`i$ = robotica`Private`i}, 
            If[
             robotica`isPrismatic[
              Part[{"r"}, robotica`Private`i$]], {
              Subscript["d", robotica`Private`i$], 
              Slider[
               Dynamic[
                Part[robotica`Private`params$$910$$, robotica`Private`i$]], {
               0, 1, 1/20}, ImageSize -> Small], 
              Dynamic[
               Part[robotica`Private`params$$910$$, robotica`Private`i$]]}, {
              Subscript["\[Theta]", robotica`Private`i$], 
              Slider[
               Dynamic[
                Part[robotica`Private`params$$910$$, robotica`Private`i$]], {-
                Pi, Pi, Pi/32}, ImageSize -> Small], 
              Dynamic[
               Part[
               robotica`Private`params$$910$$, robotica`Private`i$]]}]], {
           robotica`Private`i, 1}]]], 
        Delimiter, {{robotica`Private`g$$910$$, 1, "grip"}, 0, 1, 0.01, 
         ImageSize -> Small, Appearance -> "Labeled"}, {{
         robotica`Private`showRobot$$910$$, True, "show robot"}, {
         True, False}}, {{robotica`Private`planei$$910$$, 0, "xy Plane"}, 0, 
         1, 1, ImageSize -> Small, Appearance -> "Labeled", ControlType -> 
         None}}, "Options" :> {ControlPlacement -> Left}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{687., {240., 247.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({robotica`drawRobot[
         Pattern[robotica`Private`dof$, 
          Blank[]], 
         Pattern[robotica`Private`r$, 
          Blank[]], 
         Pattern[robotica`Private`alpha$, 
          Blank[]], 
         Pattern[robotica`Private`jointtype$, 
          Blank[]], 
         OptionsPattern[]] := Manipulate[Chop[
           Out[], 10^(-10)]; 
         DynamicModule[{
           robotica`Private`jr = 1/10, robotica`Private`ar = 1/40, 
            robotica`Private`Td, robotica`Private`j, robotica`Private`i, 
            robotica`Private`d, robotica`Private`theta}, 
           robotica`Private`d = Range[robotica`Private`dof$]; 
           robotica`Private`theta = Range[robotica`Private`dof$]; 
           For[robotica`Private`i = 1, robotica`Private`i <= 
             robotica`Private`dof$, 
             Increment[robotica`Private`i], If[
               robotica`isPrismatic[
                Part[robotica`Private`jointtype$, robotica`Private`i]], 
               Part[robotica`Private`theta, robotica`Private`i] = 0; 
               Part[robotica`Private`d, robotica`Private`i] = 
                Part[robotica`Private`params$$910$$, robotica`Private`i], 
               Part[robotica`Private`theta, robotica`Private`i] = 
                Part[robotica`Private`params$$910$$, robotica`Private`i]; 
               Part[robotica`Private`d, robotica`Private`i] = 0; Null]; Null]; 
           robotica`Private`Td[1] = Dot[
              RotationTransform[
               Part[robotica`Private`theta, 1], {0, 0, 1}], 
              TranslationTransform[{0, 0, 
                Part[robotica`Private`d, 1]}], 
              TranslationTransform[{
                Part[robotica`Private`r$, 1], 0, 0}], 
              RotationTransform[
               Part[robotica`Private`alpha$, 1], {1, 0, 0}]]; 
           For[robotica`Private`j = 2, robotica`Private`j <= 
             robotica`Private`dof$, 
             Increment[robotica`Private`j], 
             robotica`Private`Td[robotica`Private`j] = Dot[
                robotica`Private`Td[robotica`Private`j - 1], 
                RotationTransform[
                 Part[robotica`Private`theta, robotica`Private`j], {0, 0, 1}], 
                TranslationTransform[{0, 0, 
                  Part[robotica`Private`d, robotica`Private`j]}], 
                TranslationTransform[{
                  Part[robotica`Private`r$, robotica`Private`j], 0, 0}], 
                RotationTransform[
                 Part[robotica`Private`alpha$, robotica`Private`j], {1, 0, 
                 0}]]; Null]; Graphics3D[{{LightBrown, 
               Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
              If[
               robotica`isRevolutionary[
                Part[robotica`Private`jointtype$, 1]], 
               robotica`drawJoint[
                Part[robotica`Private`jointtype$, 1], 
                Part[robotica`Private`d, 1], 
                Part[robotica`Private`r$, 1], 
                Part[robotica`Private`params$$910$$, 1], 
                OptionValue[robotica`Private`showArrows]], 
               robotica`drawJoint[
                Part[robotica`Private`jointtype$, 1], 
                Part[robotica`Private`params$$910$$, 1], 
                Part[robotica`Private`r$, 1], 
                Part[robotica`Private`theta, 1]], 
               OptionValue[robotica`Private`showArrows]], 
              If[robotica`Private`dof$ == 1, 
               GeometricTransformation[
                robotica`drawGripper[robotica`Private`g$$910$$, 0, 
                 OptionValue[robotica`Private`showArrows]], 
                Chop[
                 robotica`Private`Td[robotica`Private`dof$]]], 
               If[robotica`Private`showRobot$$910$$, 
                Table[
                 If[
                  robotica`isRevolutionary[
                   Part[robotica`Private`jointtype$, robotica`Private`i]], 
                  GeometricTransformation[
                   robotica`drawJoint[
                    Part[robotica`Private`jointtype$, robotica`Private`i], 
                    Part[robotica`Private`d, robotica`Private`i], 
                    Part[robotica`Private`r$, robotica`Private`i], 
                    Part[robotica`Private`params$$910$$, robotica`Private`i], 
                    
                    OptionValue[robotica`Private`showArrows]], 
                   robotica`Private`Td[robotica`Private`i - 1]], 
                  GeometricTransformation[
                   robotica`drawJoint[
                    Part[robotica`Private`jointtype$, robotica`Private`i], 
                    Part[robotica`Private`params$$910$$, robotica`Private`i], 
                    
                    Part[robotica`Private`r$, robotica`Private`i], 
                    Part[robotica`Private`theta, robotica`Private`i], 
                    OptionValue[robotica`Private`showArrows]], 
                   robotica`Private`Td[robotica`Private`i - 1]]], {
                 robotica`Private`i, 2, robotica`Private`dof$}]]], 
              GeometricTransformation[
               robotica`drawGripper[robotica`Private`g$$910$$, 0, 
                OptionValue[robotica`Private`showArrows]], 
               Chop[
                robotica`Private`Td[robotica`Private`dof$]]], 
              If[
               OptionValue[robotica`Private`showPlanes], 
               GeometricTransformation[{Thick, {Blue, 
                  Rotate[
                   robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                  Text[
                   Subscript["x", robotica`Private`planei$$910$$], {
                   0.9, 0.2, 0}]}, {Green, 
                  Rotate[
                   robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                  Text[
                   Subscript["y", robotica`Private`planei$$910$$], {
                   0.2, 0.9, 0}]}, Blue, 
                 Opacity[0.2], 
                 Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
                If[robotica`Private`planei$$910$$ > 0, 
                 robotica`Private`Td[robotica`Private`planei$$910$$], 
                 IdentityMatrix[4]; Null]]], 
              If[
               OptionValue[robotica`Private`showH], 
               Text[
                StringForm[
                "\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
                 MatrixForm[
                  N[
                   Chop[
                    robotica`Private`Td[robotica`Private`dof$]], 2]]], {
                0, 0, -3.2}]]}, SphericalRegion -> True, ImageSize -> 425, 
             Boxed -> False]], {{robotica`Private`params$$910$$, 
           ConstantArray[0, robotica`Private`dof$]}, ControlType -> None}, 
         Dynamic[
          Grid[
           Table[
            With[{robotica`Private`i$ = robotica`Private`i}, 
             If[
              robotica`isPrismatic[
               Part[robotica`Private`jointtype$, robotica`Private`i$]], {
               Subscript["d", robotica`Private`i$], 
               Slider[
                Dynamic[
                 Part[robotica`Private`params$$910$$, robotica`Private`i$]], {
                0, 1, 1/20}, ImageSize -> Small], 
               Dynamic[
                Part[robotica`Private`params$$910$$, robotica`Private`i$]]}, {
              
               Subscript["\[Theta]", robotica`Private`i$], 
               Slider[
                Dynamic[
                 Part[
                 robotica`Private`params$$910$$, robotica`Private`i$]], {-Pi, 
                 Pi, Pi/32}, ImageSize -> Small], 
               Dynamic[
                Part[
                robotica`Private`params$$910$$, robotica`Private`i$]]}]], {
            robotica`Private`i, robotica`Private`dof$}]]], 
         Delimiter, {{robotica`Private`g$$910$$, 1, "grip"}, 0, 1, 0.01, 
          ImageSize -> Small, Appearance -> "Labeled"}, {{
          robotica`Private`showRobot$$910$$, True, "show robot"}, {
          True, False}}, {{robotica`Private`planei$$910$$, 0, "xy Plane"}, 0, 
          robotica`Private`dof$, 1, ImageSize -> Small, Appearance -> 
          "Labeled", ControlType -> If[
            OptionValue[robotica`Private`showPlanes], Slider, None]}, 
         ControlPlacement -> Left, SaveDefinitions -> True], 
       Options[robotica`drawRobot] = {
        robotica`Private`showArrows -> True, robotica`Private`showH -> True, 
         robotica`Private`showManipEllipse -> False, 
         robotica`Private`showPlanes -> False}, 
       TagSet[robotica`drawRobot, 
        MessageName[robotica`drawRobot, "usage"], 
        "drawRobot[] displays a manipulate window and the robot so users can \
adjust on joint parameters.\nOptional parameters:\nshowArrows displays the \
coordinate axes,\nshowH writes the homogenous transform,\nshowManipEllipse-> \
False,\nshowPlanes displays a controller to show the xy plane at each axis \
(useful for inverse kinematics)\n"], 
       Attributes[robotica`Private`dof$] = {Temporary}, 
       Attributes[robotica`Private`r$] = {Temporary}, 
       Attributes[robotica`Private`alpha$] = {Temporary}, 
       Attributes[robotica`Private`jointtype$] = {Temporary}, 
       robotica`Private`i = 2, robotica`isPrismatic[
         Pattern[robotica`Private`jtype, 
          Blank[String]]] := 
       MemberQ[{"Prismatic", "prismatic", "P", "p"}, robotica`Private`jtype], 
       
       TagSet[robotica`isPrismatic, 
        MessageName[robotica`isPrismatic, "usage"], "sticazzi"], 
       robotica`Private`params$$910$$ = {0}, robotica`isRevolutionary[
         Pattern[robotica`Private`jtype, 
          Blank[String]]] := 
       MemberQ[{"Revolute", "revolute", "R", "r"}, robotica`Private`jtype], 
       TagSet[robotica`isRevolutionary, 
        MessageName[robotica`isRevolutionary, "usage"], "mecojoni"], 
       robotica`drawJoint[
         Pattern[robotica`Private`j, 
          Blank[]], 
         Pattern[robotica`Private`d, 
          Blank[]], 
         Pattern[robotica`Private`r, 
          Blank[]], 
         Pattern[robotica`Private`theta, 
          Blank[]], 
         Optional[
          Pattern[robotica`Private`showArrow, 
           Blank[]], True]] := 
       Module[{robotica`Private`jr = 1/5, robotica`Private`ar = 1/20, 
          robotica`Private`pr = 1/7, robotica`Private`vr = 1/6}, {
          If[robotica`Private`showArrow, 
           robotica`drawCoordAxes[robotica`Private`jr]], 
          Opacity[1], {
           Opacity[0.5], Gray, 
           If[
            robotica`isPrismatic[robotica`Private`j], 
            
            Cuboid[{-robotica`Private`ar, -robotica`Private`ar, -1 + 
              robotica`Private`d - robotica`Private`jr - 0.01}, {
             robotica`Private`ar, robotica`Private`ar, robotica`Private`d + 
              0.01}], 
            
            Cylinder[{{
              0, 0, Min[-robotica`Private`ar, robotica`Private`d - 
                 robotica`Private`jr] - 0.01}, {
              0, 0, Max[robotica`Private`ar, robotica`Private`d] + 0.01}}, 
             robotica`Private`ar]]}, {LightBlue, 
           If[
            robotica`isPrismatic[robotica`Private`j], {
             
             Cuboid[{-robotica`Private`jr, -robotica`Private`jr, -
               robotica`Private`jr}, {
              robotica`Private`jr, robotica`Private`jr, robotica`Private`jr - 
               0.1}], 
             Cuboid[{-robotica`Private`jr, -robotica`Private`jr, 
               Plus[robotica`Private`jr]}, {
              robotica`Private`jr, robotica`Private`jr, robotica`Private`jr + 
               0.05}]}, {
             
             Cylinder[{{0, 0, -robotica`Private`jr - 0.1}, {
               0, 0, robotica`Private`jr + 0.1}}, 0.9 robotica`Private`jr]}]}, 
          Rotate[{
            Opacity[0.5], Gray, 
            
            Cuboid[{-robotica`Private`ar, -robotica`Private`ar, 
              robotica`Private`d - robotica`Private`ar}, {
             robotica`Private`r, robotica`Private`ar, robotica`Private`d + 
              robotica`Private`ar}]}, robotica`Private`theta, {0, 0, 1}]}], 
       TagSet[robotica`drawJoint, 
        MessageName[robotica`drawJoint, "usage"], ""], 
       robotica`drawCoordAxes[
         Pattern[robotica`Private`jr, 
          Blank[Rational]]] := {Thick, {Red, 
          robotica`drawZArrow[robotica`Private`jr]}, {Blue, 
          Rotate[
           robotica`drawZArrow[robotica`Private`jr], Pi/2, {0, 1, 0}]}, {
         Green, 
          Rotate[
           robotica`drawZArrow[robotica`Private`jr], -(Pi/2), {1, 0, 0}]}}, 
       TagSet[robotica`drawCoordAxes, 
        MessageName[robotica`drawCoordAxes, "usage"], ""], robotica`drawZArrow[
         Pattern[robotica`Private`jr, 
          Blank[Rational]]] := 
       Line[{{{0, 0, 0}, {0, 0, 2 robotica`Private`jr}}, {{
           0, 0, 2 robotica`Private`jr}, {
           1/32, 0, (3 robotica`Private`jr)/2}}, {{
           0, 0, 2 robotica`Private`jr}, {(-1)/32, 0, (3 robotica`Private`jr)/
            2}}, {{0, 0, 2 robotica`Private`jr}, {
           0, 1/32, (3 robotica`Private`jr)/2}}, {{
           0, 0, 2 robotica`Private`jr}, {
           0, (-1)/32, (3 robotica`Private`jr)/2}}}], 
       TagSet[robotica`drawZArrow, 
        MessageName[robotica`drawZArrow, "usage"], ""], robotica`drawGripper[
         Pattern[robotica`Private`g, 
          Blank[]], 
         Pattern[robotica`Private`r, 
          Blank[]], 
         Optional[
          Pattern[robotica`Private`showArrow, 
           Blank[]], True]] := 
       Module[{robotica`Private`jr = 1/5, robotica`Private`ar = 1/20}, {
          Opacity[1], 
          If[robotica`Private`showArrow, 
           robotica`drawCoordAxes[robotica`Private`jr]], 
          If[robotica`Private`r != 0, {Gray, 
            
            Cuboid[{(-2) robotica`Private`ar, -robotica`Private`ar, (-4) 
              robotica`Private`ar}, {
             0, robotica`Private`ar, 4 robotica`Private`ar}], 
            
            Cuboid[{0 robotica`Private`ar, -robotica`Private`ar, 
              robotica`Private`g 2 robotica`Private`ar}, {
             4 robotica`Private`ar, robotica`Private`ar, 
              2 (1 + robotica`Private`g) robotica`Private`ar}], 
            
            Cuboid[{0 robotica`Private`ar, -
              robotica`Private`ar, -(robotica`Private`g 2 
               robotica`Private`ar)}, {
             4 robotica`Private`ar, 
              robotica`Private`ar, (-2) (1 + robotica`Private`g) 
              robotica`Private`ar}]}, {Gray, 
            
            Cuboid[{(-4) robotica`Private`ar, -robotica`Private`ar, (-2) 
              robotica`Private`ar}, {
             4 robotica`Private`ar, robotica`Private`ar, 0}], 
            
            Cuboid[{robotica`Private`g 2 robotica`Private`ar, -
              robotica`Private`ar, 0 robotica`Private`ar}, {
             2 (1 + robotica`Private`g) robotica`Private`ar, 
              robotica`Private`ar, 4 robotica`Private`ar}], 
            
            Cuboid[{-(robotica`Private`g 2 robotica`Private`ar), -
              robotica`Private`ar, 0 
              robotica`Private`ar}, {(-2) (1 + robotica`Private`g) 
              robotica`Private`ar, robotica`Private`ar, 4 
              robotica`Private`ar}]}]}], 
       TagSet[robotica`drawGripper, 
        MessageName[robotica`drawGripper, "usage"], ""], 
       robotica`Private`g$$910$$ = 1., robotica`Private`showRobot$$910$$ = 
       True, Attributes[Subscript] = {NHoldRest}, 
       robotica`Private`planei$$910$$ = 0, 
       Attributes[robotica`Private`i$] = {Temporary}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.766484219770482*^9}]
}, Open  ]],

Cell["\<\

    
  links, rigid, structural parts of the manipulator, it can apply an angle
// replicate image 82 with robotica  

#Degrees of freedom

// Brief explanation 

\[LineSeparator]\
\>", "Text",
 CellChangeTimes->{{3.766295733165847*^9, 3.7662957565178432`*^9}, {
   3.7662958016298227`*^9, 3.76629604552754*^9}, {3.7662961146401043`*^9, 
   3.7662964047396603`*^9}, {3.766296452268139*^9, 3.76629660046236*^9}, {
   3.766296846496715*^9, 3.766296898554006*^9}, {3.766296974338636*^9, 
   3.76629698946663*^9}, {3.766297030477318*^9, 3.7662971434772463`*^9}, {
   3.7662972028964157`*^9, 3.766297213480227*^9}, {3.766297244609701*^9, 
   3.766297359895707*^9}, {3.766297397073382*^9, 3.766297430267271*^9}, {
   3.7662974674283743`*^9, 3.766297478700749*^9}, {3.766297568136389*^9, 
   3.766297582201277*^9}, {3.7662976306020412`*^9, 3.766297813704967*^9}, {
   3.766297884387218*^9, 3.766297887202635*^9}, {3.7662979199315443`*^9, 
   3.766298284743136*^9}, {3.7662983239281816`*^9, 3.766298346656746*^9}, {
   3.766298453123595*^9, 3.766298546734469*^9}, {3.7662987219932613`*^9, 
   3.7662987326510897`*^9}, {3.7662988251167173`*^9, 3.766298886430357*^9}, {
   3.7662990287939587`*^9, 3.766299091632475*^9}, {3.7662991282637157`*^9, 
   3.766299338947137*^9}, {3.766299415002293*^9, 3.7662995748418293`*^9}, {
   3.766299674481448*^9, 3.7662999001787643`*^9}, {3.766299951409079*^9, 
   3.766300187237356*^9}, {3.7663003527012653`*^9, 3.766300521057148*^9}, {
   3.766464168435871*^9, 3.766464175055335*^9}, 3.76646427986097*^9, {
   3.766464319404605*^9, 3.7664643319132147`*^9}, 3.766464959779932*^9}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex", "=", " ", "ciao"}]], "Input",
 CellChangeTimes->{{3.766464337782012*^9, 3.766464339657435*^9}}],

Cell[BoxData["ciao"], "Output",
 CellChangeTimes->{3.7664841355185127`*^9}]
}, Open  ]],

Cell["\<\
#Kinematics

joint variables: it is a parameter that describes exactly the state of a \\
joint, it is described by N-dimentionals vectors where N is the number of \\
degrees of freedom of the joint

#Forward kinematics
Forward Kinematics is the function that given the state of  N joint variable \\
calculates the position of the last joint \[OpenCurlyDoubleQuote]rispetto a\\
\[CloseCurlyDoubleQuote] position of the first one

#Inverse kinematics
Inverse kinematics is the function that given the position of the end \\
effector calculates the necessary stats of the N joints.
It is more difficult, since the solution is not guaranteed to be always \\
unique or existent

We will explain the Forward kinematics in a robotic arm

In a robotic arm there is only one joint fixed to the ground so it can be \\
viewed as a join-chain called open kinematic chain 

The Denavit Hartemberg method is used to represent the geometric \\
transformation applied by a open kinematics chains minimizing the number of \
\\
parameter necessary.

DH analizes one joint at time, knowing the position of the joint J[i] and the \
\\
joint variables of J[i+1] it calculates the position of J[i+1]

State variables can create two types of geometric transformation:
-transative
-rotative
The geometric transformation can always be described by a matrix.

Fixed translation
//Image of robot with one immobile link (IF POSSIBLE) and A1 matrix depending \
\\
only on r1
//show matrix Hq of page 84
//maybe make a robot with a prismatic fixed joint (no dynamic)


Fixed Rotation
//add rotation to previous image, show product of the two matrix

Prismatic joint
//image with a prismatic joint, show H as product of the 3 matrix ( the theta \
\\
matrix will be the identity)

Revolutionary joint
//image with a prismatic joint, show H as product of the 3 matrix ( the d \\
matrix will be the identity)

Show two joint

The geometric tranformation created by the state

//notes 

// page 84, copy MORE
//Hr fixed rotational matrix because it involves alpha[i] (in sin and cos), \
\\
depends only on the angle imposed by the joint
//Hq don\[CloseCurlyQuote]t let the slide fool you, it is \\
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] and not \\
\[OpenCurlyDoubleQuote]alpha\[CloseCurlyDoubleQuote] is the fixed \\
translational matrix imposed by the lenght of the joint
//Hp rotational matrix depending on the theta angle imposed by the actual \\
state of the joint
//H? translational matrix depending on the d translation imposed by the state \
\\
of the joint

\
\>", "Text",
 CellChangeTimes->{3.7664643746016493`*^9, 3.766464462752008*^9}]
},
WindowSize->{1280, 927},
WindowMargins->{{-1, Automatic}, {Automatic, -1}},
FrontEndVersion->"10.2 for Linux x86 (64-bit) (July 29, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 264, 7, 55, "Input"],
Cell[847, 31, 137, 2, 32, "Output"]
}, Open  ]],
Cell[999, 36, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[1118, 41, 125, 4, 37, "Input"],
Cell[1246, 47, 83, 1, 23, "Print"]
}, Open  ]],
Cell[1344, 51, 146, 2, 77, "Input"],
Cell[1493, 55, 1820, 31, 226, "Text"],
Cell[3316, 88, 163, 2, 32, "Input"],
Cell[3482, 92, 343, 10, 32, "Input"],
Cell[CellGroupData[{
Cell[3850, 106, 50, 1, 32, "Input"],
Cell[3903, 109, 33701, 696, 504, "Output"]
}, Open  ]],
Cell[37619, 808, 1616, 30, 224, "Text"],
Cell[39238, 840, 16, 0, 30, "Text"],
Cell[CellGroupData[{
Cell[39279, 844, 124, 2, 32, "Input"],
Cell[39406, 848, 75, 1, 32, "Output"]
}, Open  ]],
Cell[39496, 852, 2631, 79, 1403, "Text"]
}
]
*)

(* End of internal cache information *)
