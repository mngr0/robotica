(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[      7850,        215]
NotebookOptionsPosition[      7355,        194]
NotebookOutlinePosition[      7690,        209]
CellTagsIndexPosition[      7647,        206]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
#Welcome!\[LineSeparator]
This is a robotics tutorial, here will be described how a robotic manipulator \
works.

//Image of robot, some joints, both types

A robotic arm is made of link connected by joints that can be of two kind:
    prismatic, traslatory: capable of translating a link
    revolutionary, rotative: capable of rotate a link
    
 // replicate image 81 with robotica\
\>", "Text",
 CellChangeTimes->{{3.766295733165847*^9, 3.7662957565178432`*^9}, {
   3.7662958016298227`*^9, 3.76629604552754*^9}, {3.7662961146401043`*^9, 
   3.7662964047396603`*^9}, {3.766296452268139*^9, 3.76629660046236*^9}, {
   3.766296846496715*^9, 3.766296898554006*^9}, {3.766296974338636*^9, 
   3.76629698946663*^9}, {3.766297030477318*^9, 3.7662971434772463`*^9}, {
   3.7662972028964157`*^9, 3.766297213480227*^9}, {3.766297244609701*^9, 
   3.766297359895707*^9}, {3.766297397073382*^9, 3.766297430267271*^9}, {
   3.7662974674283743`*^9, 3.766297478700749*^9}, {3.766297568136389*^9, 
   3.766297582201277*^9}, {3.7662976306020412`*^9, 3.766297813704967*^9}, {
   3.766297884387218*^9, 3.766297887202635*^9}, {3.7662979199315443`*^9, 
   3.766298284743136*^9}, {3.7662983239281816`*^9, 3.766298346656746*^9}, {
   3.766298453123595*^9, 3.766298546734469*^9}, {3.7662987219932613`*^9, 
   3.7662987326510897`*^9}, {3.7662988251167173`*^9, 3.766298886430357*^9}, {
   3.7662990287939587`*^9, 3.766299091632475*^9}, {3.7662991282637157`*^9, 
   3.766299338947137*^9}, {3.766299415002293*^9, 3.7662995748418293`*^9}, {
   3.766299674481448*^9, 3.7662999001787643`*^9}, {3.766299951409079*^9, 
   3.766300187237356*^9}, {3.7663003527012653`*^9, 3.766300521057148*^9}, {
   3.766464168435871*^9, 3.766464175055335*^9}, 3.76646427986097*^9, {
   3.766464319404605*^9, 3.7664643319132147`*^9}, 3.766464959779932*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ex", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "r", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "Pi", "}"}]}], "}"}]}], ";", " ", 
  RowBox[{"drawRobot", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "r", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "Pi", "}"}]}], "}"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.766465115186953*^9, 3.766465138603393*^9}}],

Cell["\<\

    
  links, rigid, structural parts of the manipulator, it can apply an angle
// replicate image 82 with robotica  

#Degrees of freedom

// Brief explanation 

\[LineSeparator]\
\>", "Text",
 CellChangeTimes->{{3.766295733165847*^9, 3.7662957565178432`*^9}, {
   3.7662958016298227`*^9, 3.76629604552754*^9}, {3.7662961146401043`*^9, 
   3.7662964047396603`*^9}, {3.766296452268139*^9, 3.76629660046236*^9}, {
   3.766296846496715*^9, 3.766296898554006*^9}, {3.766296974338636*^9, 
   3.76629698946663*^9}, {3.766297030477318*^9, 3.7662971434772463`*^9}, {
   3.7662972028964157`*^9, 3.766297213480227*^9}, {3.766297244609701*^9, 
   3.766297359895707*^9}, {3.766297397073382*^9, 3.766297430267271*^9}, {
   3.7662974674283743`*^9, 3.766297478700749*^9}, {3.766297568136389*^9, 
   3.766297582201277*^9}, {3.7662976306020412`*^9, 3.766297813704967*^9}, {
   3.766297884387218*^9, 3.766297887202635*^9}, {3.7662979199315443`*^9, 
   3.766298284743136*^9}, {3.7662983239281816`*^9, 3.766298346656746*^9}, {
   3.766298453123595*^9, 3.766298546734469*^9}, {3.7662987219932613`*^9, 
   3.7662987326510897`*^9}, {3.7662988251167173`*^9, 3.766298886430357*^9}, {
   3.7662990287939587`*^9, 3.766299091632475*^9}, {3.7662991282637157`*^9, 
   3.766299338947137*^9}, {3.766299415002293*^9, 3.7662995748418293`*^9}, {
   3.766299674481448*^9, 3.7662999001787643`*^9}, {3.766299951409079*^9, 
   3.766300187237356*^9}, {3.7663003527012653`*^9, 3.766300521057148*^9}, {
   3.766464168435871*^9, 3.766464175055335*^9}, 3.76646427986097*^9, {
   3.766464319404605*^9, 3.7664643319132147`*^9}, 3.766464959779932*^9}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex", "=", " ", "ciao"}]], "Input",
 CellChangeTimes->{{3.766464337782012*^9, 3.766464339657435*^9}}],

Cell[BoxData["ciao"], "Output",
 CellChangeTimes->{3.766464340576136*^9}]
}, Open  ]],

Cell["\<\
#Kinematics

joint variables: it is a parameter that describes exactly the state of a \\
joint, it is described by N-dimentionals vectors where N is the number of \\
degrees of freedom of the joint

#Forward kinematics
Forward Kinematics is the function that given the state of  N joint variable \\
calculates the position of the last joint \[OpenCurlyDoubleQuote]rispetto a\\
\[CloseCurlyDoubleQuote] position of the first one

#Inverse kinematics
Inverse kinematics is the function that given the position of the end \\
effector calculates the necessary stats of the N joints.
It is more difficult, since the solution is not guaranteed to be always \\
unique or existent

We will explain the Forward kinematics in a robotic arm

In a robotic arm there is only one joint fixed to the ground so it can be \\
viewed as a join-chain called open kinematic chain 

The Denavit Hartemberg method is used to represent the geometric \\
transformation applied by a open kinematics chains minimizing the number of \
\\
parameter necessary.

DH analizes one joint at time, knowing the position of the joint J[i] and the \
\\
joint variables of J[i+1] it calculates the position of J[i+1]

State variables can create two types of geometric transformation:
-transative
-rotative
The geometric transformation can always be described by a matrix.

Fixed translation
//Image of robot with one immobile link (IF POSSIBLE) and A1 matrix depending \
\\
only on r1
//show matrix Hq of page 84
//maybe make a robot with a prismatic fixed joint (no dynamic)


Fixed Rotation
//add rotation to previous image, show product of the two matrix

Prismatic joint
//image with a prismatic joint, show H as product of the 3 matrix ( the theta \
\\
matrix will be the identity)

Revolutionary joint
//image with a prismatic joint, show H as product of the 3 matrix ( the d \\
matrix will be the identity)

Show two joint

The geometric tranformation created by the state

//notes 

// page 84, copy MORE
//Hr fixed rotational matrix because it involves alpha[i] (in sin and cos), \
\\
depends only on the angle imposed by the joint
//Hq don\[CloseCurlyQuote]t let the slide fool you, it is \\
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] and not \\
\[OpenCurlyDoubleQuote]alpha\[CloseCurlyDoubleQuote] is the fixed \\
translational matrix imposed by the lenght of the joint
//Hp rotational matrix depending on the theta angle imposed by the actual \\
state of the joint
//H? translational matrix depending on the d translation imposed by the state \
\\
of the joint

\
\>", "Text",
 CellChangeTimes->{3.7664643746016493`*^9, 3.766464462752008*^9}]
},
WindowSize->{1280, 927},
WindowMargins->{{-1, Automatic}, {Automatic, -1}},
FrontEndVersion->"10.2 for Linux x86 (64-bit) (July 29, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1820, 31, 226, "Text"],
Cell[2381, 53, 461, 14, 32, "Input"],
Cell[2845, 69, 1616, 30, 224, "Text"],
Cell[4464, 101, 16, 0, 30, "Text"],
Cell[CellGroupData[{
Cell[4505, 105, 124, 2, 32, "Input"],
Cell[4632, 109, 73, 1, 32, "Output"]
}, Open  ]],
Cell[4720, 113, 2631, 79, 1403, "Text"]
}
]
*)

(* End of internal cache information *)
