(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    342169,       6983]
NotebookOptionsPosition[    336647,       6810]
NotebookOutlinePosition[    338439,       6860]
CellTagsIndexPosition[    338359,       6855]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["\<\
Robotica:
A simple tutorial\
\>", "Title",
 CellChangeTimes->{
  3.559948400406288*^9, {3.7667307500045652`*^9, 3.7667307912858963`*^9}, {
   3.766730872545084*^9, 3.766730878151906*^9}},
 TextAlignment->Left],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " applied to robotic arms"
}], "Subtitle",
 CellChangeTimes->{{3.766730763901042*^9, 3.766730800053795*^9}, {
   3.766730882127811*^9, 3.7667308945842533`*^9}, {3.766730994098053*^9, 
   3.766731043955655*^9}, 3.7667323974461184`*^9, {3.7667325910495367`*^9, 
   3.766732620699233*^9}, 3.766732990877317*^9},
 TextAlignment->Left]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Welcome!", "Chapter",
 CellChangeTimes->{{3.766732916628941*^9, 3.766732917291355*^9}, {
  3.7667329535606194`*^9, 3.766733012814474*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"Needs", "[", "\"\<robotica`\>\"", "]"}], ";"}]], "Code",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{
  3.76673302350518*^9, {3.7667330926973057`*^9, 3.7667331040800962`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["This is a robotics tutorial, here will be described \
how a robotic manipulator works.", "Subchapter"]], "Chapter",
 CellChangeTimes->{{3.766732916628941*^9, 3.766732917291355*^9}, {
   3.7667329535606194`*^9, 3.766733012814474*^9}, {3.76673312053699*^9, 
   3.7667331212410803`*^9}, 3.766733151458494*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"drawAPI", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<r\>\"", ",", "\"\<r\>\"", ",", "\"\<p\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "Pi", ",", 
      RowBox[{"Pi", "/", "2"}]}], "}"}]}], "}"}], "]"}]], "Code",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{3.7667331570929193`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{robotica`Private`g$$548$$550$$552$$ = 1, 
    robotica`Private`params$$548$$550$$552$$ = {0, 0, 0, 0, 0, 0}, 
    robotica`Private`planei$$548$$550$$552$$ = 0, 
    robotica`Private`showRobot$$548$$550$$552$$ = True, Typeset`show$$ = True,
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[FE`robotica`Private`params$$548$$550$$552], {0, 0, 0, 0, 0, 0}}}, {
      Hold[
       Dynamic[
        Grid[
         Table[
          With[{robotica`Private`p$ = robotica`Private`i}, 
           If[
            robotica`isPrismatic[
             Part[{"r", "r", "p"}, robotica`Private`p$]], {
             Subscript["d", robotica`Private`p$], 
             Slider[
              Dynamic[
               Part[
               FE`robotica`Private`params$$548$$550$$552, 
                robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
             Dynamic[
              Part[
              FE`robotica`Private`params$$548$$550$$552, 
               robotica`Private`p$]]}, {
             Subscript["\[Theta]", robotica`Private`p$], 
             Slider[
              Dynamic[
               Part[
               FE`robotica`Private`params$$548$$550$$552, 
                robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> Small], 
             
             Dynamic[
              Part[
              FE`robotica`Private`params$$548$$550$$552, 
               robotica`Private`p$]]}]], {robotica`Private`i, 3}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[FE`robotica`Private`g$$548$$550$$552], 1, "grip"}, 0, 1, 0.01}, {{
      
       Hold[FE`robotica`Private`showRobot$$548$$550$$552], True, 
       "show robot"}, {True, False}}, {{
       Hold[FE`robotica`Private`planei$$548$$550$$552], 0, "xy Plane"}, 0, 3, 
      1}}, Typeset`size$$ = {425., {210., 215.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False, 
    robotica`Private`g$$548$$550$$552$839$$ = 0, 
    robotica`Private`showRobot$$548$$550$$552$840$$ = False, 
    robotica`Private`planei$$548$$550$$552$841$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       robotica`Private`g$$548$$550$$552$$ = 1, 
        robotica`Private`params$$548$$550$$552$$ = {0, 0, 0, 0, 0, 0}, 
        robotica`Private`planei$$548$$550$$552$$ = 0, 
        robotica`Private`showRobot$$548$$550$$552$$ = True}, 
      "ControllerVariables" :> {
        Hold[
        robotica`Private`g$$548$$550$$552$$, 
         robotica`Private`g$$548$$550$$552$839$$, 0], 
        Hold[
        robotica`Private`showRobot$$548$$550$$552$$, 
         robotica`Private`showRobot$$548$$550$$552$840$$, False], 
        Hold[
        robotica`Private`planei$$548$$550$$552$$, 
         robotica`Private`planei$$548$$550$$552$841$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> (Chop["/home/students/fapohund/Projects/robotica", 10^(-10)]; 
       Module[{robotica`Private`jr$ = 1/10, robotica`Private`ar$ = 1/40, 
          robotica`Private`Td$, robotica`Private`j$, robotica`Private`i$, 
          robotica`Private`d$, robotica`Private`theta$}, 
         robotica`Private`d$ = Range[6]; robotica`Private`theta$ = Range[6]; 
         For[robotica`Private`i$ = 1, robotica`Private`i$ <= 3, 
           Increment[robotica`Private`i$], If[
             robotica`isPrismatic[
              Part[{"r", "r", "p"}, robotica`Private`i$]], 
             Part[robotica`Private`theta$, robotica`Private`i$] = 0; 
             Part[robotica`Private`d$, robotica`Private`i$] = 
              Part[robotica`Private`params$$548$$550$$552$$, 
                robotica`Private`i$], 
             Part[robotica`Private`theta$, robotica`Private`i$] = 
              Part[robotica`Private`params$$548$$550$$552$$, 
                robotica`Private`i$]; 
             Part[robotica`Private`d$, robotica`Private`i$] = 0; Null]; Null]; 
         robotica`Private`Td$[1] = Dot[
            RotationTransform[
             Part[robotica`Private`theta$, 1], {0, 0, 1}], 
            TranslationTransform[{0, 0, 
              Part[robotica`Private`d$, 1]}], 
            TranslationTransform[{
              Part[{1, 1, 1}, 1], 0, 0}], 
            RotationTransform[
             Part[{0, Pi, Rational[1, 2] Pi}, 1], {1, 0, 0}]]; 
         For[robotica`Private`j$ = 2, robotica`Private`j$ <= 3, 
           Increment[robotica`Private`j$], 
           robotica`Private`Td$[robotica`Private`j$] = Dot[
              robotica`Private`Td$[robotica`Private`j$ - 1], 
              RotationTransform[
               Part[robotica`Private`theta$, robotica`Private`j$], {0, 0, 1}], 
              TranslationTransform[{0, 0, 
                Part[robotica`Private`d$, robotica`Private`j$]}], 
              TranslationTransform[{
                Part[{1, 1, 1}, robotica`Private`j$], 0, 0}], 
              RotationTransform[
               Part[{0, Pi, Rational[1, 2] Pi}, robotica`Private`j$], {1, 0, 
               0}]]; Null]; Graphics3D[{{LightBrown, 
             Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
            If[
             robotica`isRevolutionary[
              Part[{"r", "r", "p"}, 1]], 
             robotica`drawJoint[
              Part[{"r", "r", "p"}, 1], 
              Part[robotica`Private`d$, 1], 
              Part[{1, 1, 1}, 1], 
              Part[robotica`Private`params$$548$$550$$552$$, 1], 
              OptionValue[
              robotica`drawRobot, {{
                robotica`Private`showArrows -> True, robotica`Private`showH -> 
                 True, robotica`Private`showManipEllipse -> False, 
                 robotica`Private`showPlanes -> False}}, 
               robotica`Private`showArrows]], 
             robotica`drawJoint[
              Part[{"r", "r", "p"}, 1], 
              Part[robotica`Private`params$$548$$550$$552$$, 1], 
              Part[{1, 1, 1}, 1], 
              Part[robotica`Private`theta$, 1]], 
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showArrows]], 
            If[3 == 1, 
             GeometricTransformation[
              robotica`drawGripper[robotica`Private`g$$548$$550$$552$$, 0, 
               OptionValue[
               robotica`drawRobot, {{
                 robotica`Private`showArrows -> True, robotica`Private`showH -> 
                  True, robotica`Private`showManipEllipse -> False, 
                  robotica`Private`showPlanes -> False}}, 
                robotica`Private`showArrows]], 
              Chop[
               robotica`Private`Td$[3]]], 
             If[robotica`Private`showRobot$$548$$550$$552$$, 
              Table[
               If[
                robotica`isRevolutionary[
                 Part[{"r", "r", "p"}, robotica`Private`i$]], 
                GeometricTransformation[
                 robotica`drawJoint[
                  Part[{"r", "r", "p"}, robotica`Private`i$], 
                  Part[robotica`Private`d$, robotica`Private`i$], 
                  Part[{1, 1, 1}, robotica`Private`i$], 
                  Part[
                  robotica`Private`params$$548$$550$$552$$, 
                   robotica`Private`i$], 
                  OptionValue[
                  robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                   robotica`Private`showArrows]], 
                 robotica`Private`Td$[robotica`Private`i$ - 1]], 
                GeometricTransformation[
                 robotica`drawJoint[
                  Part[{"r", "r", "p"}, robotica`Private`i$], 
                  Part[
                  robotica`Private`params$$548$$550$$552$$, 
                   robotica`Private`i$], 
                  Part[{1, 1, 1}, robotica`Private`i$], 
                  Part[robotica`Private`theta$, robotica`Private`i$], 
                  OptionValue[
                  robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                   robotica`Private`showArrows]], 
                 robotica`Private`Td$[robotica`Private`i$ - 1]]], {
               robotica`Private`i$, 2, 3}]]], 
            GeometricTransformation[
             robotica`drawGripper[robotica`Private`g$$548$$550$$552$$, 0, 
              OptionValue[
              robotica`drawRobot, {{
                robotica`Private`showArrows -> True, robotica`Private`showH -> 
                 True, robotica`Private`showManipEllipse -> False, 
                 robotica`Private`showPlanes -> False}}, 
               robotica`Private`showArrows]], 
             Chop[
              robotica`Private`Td$[3]]], 
            If[
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showPlanes], 
             GeometricTransformation[{Thick, {Blue, 
                Rotate[
                 robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                Text[
                 Subscript["x", robotica`Private`planei$$548$$550$$552$$], {
                 0.9, 0.2, 0}]}, {Green, 
                Rotate[
                 robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                Text[
                 Subscript["y", robotica`Private`planei$$548$$550$$552$$], {
                 0.2, 0.9, 0}]}, Blue, 
               Opacity[0.2], 
               Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
              If[robotica`Private`planei$$548$$550$$552$$ > 0, 
               robotica`Private`Td$[robotica`Private`planei$$548$$550$$552$$],
                IdentityMatrix[4]; Null]]], 
            If[
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showH], 
             Text[
              StringForm["\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
               MatrixForm[
                N[
                 Chop[
                  robotica`Private`Td$[3]], 2]]], {0, 0, -3.2}]]}, 
           SphericalRegion -> True, ImageSize -> 425, Boxed -> False]]), 
      "Specifications" :> {{{
         robotica`Private`params$$548$$550$$552$$, {0, 0, 0, 0, 0, 0}}, 
         ControlType -> None}, 
        Dynamic[
         Grid[
          Table[
           With[{robotica`Private`p$ = robotica`Private`i}, 
            If[
             robotica`isPrismatic[
              Part[{"r", "r", "p"}, robotica`Private`p$]], {
              Subscript["d", robotica`Private`p$], 
              Slider[
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$, 
                 robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
              Dynamic[
               Part[
               robotica`Private`params$$548$$550$$552$$, 
                robotica`Private`p$]]}, {
              Subscript["\[Theta]", robotica`Private`p$], 
              Slider[
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$, 
                 robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> Small], 
              Dynamic[
               Part[
               robotica`Private`params$$548$$550$$552$$, 
                robotica`Private`p$]]}]], {robotica`Private`i, 3}]]], 
        Delimiter, {{robotica`Private`g$$548$$550$$552$$, 1, "grip"}, 0, 1, 
         0.01, ImageSize -> Small, Appearance -> "Labeled"}, {{
         robotica`Private`showRobot$$548$$550$$552$$, True, "show robot"}, {
         True, False}}, {{
         robotica`Private`planei$$548$$550$$552$$, 0, "xy Plane"}, 0, 3, 1, 
         ImageSize -> Small, Appearance -> "Labeled", ControlType -> None}}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{693., {242., 252.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({
      Attributes[robotica`Private`jr$] = {Temporary}, 
       Attributes[robotica`Private`ar$] = {Temporary}, 
       Attributes[robotica`Private`Td$] = {Temporary}, 
       Attributes[robotica`Private`j$] = {Temporary}, 
       Attributes[robotica`Private`i$] = {Temporary}, 
       Attributes[robotica`Private`d$] = {Temporary}, 
       Attributes[robotica`Private`theta$] = {Temporary}, robotica`isPrismatic[
         Pattern[robotica`Private`jtype, 
          Blank[String]]] := 
       MemberQ[{"Prismatic", "prismatic", "P", "p"}, robotica`Private`jtype], 
       
       TagSet[robotica`isPrismatic, 
        MessageName[robotica`isPrismatic, "usage"], ""], 
       robotica`Private`params$$548$$550$$552$$ = {0, 0, 0, 0, 0, 0}, 
       robotica`isRevolutionary[
         Pattern[robotica`Private`jtype, 
          Blank[String]]] := 
       MemberQ[{"Revolute", "revolute", "R", "r"}, robotica`Private`jtype], 
       TagSet[robotica`isRevolutionary, 
        MessageName[robotica`isRevolutionary, "usage"], ""], 
       robotica`drawJoint[
         Pattern[robotica`Private`j, 
          Blank[]], 
         Pattern[robotica`Private`d, 
          Blank[]], 
         Pattern[robotica`Private`r, 
          Blank[]], 
         Pattern[robotica`Private`theta, 
          Blank[]], 
         Optional[
          Pattern[robotica`Private`showArrow, 
           Blank[]], True]] := 
       Module[{robotica`Private`jr = 1/5, robotica`Private`ar = 1/20, 
          robotica`Private`pr = 1/7, robotica`Private`vr = 1/6}, {
          If[robotica`Private`showArrow, 
           robotica`drawCoordAxes[robotica`Private`jr]], 
          Opacity[1], {
           Opacity[0.5], Gray, 
           If[
            robotica`isPrismatic[robotica`Private`j], 
            Cuboid[{-robotica`Private`ar, -robotica`Private`ar, -1 + 
              robotica`Private`d - robotica`Private`jr - 0.01}, {
             robotica`Private`ar, robotica`Private`ar, robotica`Private`d + 
              0.01}], 
            
            Cylinder[{{
              0, 0, Min[-robotica`Private`ar, robotica`Private`d - 
                 robotica`Private`jr] - 0.01}, {
              0, 0, Max[robotica`Private`ar, robotica`Private`d] + 0.01}}, 
             robotica`Private`ar]]}, {LightBlue, 
           If[
            robotica`isPrismatic[robotica`Private`j], {
             
             Cuboid[{-robotica`Private`jr, -robotica`Private`jr, -
               robotica`Private`jr}, {
              robotica`Private`jr, robotica`Private`jr, robotica`Private`jr - 
               0.1}], 
             Cuboid[{-robotica`Private`jr, -robotica`Private`jr, 
               Plus[robotica`Private`jr]}, {
              robotica`Private`jr, robotica`Private`jr, robotica`Private`jr + 
               0.05}]}, {
             
             Cylinder[{{0, 0, -robotica`Private`jr - 0.1}, {
               0, 0, robotica`Private`jr + 0.1}}, 0.9 robotica`Private`jr]}]}, 
          Rotate[{
            Opacity[0.5], Gray, 
            
            Cuboid[{-robotica`Private`ar, -robotica`Private`ar, 
              robotica`Private`d - robotica`Private`ar}, {
             robotica`Private`r, robotica`Private`ar, robotica`Private`d + 
              robotica`Private`ar}]}, robotica`Private`theta, {0, 0, 1}]}], 
       TagSet[robotica`drawJoint, 
        MessageName[robotica`drawJoint, "usage"], ""], 
       robotica`drawCoordAxes[
         Pattern[robotica`Private`jr, 
          Blank[]]] := {Thick, {Red, 
          robotica`drawZArrow[robotica`Private`jr]}, {Blue, 
          Rotate[
           robotica`drawZArrow[robotica`Private`jr], Pi/2, {0, 1, 0}]}, {
         Green, 
          Rotate[
           robotica`drawZArrow[robotica`Private`jr], -(Pi/2), {1, 0, 0}]}}, 
       TagSet[robotica`drawCoordAxes, 
        MessageName[robotica`drawCoordAxes, "usage"], ""], robotica`drawZArrow[
         Pattern[robotica`Private`jr, 
          Blank[]]] := 
       Line[{{{0, 0, 0}, {0, 0, 2 robotica`Private`jr}}, {{
           0, 0, 2 robotica`Private`jr}, {
           1/32, 0, (3 robotica`Private`jr)/2}}, {{
           0, 0, 2 robotica`Private`jr}, {(-1)/32, 0, (3 robotica`Private`jr)/
            2}}, {{0, 0, 2 robotica`Private`jr}, {
           0, 1/32, (3 robotica`Private`jr)/2}}, {{
           0, 0, 2 robotica`Private`jr}, {
           0, (-1)/32, (3 robotica`Private`jr)/2}}}], 
       TagSet[robotica`drawZArrow, 
        MessageName[robotica`drawZArrow, "usage"], ""], robotica`drawRobot[
         Pattern[robotica`Private`dof$, 
          Blank[]], 
         Pattern[robotica`Private`r$, 
          Blank[]], 
         Pattern[robotica`Private`alpha$, 
          Blank[]], 
         Pattern[robotica`Private`jointtype$, 
          Blank[]], 
         OptionsPattern[]] := Manipulate[Chop[
           Out[], 10^(-10)]; 
         Module[{robotica`Private`jr$ = 1/10, robotica`Private`ar$ = 1/40, 
            robotica`Private`Td$, robotica`Private`j$, robotica`Private`i$, 
            robotica`Private`d$, robotica`Private`theta$}, 
           robotica`Private`d$ = Range[6]; robotica`Private`theta$ = Range[6]; 
           For[robotica`Private`i$ = 1, robotica`Private`i$ <= 
             robotica`Private`dof$, 
             Increment[robotica`Private`i$], If[
               robotica`isPrismatic[
                Part[robotica`Private`jointtype$, robotica`Private`i$]], 
               Part[robotica`Private`theta$, robotica`Private`i$] = 0; 
               Part[robotica`Private`d$, robotica`Private`i$] = 
                Part[robotica`Private`params$$548$$550$$552$$, 
                  robotica`Private`i$], 
               Part[robotica`Private`theta$, robotica`Private`i$] = 
                Part[robotica`Private`params$$548$$550$$552$$, 
                  robotica`Private`i$]; 
               Part[robotica`Private`d$, robotica`Private`i$] = 0; Null]; 
             Null]; robotica`Private`Td$[1] = Dot[
              RotationTransform[
               Part[robotica`Private`theta$, 1], {0, 0, 1}], 
              TranslationTransform[{0, 0, 
                Part[robotica`Private`d$, 1]}], 
              TranslationTransform[{
                Part[robotica`Private`r$, 1], 0, 0}], 
              RotationTransform[
               Part[robotica`Private`alpha$, 1], {1, 0, 0}]]; 
           For[robotica`Private`j$ = 2, robotica`Private`j$ <= 
             robotica`Private`dof$, 
             Increment[robotica`Private`j$], 
             robotica`Private`Td$[robotica`Private`j$] = Dot[
                robotica`Private`Td$[robotica`Private`j$ - 1], 
                RotationTransform[
                 Part[robotica`Private`theta$, robotica`Private`j$], {0, 0, 
                 1}], 
                TranslationTransform[{0, 0, 
                  Part[robotica`Private`d$, robotica`Private`j$]}], 
                TranslationTransform[{
                  Part[robotica`Private`r$, robotica`Private`j$], 0, 0}], 
                RotationTransform[
                 Part[robotica`Private`alpha$, robotica`Private`j$], {1, 0, 
                 0}]]; Null]; Graphics3D[{{LightBrown, 
               Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
              If[
               robotica`isRevolutionary[
                Part[robotica`Private`jointtype$, 1]], 
               robotica`drawJoint[
                Part[robotica`Private`jointtype$, 1], 
                Part[robotica`Private`d$, 1], 
                Part[robotica`Private`r$, 1], 
                Part[robotica`Private`params$$548$$550$$552$$, 1], 
                OptionValue[robotica`Private`showArrows]], 
               robotica`drawJoint[
                Part[robotica`Private`jointtype$, 1], 
                Part[robotica`Private`params$$548$$550$$552$$, 1], 
                Part[robotica`Private`r$, 1], 
                Part[robotica`Private`theta$, 1]], 
               OptionValue[robotica`Private`showArrows]], 
              If[robotica`Private`dof$ == 1, 
               GeometricTransformation[
                robotica`drawGripper[robotica`Private`g$$548$$550$$552$$, 0, 
                 OptionValue[robotica`Private`showArrows]], 
                Chop[
                 robotica`Private`Td$[robotica`Private`dof$]]], 
               If[robotica`Private`showRobot$$548$$550$$552$$, 
                Table[
                 If[
                  robotica`isRevolutionary[
                   Part[robotica`Private`jointtype$, robotica`Private`i$]], 
                  GeometricTransformation[
                   robotica`drawJoint[
                    Part[robotica`Private`jointtype$, robotica`Private`i$], 
                    Part[robotica`Private`d$, robotica`Private`i$], 
                    Part[robotica`Private`r$, robotica`Private`i$], 
                    Part[
                    robotica`Private`params$$548$$550$$552$$, 
                    robotica`Private`i$], 
                    OptionValue[robotica`Private`showArrows]], 
                   robotica`Private`Td$[robotica`Private`i$ - 1]], 
                  GeometricTransformation[
                   robotica`drawJoint[
                    Part[robotica`Private`jointtype$, robotica`Private`i$], 
                    Part[
                    robotica`Private`params$$548$$550$$552$$, 
                    robotica`Private`i$], 
                    Part[robotica`Private`r$, robotica`Private`i$], 
                    Part[robotica`Private`theta$, robotica`Private`i$], 
                    OptionValue[robotica`Private`showArrows]], 
                   robotica`Private`Td$[robotica`Private`i$ - 1]]], {
                 robotica`Private`i$, 2, robotica`Private`dof$}]]], 
              GeometricTransformation[
               robotica`drawGripper[robotica`Private`g$$548$$550$$552$$, 0, 
                OptionValue[robotica`Private`showArrows]], 
               Chop[
                robotica`Private`Td$[robotica`Private`dof$]]], 
              If[
               OptionValue[robotica`Private`showPlanes], 
               GeometricTransformation[{Thick, {Blue, 
                  Rotate[
                   robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                  Text[
                   Subscript["x", robotica`Private`planei$$548$$550$$552$$], {
                   0.9, 0.2, 0}]}, {Green, 
                  Rotate[
                   robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                  Text[
                   Subscript["y", robotica`Private`planei$$548$$550$$552$$], {
                   0.2, 0.9, 0}]}, Blue, 
                 Opacity[0.2], 
                 Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
                If[robotica`Private`planei$$548$$550$$552$$ > 0, 
                 robotica`Private`Td$[
                 robotica`Private`planei$$548$$550$$552$$], IdentityMatrix[4]; 
                 Null]]], 
              If[
               OptionValue[robotica`Private`showH], 
               Text[
                StringForm[
                "\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
                 MatrixForm[
                  N[
                   Chop[
                    robotica`Private`Td$[robotica`Private`dof$]], 2]]], {
                0, 0, -3.2}]]}, SphericalRegion -> True, ImageSize -> 425, 
             Boxed -> False]], {{robotica`Private`params$$548$$550$$552$$, 
           ConstantArray[0, 6]}, ControlType -> None}, 
         Dynamic[
          Grid[
           Table[
            With[{robotica`Private`p$ = robotica`Private`i}, 
             If[
              robotica`isPrismatic[
               Part[robotica`Private`jointtype$, robotica`Private`p$]], {
               Subscript["d", robotica`Private`p$], 
               Slider[
                Dynamic[
                 Part[
                 robotica`Private`params$$548$$550$$552$$, 
                  robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$, 
                 robotica`Private`p$]]}, {
               Subscript["\[Theta]", robotica`Private`p$], 
               Slider[
                Dynamic[
                 Part[
                 robotica`Private`params$$548$$550$$552$$, 
                  robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> 
                Small], 
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$, 
                 robotica`Private`p$]]}]], {
            robotica`Private`i, robotica`Private`dof$}]]], 
         Delimiter, {{robotica`Private`g$$548$$550$$552$$, 1, "grip"}, 0, 1, 
          0.01, ImageSize -> Small, Appearance -> "Labeled"}, {{
          robotica`Private`showRobot$$548$$550$$552$$, True, "show robot"}, {
          True, False}}, {{
          robotica`Private`planei$$548$$550$$552$$, 0, "xy Plane"}, 0, 
          robotica`Private`dof$, 1, ImageSize -> Small, Appearance -> 
          "Labeled", ControlType -> If[
            OptionValue[robotica`Private`showPlanes], Slider, None]}, 
         ControlPlacement -> Left, SaveDefinitions -> True], 
       Options[robotica`drawRobot] = {
        robotica`Private`showArrows -> True, robotica`Private`showH -> True, 
         robotica`Private`showManipEllipse -> False, 
         robotica`Private`showPlanes -> False}, 
       TagSet[robotica`drawRobot, 
        MessageName[robotica`drawRobot, "usage"], 
        "drawRobot[] displays a manipulate window and the robot so users can \
adjust on joint parameters.\nOptional parameters:\nshowArrows displays the \
coordinate axes,\nshowH writes the homogenous transform,\nshowManipEllipse-> \
False,\nshowPlanes displays a controller to show the xy plane at each axis \
(useful for inverse kinematics)\n"], 
       Attributes[robotica`Private`dof$] = {Temporary}, 
       Attributes[robotica`Private`r$] = {Temporary}, 
       Attributes[robotica`Private`alpha$] = {Temporary}, 
       Attributes[robotica`Private`jointtype$] = {Temporary}, 
       robotica`drawGripper[
         Pattern[robotica`Private`g, 
          Blank[]], 
         Pattern[robotica`Private`r, 
          Blank[]], 
         Optional[
          Pattern[robotica`Private`showArrow, 
           Blank[]], True]] := 
       Module[{robotica`Private`jr = 1/5, robotica`Private`ar = 1/20}, {
          Opacity[1], 
          If[robotica`Private`showArrow, 
           robotica`drawCoordAxes[robotica`Private`jr]], 
          If[robotica`Private`r != 0, {Gray, 
            
            Cuboid[{(-2) robotica`Private`ar, -robotica`Private`ar, (-4) 
              robotica`Private`ar}, {
             0, robotica`Private`ar, 4 robotica`Private`ar}], 
            
            Cuboid[{0 robotica`Private`ar, -robotica`Private`ar, 
              robotica`Private`g 2 robotica`Private`ar}, {
             4 robotica`Private`ar, robotica`Private`ar, 
              2 (1 + robotica`Private`g) robotica`Private`ar}], 
            
            Cuboid[{0 robotica`Private`ar, -
              robotica`Private`ar, -(robotica`Private`g 2 
               robotica`Private`ar)}, {
             4 robotica`Private`ar, 
              robotica`Private`ar, (-2) (1 + robotica`Private`g) 
              robotica`Private`ar}]}, {Gray, 
            
            Cuboid[{(-4) robotica`Private`ar, -robotica`Private`ar, (-2) 
              robotica`Private`ar}, {
             4 robotica`Private`ar, robotica`Private`ar, 0}], 
            
            Cuboid[{robotica`Private`g 2 robotica`Private`ar, -
              robotica`Private`ar, 0 robotica`Private`ar}, {
             2 (1 + robotica`Private`g) robotica`Private`ar, 
              robotica`Private`ar, 4 robotica`Private`ar}], 
            
            Cuboid[{-(robotica`Private`g 2 robotica`Private`ar), -
              robotica`Private`ar, 0 
              robotica`Private`ar}, {(-2) (1 + robotica`Private`g) 
              robotica`Private`ar, robotica`Private`ar, 4 
              robotica`Private`ar}]}]}], 
       TagSet[robotica`drawGripper, 
        MessageName[robotica`drawGripper, "usage"], ""], 
       robotica`Private`g$$548$$550$$552$$ = 1, 
       robotica`Private`showRobot$$548$$550$$552$$ = True, 
       Attributes[Subscript] = {NHoldRest}, 
       robotica`Private`planei$$548$$550$$552$$ = 0, 
       Attributes[robotica`Private`p$] = {Temporary}, robotica`Private`i = 4}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.766745853852907*^9, 3.7667458570527687`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Structure of a robotic arm", "Chapter",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732828113874*^9}, {
  3.766733180749784*^9, 3.766733181189475*^9}, {3.766733446569009*^9, 
  3.7667334498407497`*^9}, {3.766733528250649*^9, 3.766733542523107*^9}, {
  3.766733664438345*^9, 3.766733681783163*^9}, {3.766733918619944*^9, 
  3.766733955980801*^9}}],

Cell["\<\
A robotic arm is made of link connected by joints that can be of two kind:\
\>", "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732828113874*^9}, {
  3.766733180749784*^9, 3.766733181189475*^9}, {3.766733446569009*^9, 
  3.7667334498407497`*^9}, {3.766733528250649*^9, 3.766733542523107*^9}, {
  3.766733664438345*^9, 3.766733681783163*^9}, {3.766733918619944*^9, 
  3.766733929389214*^9}}],

Cell[TextData[{
 "    ",
 StyleBox["Prismatic, traslatory",
  FontWeight->"Bold"],
 StyleBox[": capable of translating a link", "ItemParagraph"]
}], "Item",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732828113874*^9}, {
  3.766733180749784*^9, 3.766733181189475*^9}, {3.766733446569009*^9, 
  3.7667334498407497`*^9}, {3.766733528250649*^9, 3.766733542523107*^9}, {
  3.766733664438345*^9, 3.766733697611126*^9}, {3.7667337987048693`*^9, 
  3.766733798753924*^9}}],

Cell["Immagine mono joint ", "Text",
 CellChangeTimes->{{3.766733813913526*^9, 3.766733820553019*^9}}],

Cell[TextData[{
 "    ",
 StyleBox["Revolutionary, rotative",
  FontWeight->"Bold"],
 ": capable of rotate a link   "
}], "Item",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732828113874*^9}, {
  3.766733180749784*^9, 3.766733181189475*^9}, {3.766733446569009*^9, 
  3.7667334498407497`*^9}, {3.766733528250649*^9, 3.766733542523107*^9}, {
  3.766733664438345*^9, 3.766733735711953*^9}}],

Cell["Immagine mono joint ", "Text",
 CellChangeTimes->{3.766733830707817*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["\<\
Links, rigid, structural parts of the manipulator, it can apply an angle:
Immagine che spiega questo (simil immagine 82 - pag 79)\
\>", "Text",
 CellChangeTimes->{{3.766733840498472*^9, 3.76673384125811*^9}, 
   3.766733912558506*^9, {3.766733966541198*^9, 3.766733989703188*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Theory", "Chapter",
 CellChangeTimes->{{3.766734006836011*^9, 3.766734041909787*^9}}],

Cell[TextData[{
 StyleBox["Degree of freedom (DoF)",
  FontWeight->"Bold"],
 ":\n\nThe Degree of Freedom of a mechanical system is the number of \
independent parameters that define its configuration.\n\nAs example, a point \
free to move in 3D space therefore has 3 degrees of freedom; if the point \
must move on a plane or surface (2D) it has 2 degrees of freedom; if it has \
to move along a straight line or a curve (1D) it has 1 degree of freedom.\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
QfWceRQPhx9XkufkJc8aeL0WwiTUeGxncM/s01y7T5HFamXwwObTe+0NHppV
uWllcN+qyp32Bo87VMs2Ncjrqs9rtTr6ZYt9X7TbM8B01+BO2weabxlkmz7C
PnmkdeqICmWTPMJmm8vanHQ4rFFAag/E4nryGMx/GI6TWqbyPKHk7t1gDu9i
E4LpZXMolx6ayV3UE6xUEyyISVbQeqld7VVT7FVTbfMnm5Y4WykmmxdPMFVP
NC8a3V45rsOjsa0fjmn1eEzbwkmW0Ggxzr0E1z7K0Z2fupppplgCBzNxRBvV
sDbFU3vSAd+ATQHM9bPC/RxQ9Dtg1HJvR7nuViWizxrpFh5eu3YtLi4uKipq
0aJFcGPr1q03btw4d+7c+vXrf/jhh59++iknJ6fsjCE2WhjM+4maK5GL9dGo
KgyBxjQpVeseeNzv0TSDhyZVHpoa3DX7X14bowdtDR6Y/u9OO4OHplXumBvc
N695s8OndzoaXTWteauLPq/V8kifVvu/bJ8xsONu5LXMtg6y3jzCLnVUFz2y
3TywQ8qAsVu+/U24j7IVBIaq/BEOg8H8e5CWLLIiGqPQ/KI87cgzgKSFx4/o
X49oNsXToXPouaPpqd3ICabAsQc33oafbE9PtCkY3o52slNONCuZYFo4umPJ
eHNisvXDwc3VjlZKBzNmmh3pag3mTxCCZ/Dp0fzFw2L+Q8CS8vJnlgXSkmg0
AGlrKnO0QKsq8cxe9Fq6X2maVigU0dHRISEhfn5+4eHhmzZtunDhwuXLl9PS
0mbOnOno6HjgwIEXH7ASDw+DwVQaorYFvQQqo6zk6SIAlhEJ1a5YGzxsWuNe
R4M7nQzutq6d18Ygr0OVR60Nfmtl8LC5weNW1e6bfXTf8uOb5gY5env0tDz8
ResDfTvsHdRh16COOwaabRtstXmEbeooi/RBFcosZWC37ROs0yYGXViF5jEZ
lDGLEiAwGMx/E0H+Pw3kRHQpnYuVCjRA88XzBJKg4aRiCxTghLxLbO6v5NXj
v+1P27Fk9q2NcRdj/PZ5/7LnW8fMmd9mes6KmDpZvH+befpYJNVyLx3UhUfk
5GZAqBaECC9CRVTlVES5ZILAwb+W1u36u677oE0SJORtlUq1evXq2NjYxYsX
R0REJCUlHT16NCcnZ8eOHR4eHs7OzvCvoEw+vFjK33R4GAzmrZBXW6NLOF4j
F7LiSRo8b5k31iDX1OD39gZ3TKvctjO4Zw6N1kd3rQxu2P0vz97gobXBA4sq
udb/yzardsvC6FZH/V7r87YH+plkDGy3ayC0W6Y7hlimD7dJGW23aXyF6rl5
3OcbR9lunfR5yvQrxTlS81pcNR6D+S/DylX3UD9EQVcpnuNLyx3/0bCQlYJQ
UsdEaI4K8ksio+KuXr918ty5NUlJiwODg6Njo5cnTPvuO/m+Uoa+bG/k6gxS
BE3QPpSI6nRB94XW6Ujto9FjipU3GJX1RbLRkrflFHfoqaKionx9fcPCwhIS
Eo4cOXLt2rVjx44FBARMnz49ODgY3kU31SjfvdwDVtqBYjCYt4Zj5AtEOHCR
xQAlSClBwfACN4Ob7T96bmrwuO0ndzp8kmf1v8dmBnltDR6Y1bjfvuYdkyq5
bWvcM/3kvnmVO5Y179nWyOmkPzceeq0v2+zpa7JzQKc9Q0x3DLVIHW6XMqZr
8pAKZbZpgE1C785bhtnumPTLoaUcqjtBAhoHtjCY/yioorFYaqgke4S69Wir
qvNSKEeQfRCvLR3P0YDmRYZQK4L9luRevph1/PCmhOWLF7uHhCxLWBn3y88z
VEVqbX0tTmveeKnxD69tY02woAA9Ky9V95O9mK6VRSWhzw7B20+cOBEeHh4Z
GblkyZLly5dnZmZev379woUL8JZvvvnGy8tLpVLJSw4rfBAc4MJg3jt4VoPq
J8OPLYmC4yS4wd7r9HByuyefNVF80epeD9vHA5o+6d3y6Rdmj/s0fdqnWX7/
5r8NbHt7oN1vIw0e2xrcbf/pXYv/XfkLr9V695ftdg00zRhqvnWIdeqI3tsc
h+39tkL12zdr/P65o3b81HfPL4PS596mHgKOxZEtDOY/C6MNOdECUKGKVoIG
Zcszf/I/fKlvQiOF3ORLBMUKpX9wyKWcnCNnzyQmJ/mGhi8LCYuMj/951szc
OzekchM0xxNSq2pSRA161Azq1MOVqYslSBOIDAsYEtV0oN+qwaEeyi4/hA4S
2qqIiIjQ0NCAgICYmJjt27dnZWVdvHhx1apV7u7u0Gvl5uaCMh0SX3w0bLQw
mPcOgWVYqWwoz9E8x6ABiwX0PcAKJCflJtBSwzApaUoUABp3ABrNisBv/Z/N
qJltXifXtMY9W73rEA/1kuNa7XcPMt8z1DR9YNdNo0dn/iDqpgL+LNTdAtUv
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
fmobr6etf8lr8uODJjPyq7kBo9lck3lsgzlsXehe3EHdWaCNG6jriVTP6w/J
t8B9KlQddx6q7nyhnOp5iBWq/lyuQtVzBxWqgTvX0F1sPA80ckMn2MCNrwcf
34MzCGc/WQEM05XXFGoAhyMWfuHxODUe888jyMnYcloWBwc7Dn5BXisGHjlF
P14t8bnCzryonHGpeE5W8Y/ZJd9eUuqRWtY3F1VQX2cpZU27oNFp6nlCJ+eL
lFMWWVaOFzRQTmeIcnI8rUY6o3E4TciafEota9JJ1ZBf1aNOKMb/qvjqlKb+
bReDR1bVbtvWvdlJn9dqe7R36/2S19o91GxXf+i1rNPG99rx87BDxNCD6iEH
VIP3K2UNyiyRRJTTwH1qqP57VRWq326t+u5SltWXO5H67Cgpqy+2K77YWVKh
vtymrFBfbCZ16p2u0alXGi2r5yaqrHqk0OXUPZmC6pbKQHVNoWV1SabkjV4b
WZ16bmBeVI/1dFl1W0/p1HUdqVPrHU96/Xr3frE8DSvIQTICL/7B6IeWItTQ
j29/xnc58LhlCm+SBGpEFEIbU88T1AgERgtJQw/i0wV83TmgiWcFcZuy0ZsX
VV9SA48XpCcO0wB9fYP688Ry0rf/i95DVk0PUG8eqD0HGHmAz90vrl63/M6d
3EMH965eHrIsIDAkIjx+ecSkOT7G7qDWArGmV/lwDZTRfBGqHnycFwQ9TIW3
6/76omovALW9hTrebOMFqlaeT9t55bX1utvG61G7xU/MlhXYBaksluU3mXe3
1i9368wvbrhINHYDbb1Boxl0G3fQEFpTD2DoRVX3KNTveV5D8B+3/jy+QtXy
FCqUvoeqK//ruCHVcxOgr6vtxdf25qolFNUJUDTYVPxAwwKRljJeBOINFjJh
MG+ByAvyrJKUYYVSqe+JYHcBGHyAqZ6U13pNwaAE+J3L2adQvVaW9F5DfLaW
f4l6reFk9VzNarWW0anHGlqnLuuZzutonezXUrI6b+Cgumzk5Q0o+/UslN16
7kXZrmPRfRMYy41cl5VU7fNTDO5YfHzT/KPs1nq91qHubQ/0k72W6c5+5lsG
WKVPtNz0nWWa2mKTyjxVCQU3dNvmaWqzTSqdTFOVsjqlqCpU+1S1Tu1SVGVE
QJkkq3Vqm6SCkm9/Uc2T1bKaJanKquUmJVSL1BKdmqcooMr9+odSC19FzVIK
ZBmnF1eohpsVUGVvaZBWBNUkpVinxslFOhmkk41OPLitBhQKkzLynCSN41oY
/YiAuKthF19Rdt7yvGWqos6GIqMAotks0MyNrDJfaRDANfQAredIE2RzuIbz
+Qbugh5xFare/Iql73Hql9oznWQv8eLt2r/OFypUHS+ikSdZ1zO/ljf4bNap
NStj7tzJ23fs4KqE+CW+MaEhq1bGxU+Z4d5qFrQHqqqL9brHcnOIukk0vZ6z
dDKx3L0+9UKP1nQe1cb9Ydt599vPfm42J9/a7a71kqIu/qquvuoObo8bfn+r
0axnTT342nNBXS/GcIFYzQfU8AZ1Fgh15jHoRUDxq/KBqZfHqepAn1aqst5P
7+upx8vpU23pYesh0wWfQoTG1WihaLQMGK5ijOeVGKayOQQ08zzy8yQQcMIW
5p+GkNaJAVGE70F1HuCX5VEdtz7onlRksO35RzuoBmuo6uuJ6mmU0aqimqlE
jQ1FFar6hmI9KtGp2nqFTrXWqqCM1ihlGa4ukVUrsbis4JPKqpmoqFirnxmu
VFfZKNaJ1FS94GJw27xGrnXNm/pz4w90lr1W+11DzHf2tdg60HKzQ8fkb42i
OcMotmYkA39CwV9lGUaRNSM1OtWIIEpFViijMFonw1BKJ6MwFsowlJFVM4SW
VSOYqlC1A5kKVctPgDLy5WUZLuNkGfnShssoqJpLybIyWibqZLhU0Kn2EqHO
UlEn+GutxTxUXe/yqucjQJW9pc4CTid4gaxTrQW8TlUiNQ2237mvAEq0hEGD
4lksWnTxrt/tmH8ORrvUguMBS4kUmk9GmXssA0gRbQNO4DnAADlJS9CkPQMu
RwtbbVU02AJqxwqGniX13JhGC1CKTl13vo43+4kfmkozRF/cKJ/ndb+LX1fG
87UBk7I31p3/x8Yfs2MeSH9Ekzz/JGST5vNGHqC+B2/hfiE+PvZ2bs6pI7/G
r1kf5L8oLCh4xYqEr92WGM/SGHqzLxqqN5Y2JuYlQEHjUavUesEN4wVUC+9n
Jp4POrg9aOf2uIP3c1Pfou7BtJVvQWuPuw1+uVtvVr7xfLGBFGTTPWDZk9IX
NCunsi9dWR9Vdk623Mv+xl6r0VxgBAcrd9B4jmjkTtb1BtUWsIbJz+Et0CLW
T1Jfpxg0S42zRjF/J2iNoEDxgEQbcmY0+j+NTL6UsA2/DY/RGpes/LYpJW2T
QYMwsVowXWWJpq4723guipDXgYObm6AvJ6H+3NcTfKjXki6AX+52OBLWnoc+
Xw1ngU+Ou3x81/KjOxaG1/Xmxrc+0LvN/j4mGUPb7+nbccdAi21DLdKHmK5x
g6egG0LhNRF8TCi4oU/6/irfvQ56oaTLKze4LZYfmcvs/4rDiO51fkn8vOJ/
Fz3St//rjm8NfwFGi5R1PBnjWWg6xtidqefGfeTHVFsu1MrIv0uQgBPlKlss
mqLG/JdAtflEgWcFOQmrdLUGIy9bZotKACEPPmoGzL6n+nz3ww6pz4wTNIaB
rNE8VRM3urkXMHJ7Z16rQqOljZy8YLTqVGS0tBYF3SiWeq2LsbGxt25eO3H0
zIp1G4MDloYHh0Cv9b37sgYzlbUWsLUqz2tpHZcXmpqUvZZ8S30vrom3utWC
Z23nPzRxe9DB43fzJcU2QUp7P2VH79+bzrlbf/aj+vOI+tLUbd0yD1XeQ3ro
VYV2q1zYSue13sBWVaj6HnAEQ6NQfTcGvmeqeYk1I+D1sgJ7Lcw/ihQx5bVL
2TjAkSLLKAGQYqm0EqhWPVF13Um0Xas22aA0ClHU8WM+9SOrLabrzeeg16o3
D12dNXAX9L7P9eSp6pM+z6DPG7xkxr8yvVaZJAd50Kjv+XqCV4JlN7RBcv35
oq9yPVjWbv3d3y+vPb7Bo/LgSr+JBOM5Qj0v4dMIpioc5XY8v0vQctRCSotn
cYbEfwpRgK6qNJQJ3wQUABq0clhefot+UNCHK6+r2LEXyfYpz+pt0hjG02iB
Ifxcz+CauomNvUD1udy78lp/+vTpy/cuazA8KzBasteqswAYekHrwpvNuxIZ
FZNz/crJ42cS1yeFBPiHhgQtX75yhqef8Yzn0GsZLpDcUWWojvRQ8AGhaqIN
5Lhqe4nNvEpaLChsveD31vMftp3/m+nCAlt/ZecQlbn3s5ZuD+vNelh3XhH8
FNeRphrrvmDe6v6VKnRc+ka2Bu5vNW/4p38jL7bhHCBdkHKN3MH/lqlrJlJ1
FqIZT+y1MP8cPCBJqS66QIoMqeakb0ABfhcqr6iZry8Kluls+1TVx2tKPlrM
NF0gGi1ARqvGYs54Pt9oDqjjhj47DT0qyGF4s8/Ii6t7ZOn1YHqezlgKE6GN
2eDjt/Fa87VZpvV1QfIXclwrWHHzws5a07UAqZYHMJzPQcHxTd/1oN681tf1
PJX07/K6qrWAQCun5qGBrp4bB68rawXwNeOoar507fT8u2oGSK0HUIFKufkI
5j9DCaBp+YuNkTpIoAlEQe6tIzKAoVER7zW/83YZz23WqeptJBpGA0Nv1nA2
qO+O1uwbSQv24afp3XqtCucKK7RVL7osOawEf8Lv+poLUHTLdF52cFjslatZ
Z06dW7txQ2hASEiwf3z8CreFAQ1+ug+9Vk1vrTt6e0FnBf0VfEBZht58bfgh
XcC28XwC1drjUWuP3zoszLf2L7ENVFr5FrSce6/R7Id15ubX8mRq+QCjBdqT
0pm31zVdutnGFxP1Kxy73vZfyp1tCP+NZvON4TvHU6gao6oWq4bX9fWw18L8
g2ikavBwlGNZtKxaFKUlYYKQms/1OVBksp40TgMfRSkbu5c08wZV54l15tM1
F3K1FgvQX0leS6w9XzT2YP/u7/TXffz6KBcCzdxBr/XJCdc39lryZanOMqHh
Uc5teGFN0MslZ6XCuxt5CVXdmU/ciE/diRpe9CuOS+UGqFePg707r6WCXqsB
PAYPpsFM3nARXy2WrBNBG3kx9VIK89RohatcMAS947DX+i/BywX6KFTZlgMs
AUgCUFJpYpZgybtq7pvsYtP04vZpfO1EovESqpYbUX8u13QeaIQuUkB1D6GO
h2A8T/i7vdarfL5eHrmqeOZOJ3hfH7GGN9puP++GX1Bs1qULv/56fkPS+tCA
8KBg39iYFV7Lgut/n11rAV/dWzDyBhXKUPJOryFvXvZa8KkNfUBtH7aBN2Xs
rW7r+aCNx0NotEwWPrcIUNmEEObLitp4PGow636Defn1PBno0+BdjHykFYte
Yrlw2atPX75KvOvF1/+NrzeN54h1fZgGc0GDOaCaP2GUQFRfTDSYh70W5h8G
XkWWSI14pBo2ouKJmvfI4Uy2qeFFpdEG4tNQzniWYDyXajqPqj0HzX2jRRyL
eOP5fMO5yMzAizKUjfMW49XL58heLn15U/WkBdFo7C3jtWrmWL2B19L5q/JD
5WvF7aWfNaHR8uI+mU9+NE9VxUNT3YfWtyboVYapV4mDvSsPVtedRvPLXgB+
SxrPAtVC6Y9XltRfxNWdLzRMVt4lUJlUFMqQG9thr/XfQiitjAy9FskANepP
QQJaZNOKSnqeUlmvA43SSMOowjqeTO15gqE3a+wNmnmCJvNEY7nkgpto/PfP
If6ly3oxflWhrarAZUlTeEbzkdeq5oMm8tq63VrkF3PuwvkLFy4kpawPC4gJ
CF4UE718aUBY/e/OQ0tQzUeEvqhSVNObr+mNPF5NH2icuPo+msY+imY+ha0W
PGjl9bitd76pr8IqRG0eWNLa56nx7AdGc36v60nUXYiqp1ZfAAwXgVo+8ilo
zVutctIzBuobyl6S01WB0Xp9r9VwDjDy1DSG3tKNrx6jqR1BoEi7O/ZamH8U
9B4jUY86Br3ZuP3PqRHniszSCtskFlZPKGjqDRr9Aqp7UvUWC/W9QdOf0Nwc
9Fo1F0prot3E+lLMx9hdbx2515U+D/CqVq3MRxJ6LfhBhpczstf6323zN/Ba
2uU2pckSRp7aOHxtPdI3zsARqboXW2UB85EnZeChNpiv+shDXc2b+ss7/uXF
ozZupi8U9jd7Xb3fU9qyQmi9Q50FoGqMpmqUuv5coYEnME4tuY3CqYCR2yzi
fK3/GChfQQproSZftAq+B3gRFDAg8GJx5+0FrbZqPt2kNF7AwbGlJqrTDt0U
qDmPrz5LXXcOvOIDTeXi4X//OsSXx7Jkr/VK8asXXJYsIzi2LBJQzQQv0Mbt
7oKlsad+PZuVdT5104bwwPjAkMXQawWGRDb89nQ9H1B9MRx1QYWC5uf15COg
O0Kj9X/2zgMwjupa/9t7k+SOC8ZgminGBJLQQkIzhpg0qoE8Ql7y/ikvD3CR
rN67ZEu23Htvkns3NtimJCHUhJDyUqi2ZWnr9Ln/c+6dnZ1dSQY7Tl5INPlQ
VtJqZe3unPndc757TiEJFUqDCqLD80+MLnj/gvy/jio8cWlZ5Oqa2JXVXaOK
Phg07f3sZz/25scwFcY61eervkIJHqFnPu1TWavXINaz0nrm7P25+SgG/I+S
U0gsNXFPayKrMD7kWWwE0c9a/cc/9BBIJ20LHxHl6j92XrdXGLlSHbq8M3tO
15CfSKGf8MGZXOA54v4fdDsDVsGiEljLUyyHZkj4Fcpag6f26Y3/u7NWX7U2
ykV/O2vBg/iZucJgePB/Nu+ENy8lZx5nzY2bcmOmvJgpF1kLiMuWlzjb/Nhn
TMv/n7MWrNlzZqiDnkWDhL0+7mlKZBep2c/CW0jJWdv124SsoAtaYhPM+7tr
/XsdOEqVZjWBseIc3N6dIA8ce23UBmXw+khocXxQoRDI40MFsodecIf+FKuH
2XSeDm4tmU4CU1X/39+vdc6s9VlAi7FWqFh1FSFrXfjs73KLW144/tIvfvny
uvXLG2rmVdYXAmvVNc0e9IMXgBNcpb2D1jmwlr8YP3qKkLWyC8UhBV2j8t+/
OP9Pgws/GlVy+soacXw9d2nFJ4Om/T747F+yZoR9pYonn7jykLX8RbK3gPMW
iPCzyF3nxFp9xbHPYug6hxgVzJNH/hgzBrZlcUddbMhz0rBpSqC/hth//GMP
TOTLiTe6Op965eNRm7uGrBcHLRR9BdGcn8D5qHqLxNBz6vBnyPBncZKCp1DI
gigHp2qpmpUr45gJ+ubHXWZ9vdX76OPXp/p6nD5qZH1t9umVtXxvnTVrQQBn
rJXmkSjs3TjRw0eRkjU3ZgbEyouY8mOmfIQuc27MPiN+Bv9q7+ojdp0v1jpf
tUV3vgJXveE/Ip5iybSw018jDP8ZPj7Evax1ne/GBRwfiXsQkbX4/+uzoP/4
exwibrHBgRNyIsEmbdIBm1qnB14VRcJ3EaX1w9h1209duEq4aBkZNEvyFSX8
M2TmbwRQD+aJGW9mIwshWeXK7iIJBDfg0zNci3tt1JDVd68Go87AVL2mptmK
LBUHMqp4TDS5FCyGk0UaNOOvM4rnvHBw3ytvvrF+3Zb6hqrayqrZrbNqZ82/
7D+3mkqBytJ4yWNUsarLW0J0uYtVt+Fb7qScZcSB2S1uUFFkeEnniOKPLyj8
cEjBByNKT11aG7mqIXZp+anBM/4aePYDf14UaNAHOJcUhD79r6DMpnoLFV+B
JliGBwpVQ7GSpFv6z1Rz7AldgT5qixmf4sYl1vl/KtqG8ZI0jQwEFJ8uh6bz
cJ3CtqvTia+ly9MWDk4jg6cT9zQOPsL1K5inZq+MUdaSGGspZ29oEHDdgD+c
ICRGoxqIbe0X6HA6oujjfmFdmeDZr1AJG1JGB8hKMk4fxu71dLcIz8EihE3T
6B+p8c97KGzKL2HjdeTkYF9JpBOZ0SAhEQ5nHaoivPoRQha8l7h118fD2+PD
VilD6vicXCHwbGbISvVrwnyF7MBBrlLODGStIYBhM84ur9XXBT3jmm6sCeqn
1ZltqHroA9byzFR8+XLWc8T24hTH78eZ37vc807frHXg9tH7bh2z865Ld3zt
8o6JV26edMWGiVcsfRYigxYwe7E9qEyeAlVfYDIqC9D8PEQhR75onZmw5MVN
TLmxDHlmYkIe7h/Eka8q+1l8/Az0Sl8X97JCNNQx+3J/9fR69Vwtnu36EYvI
tC+0/rJqo0mepTsucyVPVdS/IObNTQz7b8Kum4F1p4G1tKBG+2v1ryj/JY8Y
/JdQCCfCJSbO5uzgAVeWj3kIQiL5VUx+8OUTV2/oHr88mrU0HKzhvUUJ14wE
bjPETghsp15aouNvYa2+0lY93/mf0e6eOgfTWUvPfqdwyxg39JRUAdJLoAgX
JgNyP5haPPf5/XtefevNDRvb65uqa6pqgbXqZ7Vd+YMOUxmylicdsdzFmlxF
CshtoKm+5CwBEWcp4llWcWJIcfiC4hMAWqjij8dUd19WF720umtE4UcDp38Y
nNHpyxeAptivM5KelxFXqihpALDCzDjZ08OvUxab/d0Xa/WV5socRZR8QQdO
VQbQAdNBrReQkjVNxtcO3hVliUHzo55aLgveV8+q2bkiXBfOF2vhT3L4fiba
o0iKIuHGH1xTSCqJwfcSNJGL3eMU9p8isZkZjMTwi3B3XiVJMANEU3FyS3IQ
aP/xz3egAYYRlirLsoq1GuZCJTE1rgJWI0lLAo2Ebwr8j1754Nbt/zt41Se+
xbyngfPnR0JThQEzeglZ55G1PmMkTOu33AO0zpy6hxB9XlhLDxQMn/zJlZ0x
pBiT+XpohU9dhbK9gAfWAsoyF3AgU34iQ7CkZetBFoVY0qzXSAUK9gFgDPCM
6+tPLTV+1r0/n/pKUdAKTZNTrDVNw63QNOIpiQdb+EAllwOh9RlpAH0F+1nr
3+WIs9dXiMl4yaHrd04R43H8Xnjdh/Ebd5Oxa6XLNsXcC6L2EsU1U3TlSr5c
OWsmGTCT5rVmaG/m885avfp/Ul/pzQCZ2iOTpzIZmcGfr+Wi9dVZ7ws0Q6xA
gKGs5SyEh/34v4vm7d+357W33960eWtDc011NbJWQ/Ocq364xVJO01+Z1KS6
SrG2mAFUnhKiqVQBuVB4N2eZJneJFCgVBpYlhpZ2XVCASa1RpScuqgpf0RC/
tDYCt3NyPwjOOBko4rwlxF6YgroM2MsAMD02Gj/VomWPnH/QoECywZdRWblq
X6CVY/xUf+1ou8WB9FvBqUrOVHwz4GbDGWjhyG7pGjw3Cv+YILyyz4pDgYen
nTfWokhFc1mqwBFBUDleiNE1haKwLC66UxMEZy3ib8EvwBmhiDxOSRDhA1y0
u+EeEp4o8A9QkwAmYcq/P+v/z3qIOABDppu7RIxwiowITXiK0JjFpPMwVJVs
CXMPvnhi1PaunFVR3xzFV437UwLTBLRATMsMazpu/b1ZK8MG2Vdp7MygBRyi
sVaBcl5YywhaTAFjMEkPOGzd5yyQ7PmiLZ8zz0yAelIWE9zNW6igmPmht4Wh
MVixTFpPm4Rerfgs7ogzLBj76u3c9+tFZ58ZWEuLe9OI7znJPSsWmivkPId+
G+eM7qFT+1nr3+mQTwvUA8/6JPOshiiFTyTIE29Kw7aFr9jwyeg1cXudanmO
zy6TAvlaVjYL5+sR/wyZVfCNb1pjXDpn1jIyFbtefyplpYUaQ2Ymo/dCBmKx
+JDhqkqxSgnxFmMlzg4fCzp/WLBg9+7db7zz9paO9vpZtZVVdc2zm5qaW8f/
cKO5UvGVqhnIhKXAcpQrXe4KTZ4K1V2pwg1XZZoCZfHs8tiQ8vDQ0s5hRR8N
L/kEQOvS+sRljdGRFady8j/y5X3iLQx7SmX4FVb6G9mvZmIgR7kO//26/MWp
P7Ang51hCWl8PtOIqw9HRBp3Gdl7Ktr54G0QmioMmkaG0OnhWD0sjw9YGglW
h4HEPM/JA55Thz2L2y7OF2spdCM1XGEj2LeEPgomsGjqSkgQVcAmgoKkvvMr
eXml8NzdHz59beRHN5OfTCIzv082zFc/+i3+SAKhisNrNXAazwuqTGtTohg5
n6dk/3EeD8RildYKkasZH6v4CioCLSLC1zmZL3qn+5r1py7fenLAEhKqV3Eh
OZV2bocb+ekzvHrU9c4La326d+gzUNYZrKewXHLnU9aaRqx/Sw3REDONWIWN
LwpVX1FKKV9EkeKgoGXJ50B9ZbRMM+MguJuzEC4WSdwqSKboewtWZ8jPZzjE
PqMftSd0nXmaxmd6ZdnMoKnEVRLzLYr7arhhz5DsZ5RgAQ8BsJ+1/n0OAVbq
Mr34qDT8qIkwIXs/IfceF69b/uFF6zu9axKmkmhwqgIxxzWDD9ByEg7pyxVA
/jyQhNdfw9s1A5DOgbV6YlVfM3SM1/0++SrtfFTYukkPCMw3ZXRSeQxylxFv
KfGVKla4URx5auaCHTt2/frddzo6tjTMrquorGua1Tirqfn6/7fOWiO7ylVn
RUr2StVRRTLkrE6Tu1px0y86qPArVfjFnOrIwMruweWdQ8pODis/cWHV6TH1
8bFN4sjarpzij9zAWiVRb6XiKFesFcReSYy/F/4ZKZXin8AEf4i3VGMw/Q/U
/3Ymvf6owWcfQSzFXem7rTOsuRnFRNw/RbNYoVwB58fNIJoja7o4sDWcs0j0
FYrwleAMLudZMvRn8Huj54u1iIymqjAROfbTEm2gpMBXaAvByMdS+9LYf32T
n3wt/8h1nU/dSB75Ejf5yui3r+CeuK77m1eemDw+XvYkeWUxiUSA23BWFSsw
yoSTxHh/cPynPRCwgKRF+v8Kne+qYH4L/hPhHZV4vTN+xyunLtl0auyGeHaL
5C8SgtM44KULptGezDRPnpPxTv4bWKsvZ3VfiBX6tEJhhk1Cz9unqYCECgi1
USFr2Y4+Dqxl/e25sFZGzl9zSlAvFgBST9+pvUi0FQrWAl4DqkLOXMRZinn4
qMtUmNBlKeTtRbKbEhqN0trj95qlN0Yqb2/pLxa4em1gmLl4/LTaYl+Nbvry
0htBCzWN+NoSvjnx4HR50FTatBkef4bUz1r/RocE4YeT2esrqe/zQvOfuBv2
RIZuioxc85chzWEfXFhLSKCcOOBcLtLeut6ZEo5azscIE5gpA25lvEuNy8Cz
Yq2+cuYZ1Su9LKifL74elcGMbHamR52RBsUPiiKqLiOrOCqJp4p4yyRLJXFX
cE/MXLh16/bf//btnVu3NLfUV1Q0NDU1tDY33PCTNdYG2V6tIjXVpMlWQ+y1
+DFD8EWQo0ax1SrwqZXeBz51Vwueam5gbXhgTffAylODq06OqO26qCkxehY3
qpEbUHHSW/yJs+S0p0Z21xNLlWoG4qpL/roqVZerkimVK2OZNONfh3+sVsFU
WDUzrdCZXJaC0ooCPRaSaS76XAW3S/TVIwKXcghXOBSMprmArEKlsRHLo9mz
SaiQZE/lBhcIWf9DBsE1Ky9y3lgLy4KKRBMZJE6kOGaoYvAJR6TdW8LPTI59
+8LEQxfyT04QH/8y9+0vSI/dzk25VZ7yZfLojcpj159+fPzpR6+XvnXDycof
kjePws910wckaoyIsf5+OP+0B8VqVWGOLQZa7CbWjqV1fyaXHYwPXfHxoM2J
nAXEN10IlKgQ2UIFalYxvr3defh+xmGdPbbc/i2s1dP6/qnprEzE6mGQCKb7
LTPWmIEC4urBWmfq+dAHa7Fo4OlhMe3pnWCyJrFKo6lizlTCm0sFvNGbzEW8
rVRylshu4+K3qBeDBAtHgGFMmfu+P82P2te+7DNbUj97T1QNtKbJ6JOfoQZK
hQHLJV8ZN+BZ4p/Kwx2GPUcCsOTsZ61/o0NkzhO4CO3rik45zo/dmLhkU/ew
pScCdYK/QPFOVz0zib9I8hREXKXYT4Cmi5NZXFaVy5P0d+n5Yq2MLJbxau5L
T1vpUcWY1jZu+jPmqXS0YEyl1/I0DjGQCUtDAf94alRPJW+pJUBBj85c1N7e
/uf33t6zvWN2SwNjrbmzGm762RrbLMlaTxzpsidlrVeZbA3EKHuDkrpdT1z1
grcu4a+NAWsNqD09sOb0kPquUbNio1r44c1x+KKn7KS7sttVyzvwZ+FhCaCa
q05h5AZy1qYwLxP8KIOxfFpGyTL1DOiFTkNF0m3YO5lMf2kyvhOM0ayv2JWN
S3UFWAvfHlNJ4Dk5uyQ+qo0fuiySVUFy4HFm8EPykMFwoO1U8XyxlgpghL4c
jGRsByJRo+SjX5O6p+L/eY84+SbyyG2Jp778wZPjTj02Tn58QvypcfFHxnY/
eNEnU8ae+N646FMTuCeuj0+ZQB696v2n7+7etBQQC67cYb5bFTnS3xDnn/WQ
ZJW+V2hSi2bvBYIdtP7C8d//FRm6kb9yVXTYRhlObetzsSC8/YqIPU+y5vHO
AskzU8EdfAWpuX49cet8sVaffc77qhLO7DON39MjwTobA2sBJv2NrKUbUDP9
pVQsdKBxolS1lSogICtdiFhlSelfz8Qt3lImOcsU3QiRkYf3GDZxs33c6Wl5
XT0cqgVn8nd9RjfXp7LWQDp6MsVa0xU2X9u/IDJgFkIXfB1YC75C3fLI8P61
nUbWkpJRrv/4VzvwqpPoJNzCvyRu33Fy7Kb4xRvlUEunnZ6hIZrICpap7nLi
mEkG5UU8hYK3UPIW4CAYTx4OZWY7Poxv0bQ8xjmxVs+KofHs6Om2YvHEX5yS
JxOx9OCgpBI7DDOqUDpf6dU9VtSz1hJXreyp5iwNgDHywzMXtm/e8tf33tq/
vaOltbGysrm5ubFtduMtz6yxtciWRuJsQDnSZW8k1iZVl62Z6HLOIvZZxDYb
P8Jtb5MUaIqHGmPZNZ0D67oGN4SHNUdGtvKj5giDGyPBylPOilO+es7TDA9I
TPSRnQ2ys4az16lGOWs1MQBjmbQUg9X2KGVWpT0PqPI07vKWkl7LjuzZNjpj
jbuE9I2fwWQ/52xcqqOpPmcGCU2FsCMPruPHbSBZ88NZ+Srev1DN+W8yBC4N
ueHB/3M+vfE0lImqCoxFOECuP/zqdOm08BO3dD1+ffcTV0WeuDrx6Hjx0S/K
D93Ifevq+Deujj90HffojdLDN8rfmSA9dB3/2HX8lAnilGvI49d0PfnlyNwS
0nUyhpNDiar270P8Jz1Yww4ELVFkoPW+rB7/5OT1+8j4TR+MWfuBbyHnLxBz
pvED8jFbAigSyMX3M7wPQ9NkrHrPJO48uder7fnMa52tHevTQCvDUgU3nNhz
Ff+FfxNrlaVFBmeFJuNaFT61l6mWUsVcIptLOUuZCDKXa2Ksxb7YU6YS+Jbk
KKeZdr3uUKwabahG4spIwmd4IXr6u/TGFJkJrs9snj8zawFBDTQ4tQCuAKsG
wYvS3pU9U7pgOvFN59gjBHKVrGdwRdnPWp/XQyWpzkCssQz7BDfkYEsH9n1B
W+zhnqq/EvLsGycvXPWX0dvJqHWCt+QkhJe+NrJ5+7BP9/nOnEYG0SldQFnm
SjknTxz0nIwT3vVoY8Aq1j6CSc+Ks8WI3h7KaLzM2NZHz0clWQpk66wUUxnr
axpN6eCRTAphUa8ulYzCRBOFJVsdJqkAcrKrT4ys/2B828nR8xIj5iQGNIZD
tZ05TdFgc8LRLJlbiG2WArIaZJutWlpUayvpVY5W0d4qW+cSSysBWnM1J7Ka
w0OauwbWRwY2RYbOjY5cyA2dH8tq7vLVnvbVdsOjgbRH7inKb/YmVVMj0cXy
ZinpYJbMhmnPQ7WaXojU6Uvz8LOn1wuioY/dSJFYsd59Qk98qcb3SVYhzsoM
wvp6JsnKl53T45evE8Zsinkrib8Mi9ShvJQlJsvQX+vtBK+z1rnU7EQSV7oV
9LRL2BzrL/9L8h/sevS68JNXx793feTh67ofG88/dW34iQlkUQ15+3fYRUsR
xURn+OVd0dqf8E/fGn/4Gu6xCdJjN5589KbEo1fwD19GGivgHIrS7btAXJjd
QkcQTzjsJtGtteLqP/4RRxyvUTwWhgXW/SzCOnTQphwKvCxRGv3+GhdK3w2P
2Rq+bDt/wdKYryYOC8Ckq6cXR6JWqoPLYvqlNoVJsJacrnoLRHcJhrUsavEa
2KNZTU+nVs70zPxVr4il92nPaFOjM4OxcIbVNNpbxthehmWi4J8Hp2pWgWAr
IKZXvm360zjX76+x/nq89+0vel//ov+XXwq9etPAl24Z+uJtFxz+ygWHbrto
39fG7PnKJTvuuWzb165sv+/KTQ9cuWHyuGUz7ZWaDdWeLhZLIXpYqhSQqUo2
VVNViWenCglkq1JoIKKLX+pBxd9If3WGMdW4CyljfxCurEsy65t6zTGz7Jif
pgxT/Wfct4jgnacEELEIOk6nSwNyJVcBGbT8wxFNZFCFFMrls6bJA2n6CyPb
szJjrd/E+P4a4ufvMLAWih64BQebOHTTBoxE4eMQhWhXB3ETJz+w5c+Xrey+
bK/snX/SVCAFi4knnz8Da/WKW31WujEW0ZiTC+cdstbAqUp2blqoMYYX3N5Y
oClQkGxkh8u05LW7mPTqYE95rnqUBd3GbFVNiiuclKxSykhGUVxxNCPAWGn2
yd0seWu6cqo/Gt18YvQCbngbN6A5ktXQlT0rEpjNOWfJyFqUhewtBGRkKtuc
PjRXsc5VQbY5qmuuHGjhs2ZFBsw6jR/nRIcuSAxbyA1oi/hnh91NEVdzTH9A
9ivYrzPKDqL/WpYo0xNoDiodw7S/US93Jp8EPSHGSpC6ku6vTOLylCdvG1ed
yZqjlmakRedA8gX1Fyb8APPTxYGlZHB9YvzORE6bwFgr8HdjLZXmNHiSkICG
Tn9MWvP+8u1rhacmkG+MUx+5Kf6dm8jT9wvL60j8YyImRHKaxBG2sOcWj+ae
xBuv8HXPxadcF378KuWJG2JP3hj5/o2np9zILa+VgN/QXt8pvvNC4q3D2BFY
xS4RmFHpn7bxDzs4jnZyIKqssPyVSP3vhHbywFgnxX7Rffq2l0+NXN41oaM7
e063tzbqKua9BTSLhVNHYQmQaUHsud9WZy0NnLCBkgKs5SrGgWXwFd8MXF32
ldTS39i9UlZGFkvvH9UzYdWrR536mrS1Z8oAQGOjo4x4KkmoNO4oJqajT5l+
O8Hz7lWuN6/2v3ml//VxwV9elfXqNQNenjD46PWDX7hh6JEbhh/4yvD9t4za
9bXRO2+5ZOsdY9vvHrv5rktX/rfRk2DMmWMKvU611SqWGhlkrtVkqpHOTlWi
uVqxVqs2oxGiSts3pN02pN/1xJqzInOvN273Zivu9N3ZtCiZ2RinL6OXseNN
xvuhZ74LSfsZMrhY8T4jDYY3yXMCZrTK+RFruwdWK9nFQlaemE19qnruq5+1
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
KPNHWDbe8LC6F4IWFIhxc1C6JTXFYMb8vP736hGM0ZehD6FqhC5bj66DTqPL
i1mCk+NusR9gPW0PWyu76iVHjYR201q8fsHre9P6j+99izPNE5wLpayFxFRP
XE2ir0pjLWPSvp+1Ph+HQCdQEKCtBAfXDfiKIhIx/OuI8l/HI5du4EduiYdW
f+Qu6w4+R/tf0fYL+v4XClo0KCVhKSORxUYhONIb4vUckcD6whnrjMZ27hBk
4A44+aISWQuw3zZLCVQonmQ6KxV2gLLgjVqbAi1jOsuVCjiGZYiBshho6QzA
EIvhgXERpy/c9NhiRCwWUlgKC41PNFZYEFdUNFm1Y03Qulmyb+Rcm2L+rYJ/
p+zZJjjbE+6tvGu7ZNkhI01pZIUy7yXmfYqJaT8x7cNPLXsl2z6UY58Acu4X
HQck50HZeVC175ct+0TrPtm2H+6vovBn8QdNe1UquCGbko+PPIYMpqJ2MMwj
DLo0tWsy5ruYl8y6jjCnvfaHr07tbaTlRS122ZNRS4vYi1LEpRcWGXSl4Rao
kXjhNWoSLE0S5rgaiacpMWKR9P1fkayNH3k24d4B00rigpi/MOZuUYHE8HXX
W8fnnStriSKeCzKQEU1aAXL96a8fTrmSe+qLnQ9fG3v6Ou4715Bfv4MlQZk/
Q08GiW1CVKU44XEGj6ywtqYKiWNbiHfeEh4aG71/RPzeQfK9F8uTBkbuHspN
viI+aQg3+aLEN4YqHetOYuTsD5rn+wCElSU6AIB0i3L5W5HB2yJXr+CGdnDu
+pgnj/gLiK2It5VHfBWiP09Jp6xMG2pP9Zyp16s1Qt93htsbC1QIbo4q2Vmt
wI1QsYqu6dLUrmoW6FgWS0csbzpfJcNdJmXp2XsNA/RexNrSkvbKm5+Wvc9I
4Ot1QEPaStUDoJGpLGlMhZEQmEejIFxvKilRA6oWGDUp5yyzQabNuBUoA8ky
zKhayFqTKkCYDTuyMxaMOnpl1BzTnahqX/kuRwZ6JaHL24gthjyzFDTRwSIR
LlK0pDi8pfN7v45fvDluXokjbn2tvKNZCrTIGmulGyT6WetzcfD0VaEOYDpT
WhBPiWRTRL17h/CF9YmcdSdMc0/6cuXBM6SBpVzWNJxJx3osgOh4dBpJSkgG
ZemIZZx7ZdQZiKvXvbGOKhUWfYy13NUSvGn9lZK7Uu0JWmyLDYrtYmtMhR1X
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
2wvMby44gV+etQPwwn5GXudPTtvgBQNvnnIBPzjJ/P0J5999Yv/b4w76M377
mAv4m6PMtz50fesI880PnN847ABexToQ56sHHK/stwOz9tlf3YvE73XG7XFM
2O0Yu8sOjNlpG73DPup928gtTmDEZgeyCX9NwzbagJE1YmAtH1bT8Ytj9kEb
nVhsXyuae2kt4a9Ba8Xd/pb58kTFnVGK+4NVD0cpbk+0XHj1B49/d6PtVru7
g6TlIYxJhVv8/yqufg+BcQsQ4bsXX+hRZDH+7+EvzjrX7TdfJKVZWDFlSUCh
RUem0uH1kld8ms9EnmypUlSSWPmiupAiULQFohfyNaB8qKkp1WnSHGqPiynu
CfoMEQO5RaeGwSvxTxIDUnBGD0RIuNOP5LLozqNkyUUbGD2ze+TKsaemhvWZ
ZyH2dlr2GWZR+ZTHqWdYmK8pDbG289qcqtdKrp7U+g+nLZDRYIqN1MKF0dV0
mjYy/tvclq1OY12Pud5h3uzSbHVj9/F2Xr1d0DWwxm2MqcFlfJ817GD1O9iA
PYJll1u/06XeKaksXwd4yf50f/+o93m9AeEbAfVeQbUHLSaUpEMH8J1G7bUw
pXOFCNSFhtjFCzhQWx7wukHKq1NtqfaORBQ01ZJjvGRkWsV7DZY9jvGy6R/1
jfcYmYLKwjGIpgIO5Nlbpx77wW9hrVuxmbj37MFKD/Ss2MrT2njtMrehGH+t
5iwB05t/Ql4LIxVLfGIuHOx6ayj7s5dafznD9fOJtox/59wOsozrQZVFFdcL
nFfIE7kFL88ltsFJ0+Xmf/qu+PVotu1mj2hDF1Sn2Mo7YS0pctzz1OT/pQ4e
l3Q20e2i6UKWbB6KTobIVsbNU1+LHR0HXr7/A8WTYMXtUarboxR34rS3hinv
jFbcGq29G1/QWfWsTwuPedNmUyzvwGj2jjs6UdTNFwNnM/7zML75+cQ3Og6D
th8S2yvBN29PF5K63gtJX2g00+Z4TJszveMw0C8iTXKep4ZaUljzGULtl4Qr
WVjGwrLRP5lVloh+yW74PKXT0Oj4aRLfBApdSEpTe+SpZJ55Gb6+W6RLUYCP
aZwWWiIYyjCHTNJ0pJeEON4YlorGZYJhOWGFiCwXjFWiaRViqCasQUzrRLO8
pViLGDYiJsomxLhZNG0RjVtF0zbRvI0HLA2C5X2RwFt3QAQT/XbK8JZdvHW3
APjtEQMJ/nt9wDSXQAk4IFICD0oEHRSCD4lA2CEx4jASTRh8iAeGHOSHHhJG
HBJHfiCMOiyMPMSP3u8Yc8A59iAz4aALiDvopEzY7wLi9rniD7gm7XdNPsBO
2U84YKNM2++Yus8+bZ996l7btD02vN1nn74XmbnHOWO3Y+Yux4yddrncdMpe
x5Td9im7nZN3OSbvsMftsREccbvsE3fZ43fa4nfY47fbJm7nx+zgpxxgvnW4
yYglKJwS3tUtvJIUSKjfx11a+ATREq2FczTyyDZNquDnGUBGy6oD5oDWartq
53y0FvsCtdbIe19T3I5T3B2tuzVacXOk4u44FZzcHWW4MeGPHWm3hDuk5BQW
j3SgGRmP4cL/idR1C1NenOMzTJ//fzgE1o1bGM6qWy5FviOAJAH85vFfXGvJ
cw+/uNaCv5Vi1LNoLRzVmowRyc+jtQyZDJwPpLVwA/G/X2tRp+U/QWs5QGtZ
QVBtslk2odbSbnFjvff7gna7W7+dA61lbHAatjPGnaxpN2/dw5l2cdqdLtVu
VrmXo8WlckWozzQf+R6B0EuDgehS75fkFrJHpHILp137mC3jy6ByizgTfobW
ojn2L6i10MzH466s87grD6S1tMVuHIlY5Ib73zzdHNBba+HOKdFaWEfxQrUW
sXNwowA4XNv55jDXT6e3/XIG8/YkblkqLyWyHA5MTlGt9eKuR1a0i2wPiVZw
xok9/PkG18++KVZVi2IX2nC58OlcIsc7ncKXKHSRojTyvjFOkXGTVnEncXOw
E+n12HXp7Sd/VNyeoLg1RnFz2gvUWg9YJnS9zTTPDVorYgFvnC+Gzhf6aC3M
2A+gtaibFhVa+pwBtRbKrVyv1tJleeeUEcMHSW59Ea0VmPTitZav7xbOYpCN
IPBEsn4iHs4cmkEtc9Nb9AfGC9atWenWEkcIzWqemt5o1gjadbyGoKrhtevd
gI64GVN3Uy2x4EOwzNvjzreVxwJRUiYq0YBl6mpPLb2eNAwiO93ILp6iJqtL
zS62LztcHhhYgQKGHU6AJOfd1CcQS/QpDW5aI0HtKeg2IlaabfUpjPct1qrz
jEeUh/V4qiMUKwkrEGUVthioCPJoV3kYorYUTbNR5YLcXUxMaQoFwFTAA+b8
FmNZW/S69q/seaBZJiqq3co60bCVG0hrYTEqKZ75K9Fa2sZ4xfWYkTe/Ud22
BRdQLtHtJp0tbgeHE2ClOky43mGZ+P99eyIrkN9Lw2PRWtppnYtay3++8Lla
S586oNYCKUW1lqYItRbcyvRJbcnDep5Va+GwsExJa/knS4X0stz6DK0lh6N+
tZY8J1EebEG1lq6iz5xE75BW36kWamz4FajWor40Ko8vzUBay1zn9N/GWre5
qNaybmF1W3HPjgotw3a03jJtdxh3OM273db9onk3a9zt0u5mVWhQ4/ZYykua
Sp7mQ0Gr+cM4mkf+o/Kgdy4PcYxHreUz8EJQeksdSF0rkVvSXCEqt2h3zCZJ
btFRs8+qtagLDTqYgdxaMqDWokOUDIWimcyzePNUR2iVCBFesYlU3u5FraXe
iy3boLX0q0T4aDCW4EeMrLUC5/DPp7Xwr9wCx4mOtXm2fxzJ/Gw6msb/Yqq4
ex3tQATN4CLxzC0VXb2Yg8RJWACSynkHBiiQW8zuLVxqnsg9eQzyywFPybuo
meCXx5+ZvudkUBG8YTZW7GHJ67exrFNsSbItUdx7SXErynR/sOLOKOX1qS9M
awnuFp6fvsuuX+Cwvgv/DDgTfDwtEPvEN1lrQXDzFqP6aq2nhBaNcoCOIAc0
Krd0PnJLTm3JdvFSZCMRFbAmixRTEmkxS3Qpir1aC+55WmvJc2AH0loQ3Hzm
wAqy3OrjcSqVRlRIBRI4mZTMl/Hxk/cO7kGk2TSCag2vXit4x5ORHj1PmQRP
F2KwKFPQedO0LIr2+/SaNC1iGRVNpO8Qe7HLA1ZhCXJ1RB+eHuIjVUfs8VRw
yY+zw1MY/76nJJXWa232QF9tHUE2eaiVDPMlw4ca4tW8Fmu3FMSuGecWrfbY
PqwmjZy0o5M6Ni/zqe8l8Q2tGzzxDQVYLtamRq92/93Rbl0V1thjcKtnlKSq
VrODNv4IVGvB14PWMmfjxxzVWiF/aa2luB+uuA8ncM+E7zb9nw96jghkurJT
WgZCtHL2kAUiBqvu5+gi+h90oE8z/l6Od4mxVY+N893wi/sieS1Miaf3ikVa
2omcj1JKymgtFmWo1vIkuzzRyROXfLWWMd0T6Hy0FsQcqrVw0xAiUgpvymD1
2a7P1lp0vIXsBChHpD7hSJ5M3UdryaMS+2gt76jW5WLvQIRaiya1fLWWZsOA
Wsu60Rm4jfNrYM31dmu907LZBYsaXYOgf9+lb8CMFggtyw7Gspu17OGsewXd
bka7h1Hv41T7OOUBtydthZpK+YH4NHQ6j3TuK7r2e+VWnxk9dBgiLqy2U4v7
AbUWINeOIl9AayFPaS0qt+Q5rfIwRElrFWAVljaf/96Jntg1rK5GkLUWWkn/
92gt4hiPTYI9eb93/STe9Yvpjp+/xPx6pnjxI0wsEY9TN7lyMDn+4i5H4kIP
L45xcQ70P0CbZmIP8eQWCBMXqcFwuBmc6YM7cF+ihSJDMoGuHjQlw4ydDW7s
zmWuupH3fqy4OUx3fwjcKq9NCLk9TX19xIvSWm43axfFX37KaBd1Bc3B4hbL
bFFKas0XJaFFtJYc3/o0/tD4pn1KaElrxkLit1DglVt0HIY871U2eaDZrV5a
axH60lOkAonkXlorgPzxWbWWZy35tNaiQ2BpXgunjmJeq0JqkZM6rJdJkMgm
Eo9TUV5IqonBqZpk7GmeR/ZRV3lsTlV0MCIKBslSnk7t8R2M2Gtqj1dQ+cw3
3PuUE9fTQot8gfKA5wv29/pK9X6RFEiI6t2IZqc0EUP3PjpF6xpY7TZOtxWB
eGvc5jZs4Q1Yj+o2bHbr6zlDHWvYyBlqWc06XkvQrQVE/WpBV81LrHRrVyC6
5Zx+GUd3YOVZ3jpaIEFELGhaDdwSX1M4V5NMl6YER8UZ8tGBNmS5+P1PezRV
nGYtvmnareSV7yGpra1osaVbJWktcx4OEcChdT5aK/Qvp7Xwj3fHKu7HaUB3
3Yy03h7/q9aFh1zn6NRXAWSXmyVjffj/tYLAA6dXcDcZcVr9I91CJsgnFvWr
tYjHAkmJpwtSUitL6kDUerWWJLQ0xQIBLV+o4qJai6a2pBk9OXT89IBaC2ez
Eq0F536LvFrLkMNSrUXbD2W5ZSV+NU9rLbMnIpl8wpEckTyFDXQmtVdr6YnW
0nm2up7WWoA0gbT6mfNa1lobaC3/baC1HJjXqncat4DKYrFGq8FpbLCb33f6
73b57XWD1jLuZDW7XOo9bB+hhfKJqCnVkb6gO82HstYSPPMQn0FrodwaOK/V
R2vBz/uitBZZgOM5uvyVwT8S4dsf28bWOSD64bu3nczj8Ggt/YYXrbWoQR9E
jNk/4H86zf7zSczPZtr+6WXx8U2Wuj0IHNamo20fx77APUQs03K7cW/S5aIq
Dsvv4U6umycTyEhBF/kReNeXKHi5e3B+Nr5jvJsM3znoPDKz8QeKe6PMV0ZZ
ro5V3huvuDdGcXskoLkx5kVpLXR9EMX0qw5NdmfIPPS0CZyD9oC9tFZSL61l
ID6BxnSxz0Kyj9CSCyRkuSVXR2jIVAs5Y9/LUytN0lo0uJl9IVrLH7TWQkax
WOijtTwLyf61lm/S/vO0lujVWr54F5J0VKKgloYkkizNKk+ZxBoJJZFb0v4a
iW+KDd4JPtiq7DOBmpYfYNnnNkzaq31dIEhLDi1gUNHUumR5ypPQJJBaCL7X
TB+502e/p4LC2/vDU9R7OM0uVtp53EEmcWxnNQ0uSeD52JbSYlRvdmsTyWtt
lDJa8pgeTS1hPYLjimQXU2JHhn6wBNqTTq0eDKQDyFhB7OI9tg/UN56axgM6
+EBczFtL+Tc/bdWt6FZX45um3UZHQ5Ke8YG1FvxjpkIrZPZfLq91a4zp8sig
K2P0t+IUcJ3eHGq4NT6y8Y3fP8l+JFyHaMYydBfA0SE6vkQlD/8dB92zgE+N
VkH8h8OPtclOTEjOH1BrUaFFp95LWiurl9aiaz3UVCi0RFWJQJHlFqAqEmhc
krUWXQDSoCRrLTqVVWIRT0WXhcgtdJ/IYI25nH9/WsvPU7UFWssiTyJ7SmsZ
8ySt1buI9AtpLZ3HDFDbW2s9a71WH60FmDY7jNsYy1bGtM1pbnD47XD57+as
RGjptjtJ4yFLx1IrPGOpVT55rb5a68O+eS1JoQ28h9hvXmug2vh+tRbOS32u
PcR+tZalAG/hM+XrR+zT3u9Rr3Vr654hr0XHWDz77GlizMdzrn+exf1kescv
JjA/nNLxz69hzBBoByDZxcMHYF/krFUW14NYRCqwosslmSE4SOBkSMEDJ/X7
uBiH8OXZRMSSeJ7sILjEdnvjvz7+v4pbQxR3QUoN0dwap7wzBWSV4u5Qxb0Y
ReMI5cP4F6e18P1b19ipWdwW+C7Wt4TM5kwLJaElay0T0Vq+C0lZa0kl8Xl9
hJbQpzpCLpCgG4tan/GINGkvay1ZbvVJbdGkva/WClwkaS2fpP0zay1SICGQ
CWU8nEglqWRWmlSM6jOWmgotWpKq9hlIDVqLyq3PyGv5ai15VKKaNFbDFeoB
+5rV2wVaTIWmfztYOhVatcsNkU2xx01sTjksRiWuNbioPOBWHRYA9QdiH/DO
QxSMBtT6RkXiG8190cFAatkuHgtTidHWTs8mpryz6fF/UNDarU3U1sapqAVc
ig0uxXoGWecCyIAel2Itp1zNqlazymqXchUOcUNnRYKCeJmqlrkA5VJGX8FK
lHGAoYSlmMrc+nLBv0T80akW/7U2zSrsUof1LERmbGXajeFXTZqsZa1F+xBJ
MSpqLRBaf0GtZb03TnVjnOLmcMX9QcrG0arb0xQ3JyjuRvnfmBB595vF3cuw
mZsXWal+oPuFvaAv4UHsGDEGgub83YUOXbrjC2otvW8s8tVachSi4koaaE4V
V/9aS/ssWsuaglrLvAjtTKnWkpy1Urxy6zO0lvkztRZ6OhWLvqs/qrVozw6V
W2TOhSBn2qnWosl2WWtRuSVrLVXNgFrLb31P0FaWai1znd1vkwNOTKC1Njst
W53+21n/nazfLta0gzVsd+m2MxiXnmo/VB0Qpan3nvmtVFnREzmjJe02kkXi
QLXxA9VrUa2Fq1SitaR6jOfVWgPVxvertfwL4N+P25opvnrA8fq+Hghu+rpn
qNd6Tq1FQhbjsrl/PNb1o+kdv4rjfjSj+9++wQsues3wVD4Qd/MXWPPpItek
wHJURfEulndjgRaaQ5DRF263m84gwx3ML09eyya2QZRheFexY7nywVTFzcHW
uxO194cqbsJyeIzi3ijDzZH6qyM0NyCMj1bcH/YCtRa8SYda2s1VPQHviIFz
xdDZLkMCprZ6bSDSvNYiUdZa3g5rH62l6a9AQtZatANI0loQDH20lldupXnw
KZDoo7WCFqDWguWkvIQcSGvRelTfOYlUawFYjCrXo2JSS8pu+S4kQWvJ1RE6
j9CS0vVkIDW9ZumcRFU1RrY+ExI1G6StQxoBqNMptTmljnzUk5MmxmkwUVN3
0528DMlruUlDNC/NLpQyWrynHlVAB3jgEO/lsCBxiFcekpac1H3Lk+zysd7a
I21WSqbx77PobN/Aaba61Vs4VT2eIOh+LxX2eyxM0U9Gu0HUb0AXU32NqFuH
aFcjdPy0nhjaGKowo6XwGAmil+ByUb1UVC1BeiW1yDBE+kGjKnIoCzljtvjW
scdhtS4IYvBi9A2kg2k/CXG9tRZ8clGt5b+QLhzE4PcE4C+W17o2WtE4XPVw
lPrWaNX1oYo74cq7I7U3XlE8AvU1RHF79Fcf/+5j5gRchA4UWz0v7AV9CQ+U
WQJDhlXy793u0WfasV5r7vNoLY1Ha0nBB7WWgL7rXrn1wrSWKZkzpLueSWvR
ydSy1iJyS6DzWwfSWnKyvY/W0g2stVQr3TQokfJRgRrffXGtZa2zm+vtoLJQ
d211Be5w++90W3aw+ganbptT18BidNotqLxWWoKaDLtX+KS5ekGTXXKpvKcq
/jM8HwbSWnQ7QJph8ZTX3xfXWgN5PkgFukRrSRW85EMhEJ1m2YBMnHP09UPd
imqXr9aC1//fpLVYge+2t3P/EGv/4fSO38aLb79k/+N3OZH69rEseryTci0c
w/rCrkcGloBOJ+2V5gR8dOJ6yjtx35J1iQ6G9k1TkfciE2r/zQcjbujeHv/o
TVgC62+NNN0eq7g5SnE9TnlrpL5xrOLucMXtYar747QQz6+N0dya8KK0Fk9a
F87bu0Lq3GHzxNCFYsQclz7BJ6nl0VrGZ9BaUt6ewPeWWz5ai+wk0gIJOhKx
j9bqm9oi9jU4dGy+U1HEg9YKTHk2rYUMoLVoWMMu3VJCmUjT9VpSR+RpsuYx
nUWgWgunz6ziNRDTgFWcutoteQZ6bAOlgdTrRer6QqOBchNWxas8Y6m99fBb
PQMTt9NiLUGaTL1LpIOhvTXwtPLqgM+0xCNeMFf/oaj6CKHntCpVRfzkqaW8
5qBLfYBV7Xep93HIHkS1yy09KemzRsnn6UaUkRybZa9m0mdNa+O9XqbUKH61
p4atmjqaYjE8rdrSL+MNS4mTRqVgqOCBPs2JJMThp4yhTNQWw29QfPOjJ1F1
bv0KUbHJod/O0RX0U1oLP7YsZPY0aC2ciEGEVtC7/F9Ka6kbh2pujVNdn6i4
NQ5WTFgnf2eU4vZQ7c2xqlvjtXcnwPVuvhH3750Jl8U7HPPMz+t2u/ucfHkP
jk6RZLFvoPJhi7m0O+yPvF+SNxaZyeB7Q5KoS+YBWlQgG5l6+xDh6s6TBqHq
iiTzBEBdzhNAdOG8G2kzsYhM8srjDbm8PoesyOhs1nS0jtemI/o0UQeKLgUx
pojaVAErtZLJHyEoJfOWNLeqkPMjbYnwV5ZF6BVPsaZ5h7qiy1amd34rjX6G
XOkF6/I9w1vhZReSEa5FWKyIkDEK8M/bSK4IpFzaeUfQO9qtW+rWL+N0ywFW
u4LTrnRBaCK4aXO0hjRHY1v0OpHOd9CAJqkTtRvhnNGv6bRs6AnY5Aza7PKv
d1o22kwbifNDvcNvi9N/KxO0gw3eyZkbHOrNPYptTu0uT/aJ1DYofVDtcwPq
/XwfNCSFJSPnsuTHoel0uXwCu4xJFFI3eFajtEyLzuOol1qhAc1GXPHRSKsl
EksyL11DGgRWcwAEZ3wrVnKaKhYrP6s4nLxGln5qsu6jiz500vCxMNWVej4R
SvH3Yizv1ubzpjxhwhbxrY+uQwTDMLidxarXvRA5WcVWF6xAddX4kWEuYy05
on8W/IOxWZJs0XPEkD+QEp3ZQsx7YtDS9qtOt1N0iO4eomcG7Ivhic4Rz5/q
+MnY7l/O4n46lfnxeEfO75+uzBJeaB/iCz/c5KDn8pQfgRx/ysM66HezbtHN
Sp6JpGcSfcF4ljo8kG5v9rHYdNR2fELPmyH3ZqmujsOijsYxipsjFNeG62+P
h4jdL5jduonVIKrGOMW90YorwyJvv/zNnp9vsO2krO/Z8UWo7WrY4Nif1rl2
zN47QXPQXMu0QFTP79TPd+kWsoA+gdMlcNokt0QqB2jS3eoMtyaTU2Vxqmw3
TjakbjYFnrzWYlHpUyABq8i+9aietkRPgYRAy+Op8zNZSHrrUS24lnRDHIMw
C3EsIJHTpbO6PDEwgfNb1NfTBpaQ2PvjI7Sero3XkT5rXQFqLYjGul7VEbyc
1Oovr+VTiYp91rxPnzWmtvoILY0no0WRtRZCtJZcqeVNbZG8lldo7SQxTS5j
wLIrt7xsJLl6Ap1+6DMhEVAd9RZI4CbjIW/q3rui3CtVRyC7eGkitsfZhsgt
XE4qyEISqffm7ZVk8qO0ltzQpx5V8FlLCr3Wkp4aCalOvrKXC4S+vFd8MxXj
tqC6mPvWIcfk7V04XRGC2/scqCztIVaz16XdKho22rWrm9RLRP2Wvcb1DcZ1
DaY1203V75tW7jBXvW9eth1QVu0cvnXj7JaDa4TdNR01m3q2wT/+tfa9X/Ay
+Vz8GqfiOuj2WOWdMfQKVd4Zp7g9ZqDrV3dvvOrmSCWsoR6OVNwZrrwybtKD
7/2afbezp9WOri8kJY9tMrB4ZFx0kCIxaO4WaQ+2yHscUTly8F9+g1TJfZpn
4FNnVzcbtsYe/q5oWigGLeCAACDB7YczenBADwAhAqNEOm/IEPRZvC6b0+a6
AVWuqPbYaqmKBDkQUaGlLOeVILRQa0nrQR0pj5e7EfWkRVoPASSDp9DlmzVV
oLMRTSlsUDIfTItFk92hSa7ANKcx3xWcxMP9QOAiITDFHZjKywSkIYHpbv8M
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
Amno5gSnaOsW3dh/LQcliF08zz9XjPorO0gvk8B1Y1QWxKm77wUtYE3zRctC
0ZqA0w9xxzAZd/EMqbivZ0yRzg3pmIbCfFQOgsVa+bzWUxUPwQe3hCokVGgt
grVb6P+wGL7MrSVrQB0x2sLtPE8RqTSQOlPUZkj7ifCkgDaN7BIuwo1FA0Qe
OM8QVYVY5wB3WkkdV6/dwzTElEEg9Vp06jQu/XJwnDHueOZ5NxDp7qF3A5Fs
gGpoEWMpoid7iDqCvlKyo8HRfiTBRS8xHD9Np/6R7BZeIKs9rMVLxrCGWC6T
ylLdWk5X3WNZ3eG/rtt/fQ+ILvPaTmtNt3+dI7CeCd7CBmxmTBsd2g129UZG
u1XQNtACdfReVsnLMU9OHufpeM69wqlBkPcE+6D29BiS5iCPn8NWnCyvQVcH
HHn/9NR7iD9061CzQfSMvCcQGalbS+pFCfTH71M4aoA3armEbimh0ou2At9b
LSkfxZ1E8oswFojmQs6SL/rliqFLuF9dtBtXuOEFKLZLXUUYqLdhPMQc2hLQ
WqJfhhiUIgam4CZ46Gwx/F0xYA4b8UfRmCAGVTdd4Ig4Eh2uz7x23ZwTr/9P
jjh+Ntb5m1cdP5na/dNJ7qVJbl+TeKHP//+KDjnl7hujaMh6IVHLKXZIZqou
ul3oRMsvPGEcTM8h5sQ3b/+T4vRwy9XxlssTFNdHqK+MN1yfaLoeb7g8Vn9p
nOHqBN3VOPg40F/uH82FsZYrk6wXJxovou7S3hivux5vuTFdd3XiM6G98Yr5
6mS/S9P8j5apMro1czs0cxyKuU7FAptEgp2qLECVzFChhUktmtfKYkFrKXJR
a9FiLVqppSzmfbUWlVt/ktZK5anWAk31uVoL67U8cktuRZTIlYtRpUpUY6FP
MWqRV27JxajU/IFuJspySzbaonamniJ5qU6eOtvQ1Javsw1VXFRuoWIhckuq
k/c4P6iJ4pLjFc6n2OGDT3UErXbwjMbgByhJ9Y7JUPrYcKmJylKR9kPVU0tL
eSKG/JLUvYSWqPFJ3fcRWt50Vm+hpfXp+qFCS7ayAej77HExFeXyOdNi9Go2
FPBTG1zfPtIDQcxYQ7TWXqwAUe5xqhvsdCiGfk2b5cTfWC6OtVwcb7oAxAHm
i/GECapLsxQXJyquj1dcHQFCyHxtguX88KBLw5/1ehmI4OszzZcmay7Haa9M
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
mBLwSbzfialwAZrPzTCcnWQ8NT7g9CS8c4Dr4lmJPv06XID4pHB5fjoVn/QU
nM8Y6Pr1++TVwJOvBZ56yf/TyYHH44NO4NJJf2qK6ZMJ/qcnBZ6aDFd04Mnp
AWemQeiAR4s+OVX58ZjwE19f1FTVhv3NYk1NTW1tbV1d3QZybPzyH/Xrt1XX
r6zduHrZxi2ba3Y01FaOq78yLrF9zKImYHTq41Fpj0ekNQ9Pbx6GtAzOaAMG
ZbXHZnXG5nTF5HVH59mAiLyeiHxbRKE9fLEjpJgJLmGCS12BZa6AcifgV4G3
AaWOIKDYHlRkC11sRwpt+F15XdG5Xfho2Z2x2a2DspDBGS1DMuiTwrPTl4GM
Smkam/JodOqj4emPhmQ1DctqHb/o8eTERxNSHk5IexSf/CA++dGYtKZxaQ8p
YzMe+TIus2msD2OyH1NG5D4emffES0EzZfDi5kGE2JIWIKYUiS1rjS3tpgwq
64kt9xK5pBuIWEpY1hO2XCJ8WWfE8q7wKltoVU9QVTcQvKIHCFraCYSt6I5a
x8SsZ0NXdwdUtVmXt4SusVNAevkSWOPoQ9B653Pg+wjBPgSutVGC1vQidDUS
Ut1DCV3VE7KyGwivQiKruuGni1jaiVR2AJFL7RFLbJGE6EpCeQ8QW9EGDCpv
g/dwUCkypKR1cHHLiCKJ4YXNgPz+Dy/sGpL5aFQuSPGOQdkt3z/8+JWd3SGr
HRHrHeEbnaF1zpA6W+h6W1R1d+yyzkFlHf+09uP6jetq6rZUbKrfsmlJfW3N
ug31q+tqNq+pXV3XULNx+7rajfVr6tat21KzZfP6zSsGui42165btX7bnsIi
4UcjW/5u5MOfT+n4x/FX/+PNDXVb6zZu2LapZn1N9dqNG9Zv2bauZkP9hnV/
zmv2Cx4QoNavX19LDjiBP0LggnWi+FTB/PNoLUE867r2x3u50UdfNx0bF356
RtjRWYOOfDP0+MtAyMcvydB7ngP43rCPXw4/PguAk4iPZ0V98mrwJy8/E9bj
k4ce/TYsqCM/nGg8ulOxqNX0brNiDqOcZ1ORpJZyASa1VIlMn7yWitZreTwf
5D1E32It0FrqSgGh/oFkD1FV5KYG8nJ5PFqhZgmyVzO6QJMxPZJvPPGIJj3U
6BuPboGJAp1Bps924QwyCggtDwEpgq8FBC3fonLLku2FbiZS6JgMH+tmQS6V
xy0tj3WzXFmkHaB2S05w+U6mlloUe4suuWyeSC9BznSpa3nNRkEePCFt4W32
VKfLvc9berO1f3z7etS+gsrTQO1bi/X0diGF+jBLbT4elSU55Ff3rc7qZ6ir
bzqrQrJ38EgsxFjiLYaH91wqnyug6pe35ItBWaKmoOcX53uCV2LPlIb0DlA3
G20tcapf6TZVNYfs/3nwJy95eLYL4U8k9uRXwz5+JeTYrBDPNRj2yaznuLph
7RN6ckb4iZdCjk8P/Xh6yNEZQMQns0zHvzHo06+EHJ9sPDlt8om3a5p3ZWVl
ZWRkpKWlpZNDPvnyHrkZ+fOS3svKTM0oLMhKLizNSJi6dE/MOw+GzH6IzHk8
aO7j2HmPY+a3RC9oiVrYEpXUFJncFLXocUTK44jUlrCMViA0ozU4szU4uy04
pz0or8s/v8uvoMuvqNu62G4t6fZS3BVQ1BVQ2BlU0Omf2xGQ0xGU3RaUhd8e
mt4SnvYkIu1JeHJbWFJrRGJrZEJrZGJz1MIn0QuQwfOeDJoPNA2e1zRsbtPQ
eU2xCx9HJj4KS20dvODxsLkPBy/Euqyh8xoHz38YnfgoJgGJTWyKSZKITX4M
RC965CWlSSYy/XFEhkRk5pNwD1GZrUBEFiGnDQgjhOc9oYTlI+EFzZSIxa1h
xUgoIaS0jRJa1hpa1h5S3h5S0RFa2Rm8BAmq7AisaA9d1h212hG7zhWxxhFU
1em3rAUIqOqgBK7oDPBlZTsQuKqjD/4D4FfdP/RxpEdb4UV+Xnzq5V6ClrYD
wUskgirbQnwpb0VKW4DQkmZkcQslvKglrNDz5uQ3h+W1hnuIyGkBIrOR8Oxm
Lz7vf0xmU0zy3aFprdEZDyIXPfjOjsaXtj22wmtY3Rm8rjuopjNwXUdQdVvo
8rbIspaoosffStldmJGbk563MDW/IDUpd1F2VkpeRlp2TlpBUkpmSmZqZs6i
/LzMtLSMRSmZi5IHvi6yUpNT81YmLOj4Rljr98fc+f6o9jfHXfqnv0nOzE9J
S4W/TU9LSk5LTc3KTU1NzU5P+TNesl/0gGCVmZkJJ3CbnZ0NJ4mJiQcOHJAt
a3hyPF9aa/G9pS8dfiv2+OuRn8zy/+DliGNfDf9oWtDJ8aC4XgihENWPvgwn
4cdeofdEHn0l+uPXnvVxAj6ePOSjrwYdnx710STzsSWK7B7De82Kec4+Wuvp
PcRn1VpIqUjrtWSthd2L2VIfItVaVGh9htayJqLW8kvuq7UCkgVfuSXntWSt
5Wu6JWstWW7R8i1ZbpHsFmotqXDoKblFhzj0mpTRj6+g0Edu9d5VFKi7oOwL
gXtztWIf5Cp6SQXV9ymn/zx8rGkky3fq67XZ53E2eWeK0YEXvV4D7aD0yWJ5
vfG9uSze2xqAaT2xV78h8XaQ+qk9QovsG0pCS9ZatEZLFlpUa1nzxIAsUZvf
87NzPeGrUWvhD9KAjed6H61lXt4Stu/nYUdf6s2Ludw+l8GffC3yw1fDP3xZ
vh7hJPyjmc/+UPiyQz6cEXH0pZjjr0cdw8eESzv2yLiA41P8Pn4t4tDrw459
dciRlyFqQQTLy8srKCjIz8/PycnJ+5IfRQUl2VmpRbmFOTkp6YsKl+bk/GbF
1tiU1uHvPRw2+9HQOY+GzkWRE7uwOWZhc3RCM2gthGotUEfprVRuhWS1heS0
h+R2BOcTKVXY6b+4B/Ar6ZbxX+zVWoG57SDMQJ7BN4LWikhvjiBaK2JRe1Ry
e2QSiLqWmMSW2IQWeF6QVUPmN4OmkrXW8HmPBy98BJoKFNqQhKbhcxtBaw1K
fDBsQeOw+VgGPyjRh6RHMrHJqLJiUpq8pD4GotKQ6PQnURleojObYzKaY7Ja
KNHZLTE5rVGEyLwmICr/cUSBRGThE6SgBSlqBUB3AeElbRSqvsJK2sLKO8Ir
OkMrOqj0il7hGLzOHbPaGbK8M6Cy1W9Ja8Cy9uDlbZRAQlBVOwBaKKSqF6Er
OijBA/C0KqP0epDlvQhZ1kYJW+pDZSslHG4rWmRCK+DHQSUZXtYaVtoSXtIS
VtwMRBYhUYTogidATD4SldcWmdsK0LcR3k98V7MkxRWR1RzlARRvJGqth4NT
QGs1R2fej1708NsNj97Y9SSgsj2kujNkTUfwus6gtR3B1W3hyySt9Z28DwsK
s4vyUrNz8kryMnLzs/LyMwtzs8oKMkoyFxTlLMxOX5hfkJWbk1WQWbA4t2Kg
6yInOy03p2h51iLbdwa1/SQO5FbnW+PPvTUjvag4PTe3sCCvID8Xrv7cvILc
3Fw4/3Nes1/kgCUhvDCIUXALIQu0FoSsxYsXX7lyRdZXsp/8cyguv4+mjjzy
RvD+V8xHXx107JVBH0wLPTYz+OjL0R+80oeow7OAp+//bMI/fCXsyKzwD2ZF
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
NnZHb+zUNDolqDd5odzqoFBtc34faLcEh/cxWxxyKDc7KaQzqhodGOoGgGqj
nUJdb1fV2TA0tFsaga7ahqGvAtBXra0iqLBg6Aj0pU5AsQPDWERQaMcQe8wW
2in0BQCd2WYwd8Xm24y5XTpzuyG3J77etviVy5qNTuXTdvVOu3q3Q7XDptlu
12616zY6dNVWfCEbmvv1oLTzox/7ePhvPo397VdjH/tw5G/OD/7NJwm//TCx
/tUjr3/11jcfffjJu5+8//EHH3zU27r45JPzH33w4d/efdv6i4U9D0203Z3M
PjSr4+Fp77/xyvmPPnz/g4/ee//Djz7Cfw924L33P/4HLtnvtX3yySef4rX9
MX6NH2CTdeHCBYfDIY9o0eYPN16QyCMGGse73m1/5RdvpY/987JB524f+swt
w87N9cPwZ+dhBN5/bYzAf4X/9tzckefmYYw4Czvxzy28geOMOTVnxLPLBz07
Z9Sz0yOPv9k3D/VZb8VcC5Bpp6GtvtlerhVicsm5Fg1twVyMSi/XCqsXuZZX
qeXpG08nvUIRooxrwfRYD9eiQS0VkWkF4VrZML5Tn+vDtfzoliEPyXqcinSL
Mi5pOLVXLe8Nc3kZl7ZCZFxqGeMSuxDU+iQWqZRLHuzy8K6AMJevij5iO++T
dPMUMFJIcyUo1aEDZP3Y1/8FgZorbwvWXd6zA8ikj4gdIsLJhAsKsbSQQLHV
Z8gFrTGkLEvtEWWp6/11WRLFCkK0SLxRWcFHFcMoE0MJuvWM9fbfO/BbodgH
wTrFQRTRzBN9Pn4aHHZ+B5z86bBnZ/vgOpfDDSPhhaUjzy4YdnaOtJaxhzX8
3HU/geHn7hz1+znYdcLmYvjz80Y/P3/4mbuGnrht9LllA09Pu+vl5Q2f74I6
RGKW/kVG80ib2+lAgptKNhjoku9Azn57rxiyEAZe+ABiBLQkxK0x8RhqM68q
5FXFAp1ADSgXlBUw7TSimqAWQe1zvUCnzId5AD/SBxBbBH9SLpCCaAGOVsRr
zEhEPnbuSFUONiy5KDILGbPB48PPKioTRWfALd4PLYUHRGfBY+gOBv0Teo94
hHwk8wS9Y338J/sUwegfDE2JCEMRMhYD8FrQEehLsQ+CdOUChr4CZsfoKgH6
KoC6mqXQ1HByRFV2xVV39a/pGFBzZWBt2+CNHcO32kZsdw/b1D2ovrNfLWjI
IQdX3xVb34mh3iJQqGRQbBWh3Ib8oHgyOAIfGQiV71m82Mx7sQkmO2s2IXWj
4MVGyDjQId0wrbuO19aKUNciDC2BrgZpqwV9FUBTCVOkdRUAeOvKkb4MoK5A
mjIZPO+/vliIKkB6M6stdRkKhGFVQspbnbpt2A/llXuQai+C2x2CejtSb0b4
+WirUWSpoDShuBxbdFqPer0wcIMzaoNT8QRSbkChT116y4pXshUJZOzpNTZB
nLxjS7vPet8Ex9opwiN3tD800f31eZgiQfqmwwRVMsj6n9AcyEciyieLSQ+Q
x7huwKB14388y1vbsMFwIdehL5576C+pSWfnjTm3cPTZBaPOzB95eh4F3r8x
0D8ffXo+xqhT88acWRB/btH1H2d2/DPzR55dPPDMXeNO3aY/czC8BPXZ0Em5
VmiGjGtlU8mWU+oeH5RrUctGuVZoAw/lh428qNSq9wS1qlFEMK6lLBQizILC
BFDJiBZMes1BvlxL0Jg4VbGXa2HIuZZk1gLp1jUZV5AAl5dxVfPKal4McHk6
ccnE8wJBQD+uLQHpRcpPnkSBgGHWBJR6RfgHvnx4kTwCdr2QKJy/5kqeGXxK
ZFYQtnpKwPCJYtEpbFu9LEvq4eAbyyJEq84H5A0U5LosjYxoAdclREuHL3zl
XBT+VpSjyEI0+Zhl9os9fXcI2KyFNSNlC3AtCMftgqehb+waeOLRUWfmynCD
K+sGkPzc0rGnFow6JS5MfIvX46hTc673OPFn5ow5O2fkafhDMBQn5safWDjl
3Iqkc4sL3m9sc11BHCMIDitySkYJUxNquP5uw2P/QRt2dN3YCCMGZu2yLIM4
zConP8upcpEEZR6PATOgTZwiH5wyBZmNGF6EsOEKKwP0LUOh5YhODetL5kr3
rQVQihUqoQYA7mElQQUKLQO+BMch0w/DC7gIM0BBp07nwcxrFTFB2hykzBHU
OYI2S9BncRiabC6ikDNkszEZfGQ2wohLx+AN2bwxi8WIzOaMOV4Y8ng5fEp7
CgA6D/SFkqXi1SUiVKW8ksx4JUDipFfPgEUKhaxLM6yyahFxVdb+lV0DK68O
qbw8rLpteF3HiE3WUdtcmHpBgV5N+6CGrsGNlri6zhgS/qKzSkVsQX4zTMOl
Tjge+Dzme8D7hx4xJ51FqyDjCCk89oRgowh5WY2y3jM+sh4p6gCeOSAwxxBD
SU0N4VeYTWnLgY1T0JHfKg/wVUCCroiXoMKfgokEAUqBgceVoIVvd2i3ob67
RP83lNhSKAjaBBkcY3kXJswhBSiqgI/Jdus2oIEbkGYD6pfqwnQ95KlvP4cm
5x3IBlyLR+5eFwaLyPJGqPJ/mQenWh+eYb93uv0XM3vefhW5oYGnk2c5xHK8
C/4X/unsAPK0hQ8kVPROyXxJka7r2ziGI7MQYfY2TDBDl9HVQ+fPYJuZeGZh
wukFY0/OG/PMXAy8E39qPr69LmByNfLkXHw79tT8MfhQJ2EHH/l6jzPy1K2J
JxZiwz7gzK0TTszWPbcRL8zQ1HYxrpUuphGDcy1PL1PMtcScoIdredKIfJ8G
rk+DQLuYwkxqUoGIbSDlWtIwREURf22uhamUSLd651ry0Jaca0ld5eXJRD+6
pfNkFeVcS1POaysEeUqRci3KEzyTfQSJQqi9DSJ86BZVhnuF9J5YkDzpFu7L
vuSMSx7vkqoa/RDIwUQmtpOXAHlAD/w6jkrzCsXT4bP7dXqXZut4nrYkx/Jj
WfJ+WTTZKpErb3WnnzSrUvAQLUGKaIFMqwRFlDLYUoVhrlWAkg/1zH2ps8/T
SL3Hw7X2c5D3xPZtC29o6Bl0/L/GnpxDIPuSPzMfcJ3r4nox8WwK9lnGnpgX
f3IBPR0s6hNzr/tQJ4hNeGZ+4ukl8ScWj2ldMPPsvWv+9pvzls+wE+zkEDG7
2KAyN2KU/sk3MjcWBlA7EbjryGYT0H+9dSGkBPXPEKIyukOJt2XIZ8KwKaD8
J1+gdAubDhB8lgIo4wqvECSjJM6hliJaNZ7ouscW4QdHlEmN/gTa4k8KsIMt
opG0XGBZ+izBQOJa2BbhfT0mV2l8dLoQUeRS5rv0WYwhU3wAqExzOV0eK4c2
X4RnTiKjl8FgYvWkVaBosmSki0og9MUixKhXkWwoBplEJgVkoHsh5pO1TJ8a
PpysNX2FPbL8wqCyy4Mqrw4ob+tXdmVobXfCk66xWx1Dajsii78ZUN2OeRfG
wJqrmHRhxFZepsGiQERs5OncWBrMl+ATbpJB5WFH/iBxKhoAl2LgxEHjg8Jn
roRoTAAa0o6PQlPlhXcGbrlXlysWoctaAEkJDjHNQX3wQkGCzozUZquhAK4j
+OJiLOTnvnklehsMs1Y9jRRktjUE/LeQ8uo6CJQZSpDRjIm3AMHPNJ4iDn8x
ftel32H52IbdJMQDVXBdq/6OwUSCwb93tTa67x7b/fB097qpPQ9NF45vo4ul
k0azIDrE8P+Ega3/T1unu6fw9R3jW9eMPHLn5JN3Tjxy5+ijC0acWDX8+KJx
Z5YlnViQ0Hpn8vF5444vHH1oQcKJFYlHlwTFmGdSkloXJBxfMPKZReOPLRt3
bOmYZxYnnVw47tjioEg8uigohp6cP/zMkoRjixIPLZ52eOmIM8tVu1HIb7k+
aXaA2M7UIatDdGNIpYh9ijnKtXy08aSjKUSxgF/xHnh+BbOnxUamENcq9TYy
leyb2OrBI4YXEwc5PAZwqiygW5RrRWWSMH6WPzDvovCIuERIoXs59cKeo+Q8
inasRK7mkq1Hj45IXePCvEtZiZR1XZh3KUhEWt/g1GIXsoagzku6wEcjtxjh
pDyTVGgCwrYwii1WzUak2WKLwL/a5gIncXuP34RrKrCXIGUexQSfLMfnB4k+
+d//lBd+B6ecSpSZSdjs47oqAyEztvIeDmSmIVLKWmaJCdlK5GMDydUBrhSe
iL2aXEeMmG6ZLfgTiSxCo7ag+W+2K7ZyfffBwGvFfqTez2KiFbKDx6wvZqNl
1IGfJhyfF39sbvyx+Rh4dWDgHxOOzpl0fMXYlgXJpxYmHb1j+PHl447dPfHo
7aNP3NXburheTD19N16V8SdS4o8uTDy8IPloSsLRlLHHUnpbv3hJJhyam3xs
/rhn5g89dhdexYmnVow5SB5/eN64k3NHnJo75PCClecef+arF5FwQ+7eD27j
MZF0YA8dX1pIOsSG76n83BFSIcTgZZ5tiyBpRGMuq/DlWgDCtaBpjIxrScF2
zLUighEtkYzhh1Gnz9NUuTeuhYmW1kOxdJk8ZllAtDAPzET4GRpMArY8/dLQ
AIhdoH7pXsRmyJAlIjLHiyjSpVkEsVSRJrhMU2BHw1goAi8Egx9KvKBZMIro
EhRdjqIqYD+yFPUr44aW2oeXtg8rbxtSehljRHVHQqMtcZN9ZE3noNJLMeav
hla2J2yyxzfaBle1D6y4Qm8VdUJQRGxEFN6Gz7SLy6bgkJsIH25W70GtF9DH
uB4FAtsTbY0vqr2gyVMKQyXSe5KDckjvD/HmBG2JaPMl15u+q+JFoUAMM+J3
3gAJXwu+hVBkNms0c3NfvdRvm8eiUjwFHihxM+EUlGtF5aAY/LmnUQiR6ciQ
xij3OD60CiQ/COm/a3EtlgR7WcS/0OxamWB5ZKZj7RTbuunuXRUC4WF2mjqE
qPB/uJZ3syBWQLa3Ol7/9euFI4+sHH5o0cRjy7GBHd8yP6ll3pgD88Y/syLp
xMr4w4sxg4pvmT/u8JKgGH100cRDS5JPpIw6uiihZWHiITDs006uiD+8KCjG
HQqOWw4tSz6yZErzosSDiyYdXjr6RErYTnvI447QVHtfTLQ8reMlbTylWyEm
z1RED90KLecx3cLmi1ApoW+tQOlWMKLlaWRa7sO1aFzLtwLRy7WwidNkQ6Ae
syxjJnAtdT6rLHJjl8EP+IsdlYPk8Xl9PsBTnwiQ1yfSfqe++UQxgEwUXBDp
okOriY5LDHPRQDToH2rtEJOpcYA/RTQSyhpWVUvGxJN58cqNAF0dr6mnEIBZ
YTQCQjejcExOtiDVVg4com1OxWa8z4hyCJnaQYos+YntbxBbg0OxTbYvg5xW
+dpP7NJSp1UEdniJ++ljOWnyQp4uxNBVermrxGaxAaQRLQoj/lAKnfijiSpE
wzeiBW92ap6Ems0++4SIPUi1rztst7vPTgumqdF1rhHNjyYdSUk6smzc4aXJ
h1eMP7Jy/JHl44/g/ZThR+ZNOHI3XjjJRxYkt65MbF024si8McdW97YurhdT
T9yNvZXEoynjDi/GP+KT4nPFk9ugiD++FK/xhJbF+KkmnVg+9siixJZ5M44s
Hn980YjDC4a1LJp3/NHG93ddQhdY5HLy7v/fdusfsgHXcrGIJQEufO2w4OvI
uU5sRlx4+WOKpcYkJxN2VLlQYiyyIJPItcCAkNAWZU1gXuShrQCIpdCeamhJ
zCA6fTKupQ7kWplIn44i0wBR+NKZAQg1uSNy3eoMTpPGq9IFZQavzGABmUiO
iCykyAaE5YgIzQWE5QFC8/FxOIowM9u3QIYitxx9sJMrwoXRt9SN0acM0Lec
wQgvcUaU8fBWlLiVJRZ9aUdMaXv/0quDyy4PKL4wpPzK2AbruC3OkbVdcSUX
ogq+Mpq+GFTZFr/FMWaTbWBVW7/yS/h2QOWViFo+KMLrhaAIrWWCIqyODQqS
+wCEbGQx+tSLCKsOgtAqJqSGE1HFelGJb3lApRd9yjmMkApyW8ZKoPVccM0q
RyJKhdBSJCGsWKAILeIxwgjCS1DfYktYIQovYMPznRFFrmmvXI7eLYQ9xYbt
4MJ2wG3odi5sCxfewOHX1beC71sm4D+MyOcV2bwqC6nwbTavW+9UZ6GQPdb3
uvEX3QVrm7uW0ApS6phTYffj0z+6Vk6y/nSGde1k19qp9tLHOKEH3w8qArJ+
hP9wLfnGsC4B0pMut+3Y+RfvfiE78fDqKXvnz8JXhENLkk6sHtGckrAvZcah
NRObl0w9tjzpYEpQYMM+Be8cWjKmdeHEg0snHF45umnRtH1Lxx9aFhSJR4Jj
UtPSYUeXTsWs79iysYeXJR5cotz9udpk77sB6FafNHtfWWgLIzQP4lqhJoZy
LRrawoAxPZ5SRB+6RZqXSginRKtaDGopCNfydNYS7ZusAtFLtLB9w0RLS7gW
9iKxrdNg97bQZcjmKYw5ghz6XI5ClyeCdEPlsTus8UBr5jUFImiUWF1Ewcml
ESLKBAJOU05y+hWCFlOCKrua6Is0RCChxK+o2qmodqurGaJK5SWNRPhGN0XE
Ro7E3kXJAagL8M4mTol5yxYX1PVgR28jUsI9nHIzLyFiC4VX/aXYeuMIEpjy
zQMqfP1QVQMvh3qjCMonAbWUYQIw2/Tocj1h/EqOQNBWcBg6jHJBW8Zj6Ai0
pRyFvtirkdAX8RB7LMQfFh9lRoPK+UVvdOm3caE7Ud89fPgupNxFusU+zeJn
GN1weejhlUmtC8YdXIiR3LJo/MHFEw4uIliQdPjOmUfuHds0e9SxOVOOLp9w
YnH8sfkzm9b0ti6uFzOPrklqTkluhVWMzzv5EF65y8a1Lutt/eIlmXR4VVLr
quT9KyftWz7jwLLJhxcnHp4zunnB3CMP57/a8GbnB+DwYgPr4v8ZBa9/jw18
fAa08RzlWj2Ya71nR4Ynu0OzoeULXvVRGcC1dHlIbebVwbgWRLfKgtCtiKpg
LEsW1JI6z9CglqKAl3MtrYxr4QulnsTSYzNQNKFb2nRBlc6qSqBszZDviMxz
GfJdBrObFhLiHdiXQVsAiDS7JBgLAJGFbkABoqBRrMgiAcNQLBhLeAp9CYdh
KOWNZQKGoZSVoC/nJKiq3FSYpCtjIys64yovYio1pLxrWMnl4aVXxlZ3JW1y
JDbYhpZf7Vd0KabwYmz+l0Mr2hI32RMabXhnUNnloZXtGDRXGAiiEPBCUceJ
aOCDgvplgVDXcRTaWhGaGhajt+NrqwUJ2LboKkXQe/RVgnSPngDbalo+IEFP
oClhKbDB1xZ6oSlgtQQaM0OhMwFI7sOO3XOjWcCfr7GAufWFqyP3s4RlsaG7
OMDTbNg2NqKRDa+H9o+qYgZfaHQ5rCGTM6azGJEZXEwmE5qHFM3dH1rw8raC
Lpy5FteC9S+AA8J1f8Ksm9fz8BTL2qnsA1OtT9wv2L+FPyQKRw4vHLxg/k1s
xffYXMR5w+8tleFbnVd2vrf/roM/Ht66bMLBVclPL5xxcNXEY6tH7V847cCK
W3YsmXRgWVBMaEmZ0rQs+cBSjGktyyYdWhm/d8nKQz+h9wQCc6qgmHVgJaZY
dzavwkZ+Qsuyua13Rx16IaTiq/BUFyDdHZrhDMt0hWW5+2a7Q3NcYfkMwMxi
hBayocVc3xIeg3ItyYWkdCvMt+pHsnVAycpFYbzCw7WoL0mJlmTfJKIFetQs
AXMtI7G32IvEXEtZ6DJmIQwqRpVDIl0+xYl5iMa4AJ4Yl39TiAJvMFlXJKsJ
8m3JpanoBK4FbAHvu0HRve097e4T2qdf0T71qn77a/rtbxqefDty67uRW9+P
2vKhevMX2k1f6DZ/rdv0rb7xkr7hinFju3FjR1wVimq4qq0l/GpLp6rRqaon
LSYkVkOiRjLTRJhPL1H6G4BfPF/R4K+mUIupQFEsoSaQaBWt9CH1TaCXoNbP
l1wBMEH1qCN4ETIBKgngSxpUJBOoQCgyshBf5oRIkxBbwC18rTtyOwuB+t0g
kFDuRBEk6alqxG9j24B96UlHUiBw1Ir5zLLxLXhNLZ/QunT8wZRpBxclHrj7
rkPLJjevmLJrXXzTqrF44TSl9LYurhd3Hn1gUtNyvIIwJjYvndqyAt+Ob1nR
2/pN2LdkYhOmWCum718xZe+yiU0rJjSvTmpa+bs/l71w9U8wYNot+rIsNp7u
G5xe8QPb8CsVIITHAcfkGeTAVvIzNz+2pb1PDqvNRZEZAtQA5nCYd0l1ypRr
ATUq9HCtEiF4dEsGqtGiUMjGhPklEIPaIg2pOgStQgYhWmksxLKyhdAqV0S5
U13qVpfg6yyrLOcUZW644JY5MRQEynIXhqICoCnzoMIthyR0V5UjaWCrvMey
ooqgGlLzyhqvAF5Sg2Mo6lBII9sHJLJIWefWN3RENlyMrLscWdulbWiL2dYz
YIcj9imrprEzrK6j78buvo328Kpv9Juuxu60Rz9t1WxqVze2abd0aDZf7U1/
pWkQIXleFBpSJBgEjcFBNRUgrmgUKKjcorfjR3geQLUZPt0OZT/S4apSfx6l
bxE0RtDcJYbOA5qj1NUgfS1Aga9W+IMrB/qqKWOw6538fM/Q4y7FTh6wW8CI
2MErnsSuMYjW4LaBHKES8onGUhEDzahvAZp0uvMiiC4J12KvxbVIWAsvCOR0
t3MbftL9QLJl3UzMtRz/tRB99RYwMZFrkez7f7iWtDkhZghvrwDvjoBYB3Jc
Za6Y33lqzs6HJ+9bhZ3uxOY5U1uXTj2wekrzPfjSEBQT96dMbV456eDqKQdW
TtmzaFzTkmkH7i9+p6HT1h0Ul53B0dHV+aWt3d3dc9HZcYmzf9VzMe0tFG4i
1iOTV2fx6hxBmcupSPkPRkQ+BgvlOYUkrFrMYxuFEUbNmsx/pFwLAllELEEj
WvK4fbhs6rQY1PJwLbXMvlGihY0byFCzBCMpssZcS0u4FtVrBaq2orK9kOsi
/ORbBnxrEkEVXBhGj4JLgpjB96hSDSVIXWbRkh6b2FSqqiz6LV9GPftI7J8W
x7x8W8zLd8T84Y5+L87r//sFA59dMuhsyqCzS0cdvWf0kR+NOXT/2INr41vW
JR74cWLTI4n7f5rU8sCIQ/dE13epycBruN2IIjbbJDug2ShKRj3CUSEo5EZG
Dl8e5WOI/EDtksSvejNE8pwgBjVHsFMlwlvpQ0FMk5gilJgqzRJ6xL26QHh4
r97MGovh+xBZwBvz+QWvdsfuBK6l2IUUexwRu52kx5cTk1J9BYqqvRBb1B5X
0BaX19Yvp71/NqBfVlu/7MvKbGf09rZn27ov2r+0OjranBd67LY2pqu3dXG9
WHjsx9ObVsHCbFqOqReszablkw+s7G39Jh9ajb2qabvnTW1ZOOnEmjE7V/7o
UOqJK39y8A7Quwo8IsEdlri8/x4ZRFKdxIkvFjvpTkIzL7HuRb/vCM1zq3Kx
k8VgNwovfH2ugH+kQyWoxVCaeSm0JU77InRLUe6hW1KAq0IMqntTh2VidN3j
9MGAMHmA3c8W6QnXwrdabCTTWXUmg58PNiCYCsakon7rAXGpUIcYm4b6b0Bx
aRxGrAzR6QBjFi9Bis8DchhDjkuf55ZgyHfpTS59PkehM4nQm3kCFkNXyEnQ
4lsIC7MGszPaZBtY0D208PLwwq+HFXwzzHxpTEXH+I325AbnsLKOGNPlKHNn
VIkrspzvn//V8NIriXWWsXU9Q8uuDCm9PLwCxF3KGjYoJIfLD4pqJjiquKCQ
wlDyYBSGstItgbJTCm25m0JX5taWuij0JfiWwdCXeGEoBsB+kVuC0QOd2UGh
zXfqZIC3Os8pwZgrIjIXXybchjwuNh/F5bui8oQJhyyJh62KJ1nFU5zyaR7f
UqIFUgpsJ4sd2gI4oCHLGZnukhCd7Q4vs//u9TYbsAA7rTEUhF77pQN7csFa
sHN2YYvZ+qMky7pbXGunOn98K3rxGY50SYHH8ALzH64l38BD5VnE8JiM8lSX
gFh4m12vdb398PH143ekzDy6esrBFdjJTTzQK9eauh/b81XYF57RvGrGviWJ
B1JuaVm38/NDLOKCgpw4CKAMAgQS+MOiRo7Z086E1Fswq9FmCbS6GdsZyYWk
RYK08AdbNmqgqE2DshfCtSS6BRpUwrUoy/IJ3XvEqFJQiwTteZkjKciDWhLX
og1tIgnXUpsZXTpHFar+IA+mMGR7mvNg5PAUWnwLPbtEkBwBnFRDBgPR1j0Y
WjMiEDQFIujEH0URry4C/TY8+QqkazoQ9daQmLenxbwGQ4f7/fmOAX+8a9AL
c4c8t2DYuQXDzi4ad3Ju4jNzxh2fl3xkwYTWxRMPQsRycvOy6U13xzffH02T
jzUsuKs1KKzBKVYr1yE/p8wbqPcFSU1+N8LrWQqfmL8PROErdf0UNbyIakTh
daur6MBuAH4HKKDqvIxCrEZXEsU7hqpEBlLqJaJAANB76D7Ac6Uz2XWFCNN7
bYEbf0x3vtwWt9sNAv6dKHy3FaL321D4VreywQ4C+xIyhslMeh+RL4kxHaBL
w98BbAnbPsPchWcwfbHykK+yoZ7e1sX1YumJn81sWjO5aSXhWssx15q8f/mU
3rnWrftXj9+/JPHIsvgDi+5qun/T+/vbkQWsgQOO5wJduAssJ/Au7kaHsv7A
Ng6aEnJikyCOd5H/7QL7y7d7YCBXLl74+JKHlLmY23CUa1FIXEsKbUk6eS/d
CoCi3Eu0wsVhrNTjk82t8LZT9nIt6KaVKWBvVJnFYD9US/QJIA2FWjMUmwqI
ToN9fBuzAW4lRMkghut9oclBmlyeAp+XGF4OA9silYmDzKkHSg/weqGvnS4o
6R2AbFeBo39h99CituEFV4aaLmHGNaKsLamiZ3yVNb60a3DulajMK1EmO3Yk
1YWYHH46ouBicnXPuOru4YUXh5q/HVF0CUPsWhYAWdMJgDcWVxEc8nidHGHl
vAQiMBPhneUh6jdEQBu0cp9T0/upbVH7QlPs3YF9ohKhihG5Ht6jhCcKXjLf
zSfxQee+4QtiHqvOdpOKeIc6Rxi13zbqWJdiE+cRePAwQ6SetAaqFEhtIykm
zYPkC/7O0CyMOt0+YLvt1IUOctF1U33id1QWQ8SKd/NIOL2LeWB897pZtnVT
HQ9ORE9v5lgHR9KMmFC4aVPP/2xkg7eEYVhs8CGZCIQLgWCebJybQ7bjn59b
dvDX8btXT2xadfu+1b3Z6unNS6c0rxq3f9X0ppW3NKeMP7Jy2t77d75/kMTh
g6CXu1EnMDGe2HQWzBzLvWK1qbZZQfxJuJaHbokRe3nhj+RFSjZN9BkJm6La
rXAy+tALj1+pkCUQqYmjXEvewlQybjqihwfWlEm4VhoypmG7xKlMbnW2S5Pj
DoJcVg5VngQGQ53PYqhMItRmTmFmlQWcsoDBUBQyyiIQ3hOwFKpiRlniBUg7
yjl4/ti+NVwwPPtL45vJutcXRL02Lfo1mH3Z7+WZA1+8dchztw07e8fws3dA
M7ST80Y/s2DMsYXxhxePa00hud3lk5sWDt9RiL250Dp7WB1DEwFhG60RtayM
R/Hh9RxFrySqITgiGnkK+Z1hG9lA9QU9PlWr4rNLAAZYw4bXcBQR1V5gnzSi
kpWgrOAV+D2hqGC8+5BMYUUTjXcIIko4pYRiwfPGkh/F95zHUBdalQUowswp
Cx1aE5r50sXY/fa+2znMtUJ3ufo8jUK3QeGPqtGpqHNEVNsgf1QAAVh1Fq/J
ROoMfE0UVJlCZIZFtf3Ku3anA9nxd92FOQ1U/3T1ti6uF8tO/OyW/Wsm7V8x
qXkFiWstv3Zca9aOZTOb7r31wEOP/7HsDds7HH5GDKgLIJnA09aEHLbCLOVy
ruueEfZD3FzY5XMSvxP/c7JugdBYgc37zGksgcZWUek2fT6KyHUbczhtLkxH
DeRaXtVWia9Ovjei5c+1xBlh2KPsjWthXw97c6pMRpHLqWlZDb4EZzrxZTQq
XYhNw+CiMgjS2OgNnJdopfsAH0eCPD4PmrRMQGSWCCMJzkuiCDEm7+lsIw6K
JSCDyURAP1WzfVDRFZjil3dlSE77sKK2MdVtCRvto6p6BhW1R+df0Zt7dGW8
shyFlGAy8MngkksJjbb4Buvgssv9i74dWHppUNll6itdG7SOmAaxe33M94C2
RKyOgQIZWV8LP2D/i0JbQBrAEkiJCSgzzw8Ob7GnB1F5nqL1HE8eJMsLea4k
NgPF4cdkcDEZKCbbiT+ghN2u8cetoh5jC8EmkoyohpC+sQCKSaEIMR0od8wT
gOj1oGOZcgp1CNij4u3QWAvZeLzCe+daJAWGHwkt6N44jh6c3PnALMuPp9oe
SGRLi3jG6qJcCzqlfFdb1H+njUdiapWItkhpM3hzDJAuQm3xB/C1+8LWN3cu
PfxwQstCMN3BMHX/kumH7hl/YM3Uvcum710w7vDS6fseaPnkmV5P3NtFggfx
LcsJ8FwYeFqfsVbdDouRxMm9Xa3yRcsm72kjj9iLFdOEboV5qq2hd021l2sp
qrwBfKnC2utOmnvlWoZsCFPo08HEgZlKRcZUpMli1Sa3toiRQ1fMSpCkj6IA
0heaUg5DXcZRubu6jFGWM6oKVlXhxlBWulVVDIa6EiDug+KdUdYAoBtzbQf8
tgrpD+6N+tsIw1t3Kt9KNr42K+rVW2L+fGu/P9426EWYoDT83OwRZ2ePOTFv
7PEFCccWJR9ZMqF16eSW5VOaVkzbv2L8wcVDtj6rbnD32ezC/pG2AWkbGFWj
Td3IYSg3cVK3ZOVm7DRxZAyQFxKV8rtfgkfx7v94uTbVV7/qk22UMowRG8WC
SgpJEi+Xx8t1XPRdorkGqpNXVXEYnn0G9kVNF4ffdvo+w1tdwWrKvdCW2VWk
uExdii+4aOYfL/U/6KIzg8L22Pvu4sJ3MoqnbCA8q0cRdQ58anwQ/HHrCjmD
iaXQm1l1YU+/Vu4DGzZIHLQjR90QxmVuEtMSUMqxn07ft1rkWgeWTTkAmUTM
tXpbv/GHVz36XPrL3/wRCfCMOKLixOsQ20uWd4nWgQFHSBCbQv/7bs3fWPvW
WpQZPL4WD0hjtRmuvmZMPxiqV1dT7ZaokCeQjFIJmf9V5s+4vCyLQFUi6znj
UWphRORAU3cQc+awmiyIZkD792ykyICmphAbwQbHBA21Ikn8CtslDFqcSEHD
qthkRWZ4YQgAZVa0Pb6BNLQRk5WS+RXhjcPL+ZWO0C1tvltr5mnzeciBFjCD
cq4OyWsbUnB5SMGFgflfDzJdGFVqSa7jk6s6B5ku6rLa1AUuDX35hYKmGLOI
zweZL8VXWxNqbMNK2gaaLwwpuox3MJnETElBCKra08XLE75G8k6qYlzLl4Bp
ynx+/D7US4xElfqEpCSoSBTOq6Qt9Ic8PKUFHbunyyJtuhgATFwp4xLrqmQ9
G6HFkEcDjGkY/tZRnV5MFhS896tlJ5/rBukFoVtgYxuIDKyKxPMLUP98NtyE
+mWjfo+RwGw6iv0dpy13/c9n3wARsIF/gZw8A1zJ0dv3H0gCj1jBCsrN8+8J
j99nfeh299pJaO2ktv+dw7d/hh9h4xnSGcbqP2Xwe2xd+NS0XQTbRnULbmiu
ig0TzzosFmQF82TH/7E2uPk/rOR/jk00p1ADCo6dHTGvtb2//eUD4/cunHVg
5cwDd09oXjOh5Z7JTSun7k2Z0bwE0hMtS6Y3LZ7YsmrKvpSZ+1Nu23N/64dn
r//MPGFaMBUD2nQI6CvWlXT6sjKXg8We4Y7MYbF5wT9qzC7sS2rykUcgIZo1
WmdNVVsRtLNNuZduSQijkgmPTELh01YLQKfzqPLBckJcQqRbAuT7oNsD0aOS
LiXGVA4TrYgCNryUo02b5aWI1EkJIowny03edEtsCkHiw7SPDRVrUVCZlr4w
uFQeO8KRhXBB79vgVL55S9Q7EyNfm6D/65Sov8yMeWVW7J9v7f8HmB0Mc/HI
KKUxJxeOOXVX/PGliUeWJR25C1OsSfvvxx9i0sEfDaz+BthdrQNEmMA3kLLB
2psWQmqm+j2hqReh9sjaKaiUPRDycTlySE0C5X0CMU0ShVs+jd+9kAp/pJJD
VSnAr8ZTU8xLWjh5SF8PltNuxAa2gAXxSQka98w3o5/hI550R9A2rU9ziqe4
iG0cDd0raviB+EtV4lKU2IzZrsH4OpUBRUPYQvYxcStfvnCBBztCcvd4md3M
ATcpp38+Zc/qqQfvmXxg1YT9y6YcXDF+P0kTN62ctX/l9P0rJh5cnty6cuLe
ZbP23T372I9f+/idS5arJGwFSUIa+ef+rSlVr9vpyw7Dk1ZVJilHTWN1mSw2
FPps9zW4loxuCX7RLTnLolYoKNfCB9SY4eDqHE6bw0MQCdrOQBEiJlr4mVCt
lC6HMWRykQFhKzm5MqZfi2iJyPJC911ci6odKLCdpFxLQzKM+DlrIbSFSZdt
SN7VIearmGthljWk4NKoss6EKntitWtkUXtcXps2txMvK3Wp+MIxhzFmfjmg
4NLoasvYWtuQkvb+BRcGFV8eUtoGBdolyKsHKPHnWv6ki+byvjMUJqNVfuRK
TWQG6mJEIVldTLECQfmVR91Bdsw+kBOtoFzL4AlteSqqfFgWTfwZqQw4C7gW
/nxhOkAWiqthJp3tBnVWo0Ab4IBnWkdMKH4tRSjWDG1A+mdgruXGn3LsemRI
dQ/YbTndw4PIiiWRbIEjdqjXuBaYKbAMJORr7+o0/9z9s9udaye7fzS9+5Fk
16tnMWMjjSNA+sVef5NjJwn0k+SXHUJo0IRdgDibA2IvbuLsWeH8+DQ29MMP
sbt4N+llL7bawB8B9nCvou63LO/97GRO4s4Vkw8tndQ8f1zzgkmH7p6we/Vk
zL5alk3DNvzwfZhuJTcvTN6zevvHR673vAI05+DJZ+mCXs0c6hLYZX/oVplY
HXRIhqkTeAev6KBcSxbaCsK1JLrlR7QignEtauI0ZpkeNYcXbQ5xIgyZpLA6
k8H3QwOHPE6Tw0SlCxJ8Y/I8RXSWT/ctzzqifSEA8h5cFDpZlaJ8zUqSLQx1
CavP57RmpDherP5wpOGt26Nem2V8Y6Yf1xoqca1nFo89eVf8icWEa80dfzBl
UtO9kw8sHr331zFlVyJKuPBKF2npySiKUXi1QyWrPwqEfIbgtUGjSRjKStYH
ZCxFIOT+qW+PZR666Jd5oSEtGugQSYkyQa+MIg5DPtuCdm+gEDsw+3TDhlaB
ftII78eR5zSaYNQ48GETGtd6Mf6oAAKJ7VDvg1lWxBYWon/15DWWM9ifDTND
/+24DDY2C+lT2bgsPiqD0VRa8j91dSKx5EdAnuV2k7bbjqy9tfXeiTuWzDyw
eubhe5J3p0w9sHrGwTUT9q5KbF4+9WDKnQeWTtizeHLL2uJ3dtlQh4V3ukEq
SaZXsLTHwX+kFsG3v1m5MYcdmmwOkxZtBgeEJA8ps50S15JVI4pGSZ5JpHRL
Ylx+REuyQrT8UK6Kx98lGMqTzWsJmcGkS5XtVuWxMDfHTNy0bGhkKvGoQJYl
hq1IdEvOrPSka420Q6GVsSz58EcJko5LJuUSdfueRCp52vm80WyPKegabLoy
xNw2KP8yxsjSjnG19sQaG96JyW035nfqzA4QSXpKLzHXisz6qr/58uhqm8i1
zBcHFV0ZXCxyLfpeSVxI4avAlJOowDt9tJrSb3uHqliQSzqDUiw/ouXV01Jb
TdS2OmrM85AcQeJavv2CJHJlzPLJ7YJOOJOJJo0+4tLxxQX1q2InnuqGLvqN
grpBbGEKqvgK8sKLQS+nznb1S0P9nnD1S0WxjyGlyTbv5XaS2eJJwMplp+NN
r+VnsQIRXBNhF9N2YKPtkSmgjb//NsePRrsbUj0SR3Ic1nW964to7zmiIwIm
AOdy4tNdRX9sYS0ddISDk/zWiWzuH36MHbxsukdnSLKkghO6zWBK6dr30aEl
resmNi+C9g6YXx17cObuVZMOrhrXtGzE7pUTdi+/8+jqGUcfqPvi4I2cV+DI
qV08yVzg/Q3vsOpilyoHlj/mWtpsogQws6DblHEtaTSGXybRJ7QlR7mPoYvw
upNIGjktaSQ0uaIkHlKZmdB3F/uzEdmuMJNbVQjBqOhMPm4952nGGwghOl0G
DwcTw/XZcvCSYF7nK5iXu5CSEJcCYtR5Nm39x5rXZ6o/Ha5767bIN6ZGvn47
5Vpxf/JyreEi11qKudbYE3MTj6YkHV4MXKt5xeQDC4Y9VRdV6ojA/KqCgxh7
KVgYovy8pucoj9hfU3eqks35UpZzEnp7vI/vKbN+gdxJLHoSywZ9iBMFdfwN
Ji+M+TD3TY7IXJ5Cbuu8xJiUaEXnkLYepLY0cc/VcYdJmc9WRCfSwgjajRCm
g84S5N2LMKP+2WjAeqRLZ6IeZwY/IWgzXKN2X3jRRuLfxC9zCVREetPsxt0n
fjp9z7Kph9ckNC8Z37z89sP3jX9qyZQ9q6e33n3nkfsS9qUM37nkty8Uft3+
AeKYHqiOgdUGzaIlReVNjLL9a21XBXTHC1ZNnit2PUjHDdgaZKGIXJc0hFri
WhLdktxAqQsEoBRRiNSrRGaCxKAWkrd6oJRGD1Qfph+GZ2GixRiKOWMhC1/m
LNAz0HAWplXYH+wteKVP96FYErOSdrzI8YF80DaZEOTPsiS5hcZjkFUmTpdv
jzV1DzS1DTRdHJh3CROtYYWdYyvs42qco8q7BuRf0OR1Y6KFHSJ4Zzw8U10k
GLO/6ldweWS1dUydY0hZZ7+CiwOKLg8qadMWsKpiTuRaxcBwKEnrDaQf7LUe
QB+jkiCVycggSf19S2Z8IGdZENPzM9EkwQqfoC/Xoi42eNm5iKYLpWuBmCsk
zIqwaIDMnUeR6W4qvgJJXjqKK2cnHO/W0gbOUMoN1UxUrIVtprYAGQpd+kzg
WqDi24B063l1o6X+igVyh04HMUeMjZYiXitexLoYUBowyIkNBvP52+0PTUQP
znKvu8N+/0T+5zOh1s7uhtAWK/67vg00oS5GIKyKZ0Rz9PoZ5yPxl369BtUV
d757Etl7iNbcRadd/6A3zCc5cHAFGePikZvD1tjBYheY/cL1Tdkfti5uehT7
y/F75k3dv3Ryy5JbDq6ZeezhGc1rpu1ZNGX3ij3nrzuuRQpOKdeiI1/h3I1f
MNoKizIbxAn6XE6NDUIuDMXAC596kUEV8oF0y1ttXSH4OJU+RMtr4gCgWvcq
USnRwtdZ9QanOtutKSDiKzODGWBcKhr4BIpJ7RVRHsiFqXKNBJVGUEgRe7+4
faD6VFzI+K0o6tAdy9a9P175QZLqrdsj35wS+doEOdca9LzItUacnTvmxPKx
J+cknLgz6UhKcutyzLXGH1iCyXP/zacN2EksgSI+2htBUxTAef4P0IrdYPzR
a2C/xAu5KhWCUbKaHflgXG9nDLMMcj2qDNLsJAza4V/e7V+SRsglqTHE+sUQ
/fCYp3uSj4ELqd4MgP48G5GmDsZz6MpBWBtZBJ/OgAzsSCJtmnPgY2jIYyi0
mFvz8sWrpH0TLa120DahN098sOrwI3gxJrZCN+AJu+bP2g3tiOMP3z1r98Lk
3cvuP5X+3Dd/4UgTA8blRm4IJrMsK2YPwasV/sO1etvwh3TPa51Kk63/4yRu
Q1TlKmKOKBXxaWoqZRILkbwsUWwpXxJAsbwNZ3xaPYCYIZuFJW+GmdeKHKis
wS6GsYQ3mN26HMaYztPUYTSxKrpMPjByJcJTEK31wNswkECTLfixLBF5PvCj
WKp8Sb3PSa9dbXIb87v75bcPNV3BtKp/3sUh5jZMtBJqXCPKrf0L2qPyLqrN
DASfKQstJiEmvF/ER2Z/G2e6MqLS5uFalwcUtQ0quaopdEtcixIzTJCkuJb8
nfRACEq3/B4WlGJJREuOAJYFn5TGLIPJH/I0KxhwmfsscS2jL9HytmqURSa9
SWHyWUems7S2NC5VAJFeCZN8tNuATVC9oKzlyHBG0vSmHAaFE9OHCbkQQ46g
XY9Cc51jD3Vdgi81wxBrgLARIBmla4zh4oAKMGSYAgMpQs5lXb9GuHeG/cHp
trUzmHtG2/9wCGTzkPBzszfgP1KpOE9aUbkZEtayuwoedzwwmnv0VvbHE2yr
E9DuJ/Eve7Dl/BcwUkQFK4gdyTwkF16XDZNWJxHK4svE250fZL9SecfeNYlH
Vkw8sHDWjoWT9q8ad2BFUuvimXvXHH/v2PWeFs5AxmQjWgcF52GaLzmiNnYq
CNcy5PGqTIFWIuvzvFzLo5Dn/SL2UqyeTiVTlAt+cftAd1IKauFjKqBOkNcR
j4M2saE2KjzHBWqNQiHGzEdlMZGpTAyZOCaNyfAr8JGEqYGeJg1tecWodJh1
zrW4VmCxjzobX+vf0L9+h+7DJMU7Sao350S+OTvy9eExr4hca6Af14K41jyR
ax1cNaF1CeZayXvXGms+0IgXAtKavoRVF38vtYMfevMfe1OfquR+pQyaEv/a
H8qveg3dyyyeVmb09DL4iCVyAR51hEx6KuNgAZ1phagsNoYE8IdvtiafdIOe
v5E0tydBexidRoP2hSBG1eU6jBlQqYofP/RxFINN3BZH4yULBJI4VsDfcgH6
CRCeddMmOM89+4uJTasm7l1y1+FVdzSnTN27eHzLilEtyxYf/+89H7VYHJeg
Aob3cDuBROsllsWJyrF/ATP2d9l44X/fbQsvtWD+DG1Y0gi3yUdyriV3AOm1
WKJbUhuEa7AsuYyBEi01mTSNz4IpljIXun9HFSMMfT7IKgyZnD4dvmO0ZhCb
KRiPKOszE8isvDXdwaDJDQJvklRKlfqxLAKFSRy3gd1hg8kaa24faIK84SBz
+yDzlZFl3Ym1ztFV0PzBkNehM3VTC6MqEUN/Ks/YDmPOt7HmK8MqraPrXIPL
uuMKLvcvahsIXMsJldfERxaTrf8griV+LvQDFT9WM5K/drXU9yNfCEq0xBor
GfQ5spIrX6Il0q0Mf7olFjuk4k+coVwrNk0wbkDRxey4Qz3GBqSthT4PSjqJ
rALSExD8J0WOQLTwcTagvqlIWd31s9csmF9ZkUNMxrkZxPHXFrQTI8XwrEdn
gC1H81brPdMsaye7H5yG6VZH2iIiPbKyrPsGvEeeXvg5ahHBJFkuvc6snd+5
biZaO8v1aJLl7knM5Xc4kvb6wUe1EK1uhv8ZgXfyvEsQ3GQf3gDSRllUz7LO
r2xfvdT95pqjv7q99f6J+5aPbV2DrfqU5sVT996z69MT13taQq3drEDJM3xS
dsQ832UbuatTBSYFReXz6kwGcy11DjgIfpaNtmvG69TPoPlJI+Qsy8fi+c4d
A+SxYtRXbNHMq7NYdQ6jLYPISWQuH53OxWzARIuP9I3P+/OoYEF7bVaQkh+D
r0bimmF8KZ/Iw5M/lab+eKz6w9ERf52m+ttUw9u3RL8yDXOt2D97udbw50Su
NfrUkjEn5sUfm5N0aOnE1tUTDs1PPrBi3I4n1OUdqmIGeE4p1Y2zopkSf/TH
96RYXq4lG+Xsg96UEkVBOJXWGyj4XnYPIKOm8rmWlGtJnNYYFDK7Bx9WJhOZ
6YboQbpzYK0t+Yw9opEFrkW63EPbsVqPGLUYcy0+JscK0pcsFJfBxj2GVOn8
yMPt70Pg2IVIHIlBbrAt4NzctC6hC0799+1N983auyJx59wJR1dNaVmzYMcD
9X/b9hl3tUewIbyaOTemWEDzyNIW156AJKIFq5u7adzvX2oTUOkX3eoGZ1Qq
0uQ58JKXy5nowqQWiXb/C2Bc/o2n5M2T6TXdX8NAuI2WSKRUeYzG7IosZqKL
kDFf0GWykvsGFMvT3VSf6RMkl9sT706urz3JCc6pJK6lzvOFx8lVyV4sRgRh
iTpoy+yMM3f2N1/sb748MP/qkIKuEaU9Yyp7RldbBpV26U1XNfkWbSGnCiSc
xbB8InMvxZjahlXaMdcaUt4TV9DWr7Adcy1VEXAt6jtHSEZeJngLsO3Bc4jf
n2t56FYQmyPrvOdDtCSuJaUOxdKqXB+uJX0cugCiZcgURHiuJj6kS+JaGaSF
WppgSMVci084ZIkkXAv0omTkK6QSSoBrqc18ZK7YebvfE1x4Jjt0b8dz7ZjZ
sHbWKYCMnSV6IWqGemVJYK0EFzAyGrLCt1983vXr+dZ1E91rpzofvtNybwL6
658QDxHzG3DYxF4zsJGWEazT1lTBPjCVuW+a/YGpGK4nfgUNFAQS9XJab2QJ
/1NtxMOlw75l/RggMuii5UkczzIuO20i7UQWZNvybtPivY8m7/vRrc2rb923
aOKeVVu/Pnm9pyWElmEEKhhzk6ia8KmTmXrCps9ldamYmbs0WW5dDlJlIT+u
RcwaT+mW3JrRFSdVJnoWo9CLUynQbjbiJNl8TkfDIKAWEzQ5jNrk1hS6YSJY
Hg9xe1JbTduZ+sXte43hy0QR0j3XoFg+3mWOZAy9fQUxlDtfCX9nfOj5JNV7
43RvzFa/k6h9KzH2z7Mp1+r/spdrYaIFXOv03DEnFiUcWZh0aPnE1lUTDt+V
3PSj+K112CipS90gKScOJnmveLlv6IdexQ+9cK3eWNk1uJakR5WC9hpZAF8u
kMCQmvlozT6xLH2evy8pQozeeyYoZUuts71iVF+lBGgkotOZOKimd/YvZ8af
sUIDikbaRR+62dApGNCThzQyHZjtxH+LvwP909zq9UhX4vjFW20wgZT0eyBL
iqFtq9ibx7XuOf7zaU+mTNq3fOapB5OeXvWT4+nvWD9AyMFLbSU4twC6VRDE
kk7PKCBlyGO39GY9n3+pjUfb213GnfibgNdjN+ljDJnEQK7lMUrfwbV8iRbE
1eVciwa1gPOAg8lpzExkGRNdyuhNLl2mGzM9GqkwEHkV9kA12QKVOuh6MSl+
cRW/zKB/8KoXroWfldIzvANDIloYYYRr6fP5aJNtgLl9cOGlAQVX+uV1Di20
ji53xFdbh5VfjTJfVOe2Q0NCePkoohCMjIasd7qPGQLlWkMrbKPrGBnX6lQW
2yNKPVyrFOgWvg27fq7lR7cC+ZW6+Ea4lhTuw/6dJph/Jydacq4ldbqWcy18
iZFfR3zoVioypInaeMq1Ios4yrV0NcC1VJWkgrsMEoiYaykKGWMOh7+0+LDD
HnNr893TTnexUkCdc7toe00OOVnS7amXjZAcG7Rexo8kAnhI85U+6Fw3wfqj
qezaScLaOVdMa0k3AfsN1AmCRXQiYHKCzYUNY9flnl/dY30k2fnwNMePpzDL
x7veOehATid+oIux/R/W8T/JJoilnYI4noMlvXWgzQX81k0plkA+EDIljXwy
zBfWj/L+UntL0+rkloUzWu5tfu/o9Z4XDkt0cUQp7KYMz8KjuS+4o/LduvUo
Ktuhz3brc2FCvT7P34ukXAvDu0Zk1daYawUlWmLOsVBqYerlWjSuRcVaMGw6
HwRaugrOkG43ZkDZrBFySUTEBQU+rBTCkmSoFJKT4hfYl5KSIrKhoFvqIe9X
TO2dOSsyTNrAmcytfu6x0M/6hXx0q/KdCVFvz9K9PUP9xvh+b0yUc60hHq41
6szc0WfuHHN8ScKRJUmtKye2rphw5LakfWvjG3eHY0tS4sDOppr2BSLvlVzW
6+8M+gpQr83Beonw00ItPih8TJ8swEVLqqXROVJfZW9etZdKH5/kYC6SkSsR
YrmoVECa7lvUgNl+Ghubxg3cgKJTnQNKhcmnHdDQho5orCVzGKtgKiUhWkKI
GQ3OdMWt5yI3CAPWu8Ky0dAnXa09LrxerHTl8KTC2cmSnZsWR0o59si01jWJ
zcsXH/7p/vMH7ahHoEaV6MN4gQojSYgeCoVc8u5cnMCTiBZ/E7X6/1Ib577M
sfqjPRpY++64NLik4u+MxGeoN6T2dwNFxiW1lOlNDqSm2cM8AD6y1gThLGWW
K9zcbSh1x5aB6kaXydLrsjZdkPtuvaYF6bXec933Y00UfuIrb8AqH9tDEuc3
cRSUU4Wancoi4Hh4vYebWOzGarNhJjI4tpn8WNPnE/K/GVTojC619M/vGVnV
NbaGuavm4qRax6ACiy6rU2NGUUWoj8mHF0nAVlpj6jAWtg+t6B5d5xhcaYkr
6epX0jGwtE1f7FCXsJRfkcoCXuGpMgiOMv+oF7VXvenlgrIvtS/R8ok6yrlW
vhdiNNJbSuDPdeVECxz5TF7roVsiAi4Z3mAXaaONiZM+lcjjIbECYYFRTZbY
zW5obg8TNARVpQuEo8RIqgohQNEPM/MNThhzUNa97YvOG1nj5C+ooSA/8sjp
cl5ut947tv3+8cIjt7jXThXuT3C8/zIJlYDumiWTlxkqS2JpIWOvcTNMoZy8
FZMtB+Ig+H+qqeu+BO6hO7rXTeMeHG9b/0B390UivHeC8/jD7/lwvRtoT5yQ
BbEj9tS3f3nsXOWSpx+t/nbPzTr+Q693w3c+m1XkOYenIlWGA3/5MZ+Xe2GS
bABsWkCUPnA5+y0reX9maPWAjUwOayBVP4ocd0SOVWdyxRSj6AJoPUGVV4HB
q95yhXo/GarMxwwawgotEMKyyEQY/JTyUQRNQpHjaDKRssgKuqM0pM5AEQUo
/Om/hJ9PDP84WfHBJNW7EzXvTDS8OcnwxjTDq7Thw6x+f7zFG9d6dg6mWwlH
U8acnTj6REri4TmTmx6YcjBl1NHZkZVtPrEmWYIPr1MYVlvREVHuFH1J0K/2
misUK61k8NYNFXsdRok79aaRED1Hyq9kWiz/FKFJCtR7jZufF+kTzvLkB+WO
v1wvQcJZAQIJqK1GmDVFpfHYvhlSnbHFaPxRh26TTVWDCEhPMDIOQ5yimOmO
zUN9M239M5D2d/i6abnt2av/APMw59iDaw7/suaN3eddV6hbBPMY/qPAujkb
2ykIg093gwYgwwXRLRKF8OE5vlzLW7xD6JYYufKlWBIi8kWtNaVAdCaXOp/F
RCuqjI8sEnQ5rDaDEbkWWBUv0QrOtXoJWPXGtVQyCZa3SsiMpCk89PkbCrjQ
AhRRjmLznCHQKtOmqEAhxSjEZF1Reqqo4cmyxoqK8tSyspwtWze+cmzPRx+/
fvxPr1ZVmZb/rjDW/J62yhJW5exTJ2YcpLyDBHVBJ+Zagyu7R9Y7BlVaYkq7
4gjX0pU4VKWsGNcq83CtAJVIUMh8bSG898tB0EiX8nvSLSm0lRecbvUW15I8
blGy6yFXfu65nGvB5SaNiYVhTCLXGrm/B3MtqGYq9+da+BsVkw010cZUGF0x
rtn2OkyIuW5FFS3nEfNcdA+aizoE888t/zWp655Z6OFZPT+dwdRvcHHQLVNs
kO4kcxgQb2EZSaEUfGNA9M7wNsgmdn6Dnri/4/5J9ocTLQ9N6VyRjI5vxqyN
IRMcXILt39AddJLOrjQn4kTsRdR17tMX//jlH27W8R9/2xJeAT1CVTnQGESb
4cLfdojey22IrPxHHtcKSreC6lHFFZQHAzg0pORHkwMEDxs6YwkfXSJA3+9s
1pjzHSnCINXTwYiWXzxfbhKjs2yx6SADw/6ytqA9Is+iSIemAYZ0/Eqtivwe
DVQKtINWpBTpX7gj7NMED9eaLHEt42uzvFzrpTs8eq3ZmGvFH18Zf3LB2KMP
jju8ZHLLksmt80fuezTShPqU8kERUd0D9QVFKLwIWBYUKpYJ6nJXb5Gr3riW
xOL8olXX5lqUbknFPsEVWSZ/rnVtuqWTSVkkiiWZst64FhSQQvZQ5FoxRSj5
iF23yeHhWkSpVSkQMSoZAJfDxZFPPDKVi0nDF6arFeeZG6nNuc5tz7sHXr36
hgXZBDJ0gwbM/gHn/XfYBOJRz3jZoslz4QscJlq6NOS/un3lDUGpC02CK2WT
BD3zBMWgFr5EagoERZ5bbWaiKlBsGZS1Qh+/LJbGQMRzBTMsQcoGe2dZHvRG
scQSbyqFJYDEH17FoTkorJw1mtzYJoQUoZB6pMhjxqe9WVZWt6O6oaSmrqrc
tL1+24nT5z7760d/eP297ZsbfvKrjCHrX9JUuJXFzhCTEFoqVi3JQWvGVYWd
hsKOQVXdw+vtA6os0aVdMaUd/Uuvasuc6jLIIYaK3RFhWKH0V4FHk1iZFx6u
RXENH1xZHIRrydOI0vvjKReVxCeC/K32oVsy0+S9EPgyLvnwXG0vXEvMoaS7
YkSuJWhz0fA9PXFbXJRrgSGqcMMYRDozyATF8phu6dOQJq973Rs9DFy0r1sn
IHEtQWJMAolu/fVZy7qZ3Q/e6rh3VsfPZjGP3Cr88VkivxJIXwMGOYBukbZR
SJTWB9vwb2wupyBwQKhat3WsGWH91Z2O+8a7fjLD8ssfobYPINwFv+Ptwr9A
e63r3khXfaKZd/BiipblEHPTatg3f+EM32qNywJ1Oqi2MuGLjb9vgVxLpFty
V7GX/JdcJgHOJgmM00u5MkfAdAtiSjm0iY0QV46iiyBIrs3g5IlCP3LVm7i9
NxWWH8WS1mYEtoSFMIMv/KmXFX/+ceh7C0L+lhL+0dTQN+eEvPJAyJ/Whrzw
WMhzvw15/r9D/vKrkC/jMdcK+yg54v2JmGvp/jbZ+NaUyDemR4lcCwb0YK7l
ySHOHnVm7thnbo0/fTtmXEmHlkw+uHBS88qR24tizayqxEW08WQUYLEYv4IQ
FjZBJP2Bn5WmEMysotwWUWbvTSMhv1/uS3pZ2TWVqPLaH7k04tpci9q3a3At
rW8gSyejWH7xefoR+4tRaZ01gI9OJ8LUQmHcIbt+s1NZDURLQ8WopLMWdEk1
C8C1MlwwQm4Diw84cG/HFwyphv47b9AAR6oiJplKbLucP/xeNP8MG+kBiNa9
a1cXdeELHDYUkRt8hqVq/UWVgtq3Ui8Ik5FBSyRA4PFB63VGU+g2lPLRlTDM
TpfDqzM4IFfky6zJFtQ5/v0Z/MoGA1mWqhdNu9/TkDqD0VnS2FqGF3tAHK4Q
vKgLUYipR4HJTAkfXozX4IXEvDcKSsr31OdvLC3OKqwqq6w71nzgjTf+8Ie/
vrV7556MXz064ncnQ2pB0wjDyKqQsRqFVQRBeCVSFXfrijv7V1uG1tv719ij
y7tjyjvjyjs05XZlOYMfE1pBu1Jz4bR3YsCUyWuQLgijebhWUMYVqOalDFPO
uLzuucSffd5br9YukHRJ9Qh+OQ55gIsaKOlHf8ZFLkA6wrUiKdfKRkN3WOKe
ZKCBIWl+iN1hmORIRjvFFqDIxziQqWSi2Mar2y92EZnA9ce6vQWIZMafINId
geuyZf0OPTSxe92Mnocmovtu51IfQtavSOsGQg0QdM1EAt/BOa8R14LR1SwM
ZhTOv21fd7vlJ+PaHk503r+g5/4Z6MjTnODmbW76vElX+X+7JKI4lJYX+8w7
SWfZm5ix+FM3Uje19QdlMoyliMlEilyOtPr06fei8kbseWn8q1yM6vHL/OP2
6kIUnsdF5LDYyoGty0OKbB5DW+COLBWiypDeDHOloXF9Brix39Fg+buKqSUb
GGgM6QoNzULqAkdYHgppfCv8nZl9vkoM+WxCyNfDw74eF/J1Ysg3g/t8PjPs
/OS+X2lDvhwc8sWk0I8Tvw/XGvbsbKrXGnMU6hATji+AOsSDGMsT9v58yHbT
6O35o7cXjHyyfOTWxhFbnh62uXlY45GhjSfiGvcP2NQysP7lAXV/jW14yVD9
haoYwlzXy7X8SrNvrM66tyLroHF7yrh8bJrMhQwqhJDX/hgCCq5JmIuPgoHj
TKRJSDhoNWxmvL3xsS9JOmthR1JvAr19TBa0vumXjvrk2h54w4UEBsYM/p03
oolAboZ2yYK1ybE3UhP0ny1woz0AK7526GrbsTmCIdSpRDvql8XzVAp7xdK+
31v5ddmHieWRKcaFKCLXoTG7YitRTAW+3wmX3QxOnSHQ3i/Q5iWHiDmD2ZZg
FMsnfiVXkfmkCOUqfWoqiXIyvJgPKxYwPLREUBSzMCQLn6ucVVT2hBSjhNSv
f1G1pWZrdcXmzblV5YU1G3ft2fnqa+fe+ujdXaeOlDzxP7c90Rpe4sbLBIJg
FSiyCvUp4MOqUFAoS62asq5+1ZYhDa64WntkVU9UZVdMZYemwhFR5e5bjTDw
w8KreAzY8R3BJoOMwgXjYCL1kvKY35Vb9LuCKKSksERTTV6u5U3RBnwiQXOL
lEJDi7OAvmf+dIsUROgy3dGZYJHwj5osNHR7T7/tbugUXUraapUx+mLI0RgK
hFgzMqSSGocMYdLJzs+cDid/Q24fbXRMLIso7xR4Ukvndr/zV+6h6exPE1z3
TxPum995b6J1b4EFtO5QY21DqAMzLZ60MhB6D0ixpOG8/aol88fOR6a7fjTJ
fd9Y57o7u3+5hr96HlTkpBcUffL/AL/1n23jkVgpThOJRDzP2zn7zTr+FR7F
PfNN9Abojou/pZjJR2QzREPuDQ0FVUdIetTAOLC8Z6mGpA4xf6N2D2ZhkBmI
UWU8JlqGAk6V5VRlgLkzgh7Vx/X4nj1qghvAXEBgPN+Qj2IKwaIqK5y61+ep
P5/W55PJfc9PCv0kPvT8oL6fDQn/ZIryfLzi07Fh798CRAvjgyTMtdTvyLjW
q7dgohX3Jzp4mgxDJFxr5Ok5Y46tIrOn7xjXmjKxZdXElpXjW1YmHJo1fd+a
6ftWT9u/YkpzypQDCya3zJ7Uevuk1lsnNC2ecGDF+KOzxx6dM2hvqrHhWWVl
d3gwmQS1V9fgWhIxu3YRkB/X8pNJKAOiW+re4/ZyYaqUdgnuKkolDJle9Z0P
40qjRRCEa6WzhjxuTJPFuIVVgRIViJZcrKU3oSiYlIeiMrhYfFGu7z7QQ6r+
rtEo8CZtLp4GtHgGMaRnKS8IN9X5+Xff2N/3cIanruhSkTYb5g/S5ntyukWW
vE9tizcAe02uBXQrHwbZYy8vrgJFlwj6fJj/Zcyhsk8yHycHuBY+hd70HRYm
0Lb0Fr/yo1hSU2iRa9H4D1ARQVnCqYo5TJYe2XCm8FdbQyrs2gqhj9m9Lud4
/ZaGxsqayvzKsjLTrl17Xnn+7Afvvnb2zGul2blTH9sSUu0OqefU1d19NqPw
Bj6s0hJa7QytEYJCWWHXVHTH1lkHbXbH1DuM1baoakt0daem2qGoYUPrUN8a
hB8WXsOFk8eH+yKsmqcIrRQoefOnYddIMnr7AsmFED7sK9Bnp2VZsnQw1BQo
TAGMK6DNvgfBgl2+XEsbyLWySNg8nTdmInUmGrTF0u9pl6qCVUAzQ0FbysDY
XBizwuMrl4FWspu6fv63Hsx2emi86bo30p3A04LPa1egYwTbsSXDtsKIHljU
tm6Wdd34rp/cwrx4EqEeaGngBCEWnNLNipnIYBuQBqvQXvdb5qEp1gdmOn96
q+OBSeiesehkiw0fgiHicMS4eYGe8UaW7w954wWxGyLLsjzHCG4HKTu4aTkL
BqGkF79Sp7nArOXB90qVyej9W04F6a0XrJ2gjw8iXriJJdTCDqfMZSBvWIRi
ykEjoc13q7JcYFFzSWF1MA1qYNy+t75/fvoNv2C+9HxCzGxYAQoxubED2OfF
R/t8MS7k66EhX44I+To+5PMpIZ9NDvkyMeTrESFfxYd8MQFyiB8nhn+YrHhv
svqdKcC1/jrZ+PoMiWtJg6eHn5s9/MyckafnxZ9cEP/MvKRjs5MPLRnfsmLi
gXsmNd036cCyKU0SVkxuWokxqXk1xi1Nq6e1pCS1rB725FPRJS41fg8rnBGV
SFEuwt9MBdwj+owBQbBrZHiJKbtWxF7OuAI1En6eo/gBBWNcfgIJQ7ZP3NKn
YVo65K8NaVA6HZkBKuWRe7sjt/LScCLwJYlYC+oi81AsNrbpKDqT16YLs473
fC1gK8L8I1wx7DmC3+fmWAcJcfH4Dpf730/c8PfYSFO0yzyKabmigt7dbvy1
MXpi3b6hLdL+jgyygXLm/ICUd77/sC2wQp6IVv8q1L8Cczm3Oo2JJFNTDRKR
I6ABLun4fhdxP5YVTIIlW1lFyI9iyVdoBCFakhZdXerWFbun5r17fvkdaFnk
bZkv6YuF+fnPbyl5onLT7urS8pLSqm1Pbjr33Nk33nnnjy+cqi2vXPfLzJjS
Ll0NUpY6QsphdgzmA5itKTajvrUCBaZPckRUOTSVlpiNtgFb3DENTkOt3Vhr
ja7p0dQ6lXVsWD3qQx4WVsdjwE6tDyTOJoa/qj3wxr58gl3SKHA/myYvXQ8q
9w0kXR4lHgpKt7yCLn+6FSQUL8W4euNamiwXJlGUa6nS0YBNlv47XYoKRlkE
PaK1pZy+EA6IuZYWf1dNcIRBT7U/04FNAgxvviG9Uy8VysB7eMvFty3/s4R/
cP7lh8e7fzrTdc8Ey09WoHfPCKibShp4aJfKXssEYuZwaJfrocnOh6dwd8+6
9NCErkfnuk0PI8ZK1aeY5rkEhs40429e7fYPZoOh0WKDMQgPYsvOsNi438Tj
L/prmzKPN6QJMZkOTOB1OTw4klKm+/upI/xYlvdheWKbcVUeeJSGYi6qDEWV
waBDNbZ1GRz+PkflUi/DJycVELwSAu2eKhjLkp5AcOtXDqP9tEVMeBHq27on
9KOEPl+OCjk/rO/nU0K/HNH385Ehn4+A7OHnY/qcHxf26ZjwT8aFfzhB5Fpv
Ya41Neq1GVF/mUW41u39/3CHZxji7JGn54w6NW/MiZUJR1ckHV6d3Lp0AkbL
4skHFkzbv3rigYWA5kUeLKHATCy+6Z7Bmw4asHkpRqHYEyxF4WX+AgkJgQRM
4loivl+gXhEgSZWi9EElqX6xem0A3fKPPRJThvH/2PsO+KiqtP1J75nJpIdU
SAFCB0FFxUJJJ4i97q7ufru6FoS0yWTSe29UUUFBwIZtAQUUGyoWUFR6EaQm
M5l2+73nf869k8mdmXsD7ud++3c35/dsdmbMzISZc9/znPc87/M6ibic3M+G
GFcRB3eRQcU2rhWopRLX69WrHbpjB9YjsZbAtcJKgX+xWV0CghrJqu/MJIdb
BD+af/UQLkDEuHhXPNR6478v2/4vGgyM9wT8MCPevORbAMILUSdEdIzowrUE
FiTLtcodLALs8NYRIU0gohV1Cg7QWpRaWq1F2okgDQl3fEijpeUdvXineiSS
l4k5gsBekmiJ955XLNkWfPZsHlZNSGcV2EAp6/GPH8gFGUpqQcKRRTeNrdpT
19y5vqOltVHXXF1Yu2r19rf+cejLPR/tP/786nX3P/FEaPUPnm2sfzuhWAEU
3SCwpR/+hHBrMTtRLDt82nD/NnNotyVmFRW2nFB1YiGdlpAOY2An5tvNuMPn
dgPIuOxcy8uFbg2SLhvsdMsxzeVMt+zhS4hgkhoJ6U2iU0np0JGiE93iXOmW
2M9HnN2yByhXuiVwLUjF4doUXDLItXqMdq6F+sbW0XauFVQKwiqx4BJ6xi6L
BfAmyryE6tcOXpAtSIY4UVcvZCDDayMsYOd2/YOTwD0T+x6awt1/g/n+CZa/
3QG+/9QEaJZAFw98vkU+x86984r+j+n9f57K3XOT9a4J4I7J+F8WAePZcwDw
loQopg0ls/71ZwT/3w2KtXmaQbbMcbyfxm/qn8+BBw6Z/JvQpIoqHvDhu6gE
FzsV3UhzraE+sI76BHFKJJCPfr46yqeMUNZxkW1A3UT7Vhh9S8jgMsSyUBQt
sbXL8dPSrizLTyeRH/ZzgRP9c7DFE5+g1Vn8YeCtIjyrgGLtQY+fJnqenqY4
NV5xKsr92CSPY9PdTqYpTk2C8Dg5xvvYJFeuFfLFNU5cK27nTYnv3Tp6222Q
a41558a0t+akv54x4fW5k17Jn7R54bQtN12zYfGUjfk88qbakCsgeeNforu+
CKpHMcqti3XrAl4dpFcL4d0MBAwTrCS51hULrsUVT64JSfFX6cS1hqFbEoeJ
Trb8Q1IuB7pl7zke5Mi1AkrJhHX9YaucuRbqzMhzLdRBo+wSXIhjXgDvn4c8
y4r/lpalsgNHqXiOtslH+aQzHxn/5W/8XzAYlt9DkmDmlwMBVRfCC9hRBZAg
kaikQnChFBXI8DtB58bxQqTyrqRQO+BK9Dv+Wsy/EvetYr0qQEQbF9rABFUy
yNCPz6KjxEUZmoeKaty9CikowkvReRB8oqIK2SwEljNhZVRwBYWUOTrExDyq
YYTE3StRlU2QzuLB15Ukll8cX35k8dP/ePiJ15/52wtVf+5sfbSu9c8VDX/R
1fxVV/9oi+Zv3U898fwjT76aU7h7QuXBkPrLPo20X6PFqw6E1A0o2pHIKrDO
qq4n3n3gDnZugDVvApkzGsyL+ujR7N6ers6Wrurmit6GzvXvrj+wd//hfcfW
bVq35OknpxZu8221kSKeF7GeXZwdkDW5d8OfnEcPcO+FYD2WcxBevZh354AS
kofVROgKMrAHD+q2KHvMQb2ETy+JfnM58IDoYd0h9epFNyC8EAFDL4vehc9u
eXUhePJ3hw4ZJUgXL7DnNfaueS2fBmkVvT1G+dj5ao1DvBKHrCHbRvGKIMpD
utb1uO4NHRkXIxhow90cXBmDysnQVibyRRPSxFaD4HrKvxbl2AOraWQzWAEC
nyG8O0yN580AN8PVmiB+w2wIf/ZHokQLyTLklrUDd03D7k02PzQd3D/dcscU
/ZI7qfdfBQTqSobOu2iUGeNPACmhfQbSXl043f/yBvqBOfh9s4h7Zpjumjjw
4Hjr0wvA7jeZEf3D/9WA38bWywa3lcbYZ0jEanRkkIZWDfpWibtO2JZUUZZe
PLHhgz5lwAfGvSqkqPGvQNZ8MOL5VSFtvF8lCSlWRDMbUoPauSJrPic5ltOm
QyaR5fq+ThpUwdzeVYZqT+BDuuVWT/kgiTXn3oB7HbxBcWyK+6lRihNpNpxM
FW64HRvrfnS8x+F0nx8n+H8/MejA1MD9U4O/mqH+cmY45Fqfzoz8ZFbUx9fF
fnhj/K4b7XmtpLfzUt/Mm/Bq7pTNWZO2QORM2pwHGdfEzXdO3ZQ1c/OtMzdl
Tt08b/yWzLRN96S9uIQXRTAOQghHIatYmArhPQhx7PIRJerFXb/tWnpXOYRX
3dAn46hHZUXqCOk6INdvZKirkY61ecbyrlzCXXvLXSdJqljTFVKCppx/CaPW
IqGpUkvHrORCXxgQWBayxK8XWmPbzOrRmlhEBVaQ139oNrNWpKFiif++ndh/
1OAEe20KPHLY7N1kiFpGRxaAgDLcVsHqUowsaU2MIgaKRaQvJGlVvImfFvhX
UWFttLqeVlYzyNtBywlcS3hBSPLDi4FvBeFfZQ7VIPOH4Ep9lIaMKkI5Lo9a
1rMGbS7QZrCc8q4yeVRzPnVkYuWFe5/eufIPpbvvy/rqrhsOLrrxXO6kS7kT
+nLHmHPj8OxoKiuKyohiFsQYF4aYs2P789J+Xpx+6vZJpxZe//Xi/LcefFT3
ZPMtJT9G1uPerZiiFe0p3r73z2BeCpeRiC1MGcgeZc2MPH/H9Lc1SzRNjQ1N
jS9t2LLzqw/27/9u62vbK0v+fk3Bi97dwKvTZMsyCQd/XQg8y7IRLQQR0YLw
Xo77dBlVvabIZ8nQVRTkWoG91mDItVaQPr20mGshumXjWvCnnWvZ34vnWoNp
LjHXEh8pCnTLS1TP6JyZlzGIsHMtpyS8q2DelWsNk9dyJVrOsocS1PLSiWup
m5mol8wC1wqqowNrePOZSgqdNWu5yBJOtbnve7gTo638TGZ/Q88E1N5LONPj
AGE9S66uIXKnUn+YZLxn5sBDE+k/prOPzrY2L6FPfkkCjOQoRJ8wBCtK0ZDc
Jzvoioesf0zC7p1kfGBG/yPXcH+Yjt0zm3ptDQcsv5nye2RcebDfWFjvF02R
SyneGpRSall1ia1a35VrOR/h2fuiltGCLktQvwfy2z1IvbwricAaJqQJhDZx
IbUw0NHSrjVO8sXyf4ZrDU+0bFyrDnItAnIteLG4N9DunzyuODXe/UTqb8W1
kt+9YezbN6e/cevEV+chlvXy3VM2LULHiC/nTNkyb9IrSKk1Y/29kzbcGfvs
2qBOzKODQRiSQLBCHZC9GsiuiPBuRXDgXS5ZryHG5ejw7KrjcuJargWkgl+H
Y/nPlbkWX73F0y2Hu1fwurFzrQANa+daUcuZsHVmRLQauYBBriUI49FeshTE
FHO+bUbtYcGbXfA5HtFN/a4H36qbBRv0uKIbh1wrDPWzsAzVVjhzLSepgz3F
yvpXIO8+dNJXDoKrQVgjG9HMNyMrowMHk1q2TqylNLwB94ZRJTTcbHpWoAe9
qoCyAosqQakzvwosUEf4VKASP3hFxGmZp55c/uld86wZ8YacdEv2BLAghc2I
o7IDQUYskxlP5MTjOUnWnDF4dhqZkUYtSKMyRluyE815SZacFGv2WCwrFctO
wHOimJxRp28ffyE3btt9ixdpdr7xwF8u5cczWclY9mRs4ShjVoR+YRTIjD5+
3/zmCu3K9S/u2rXru+8Pbd+5q75Kt+DvdYpGq1cPUHQxIvIjJlpAyGjxSa0h
ooXyWison26LaoU5ai0VtpoOXE6IuRZkWZBrea4Anr380xHXGgJPt4a4lnBb
pOOSDla27aFLit6+MZTUmg7DtRzC/vBJrQpnvdbVcC3BEcLGtYpBoI5SN7IC
14LrWnAtHVjFIUflSqRtDipm/Ouo27828NVrGANo5B6A/3Z6J44dwAd4q3je
v9Sk728qoO6eNPDgOObuWZbFs/oemkD9eQz7x0mWmietn3zI6o9a+k5S544S
OzZdKrrP8tB14KE5lttnW/40mbx/Erh3muGB2frn2+CfaQHA8B/RZfp3MmgL
B4Le1CsLSWUR6pMSokUt6uS4FoxjfChzrrb2K7Ogk2ve1QGGOOFBb0jAak3q
Jiq8BbkFoicKAvhS2VApksFfmWg557WuRLSEPI9bPYbqduuARwNQvPqK95nR
iqOTfzXX+mSWiGsN6bVS37557Nac8a/lpr9228RXFkx5efE0SK4233LNhkVT
N+VN3LxowoY/pG94IKF3h38bq+iGkYodBIpadjmrewe8PaSIEIsiJHeOrhoJ
sXuhA/VyTtQ70C1xuaKYazmXdw1Lt+xCmsG2sEMBTdIXQsy1QkptXCuihw5f
bwlsBALRQhoJnmsp+T5BfqUgqoSJ2XRhv4nhGRbGd/z8/fdL/S8efKNwGq4s
RymrYg0VXgBUhSBMgwlNM13plvNyaV9SdURQBWJZXnAG1lJhLUxEPauCREsD
wQZoBokWPy39S2n3ajpIRwRCisX3RgwuFeoQMbca4FGFzgrhg3Ea8x1Ltr12
/4NERjS4NQUsSMSyE7GcUXhORN/CZH32WDA30pA32pSTbMpKsWamYJlJRGY8
mR1F5oRRuX6mhRHmnEQ6I4HKijItDDNlxzNzx4Jbo/vy0vryErCs0eDm0QM5
48Dc2MP3qgxZ44mcGGZ+hGlRHJYdSs5P+eKpR7ft2bH/uwOH39/b3L76gb8t
8Wg2+vRwgXVA0eagxRJzLRFHYsV0y8a1lluj1jJDXKvXyJ8hOuW1gHuP6CCy
mxPonP29xMp5e5gSiJbAtbxFkBTMO3X5cVQ7SBAtyRKeYYkW50S0XLmWc7K9
2Oa+FaxBXEtVDCBFD6llojeY/BsQ11LVsEEVbDBqfUIH8dXQitXWnX0AqXsI
BkcVykIn6d9m8C3AYIBDB4TAynMj4xlr3ePMgzca/zCD+OM08OAs7O5Z5++/
1nTvdSBnqmlxOnbfOPLeNPbOSdxds7F7Zhvum2x5OI24/3rmrgnYA9cT67sB
x6vorcNq6UfGbzs4ElBg1AdnPTUY0sAUsqgqR0PZF0EnuiVwLTEREk4VlZV0
gA5tDAOFNJeO8a2gguroiGYmrBGl7v3LGH8kOLQ1mx4yI5Xt0/qrTg+la6sF
OKSmGznPBhxyLf9GzqOBUyw/4396tOLYxH+Ga318XdRHs0VcC+m1xr1527jX
7h732r3j35g/6fVbIL+a8dI9MzYsRlYPGxdN3JQ7euNj6p6fvXutihVGRddQ
POQD2lCcdOtCcIiiLqpUsTRCfOYoWQcksC9JxuVQ9ePo5zyMo+AVsltX4lr2
nrBirgV/QaUBqiLEtUI7iYgXrXai5V8zdIAYrENnQN7V5F1fX0ZKdVSoSyPv
Pe4/oGPqf+9AawrvAGlizO4v4chtDyUWKDmuJVe2LFBx33JW1cioW63KWmOw
llSXOBv3DQp1mKBSIrgIuFeDsLIBvwrMs4pNfQbpcAIqGbWOmlZ0bNn/9H6x
6BYwVw0WhF1elE5nq/oXJphy46isaCw7wZIXb8mL7c9PA5n+IFNFZMb2Z6ec
zZ10bNG0H++YdvCuKSfybzBmTmAzoiHvwnNjqOxEOifOsijKkjOKzlZiGRPZ
eenEQn92QYI5O56+LUEPH8+Io+dHk3mj9blJ+LxI8wM3Hn5r3d6fvtyw+pVl
jy310Z4JaLd49CK7uYA2lFByPUYcBH/qN8i4bMqrHsq7w6zqtUSvocNWUsE9
eGCXOajLENCN+XSRSDXabUthwT2g/SxSyGI58auhA0TRHlCc1BoSPDh6ono6
WkBI+tXI1e/IaYNlihA5Cftl+6ImtfWD5EpVhixH4G2BawWXUqoqJmqjya+B
hQscvG2Taeko5A5RgadtJ2kKkABZXlmEA8TfTgfFCZJ5pLwiUK01g87ZWevP
2LMl+ifmG/NSyMUTrffPMT54m/nhWeY/pVvum2F4aPK5+5P77k0hHpyKPTjd
8OAk6yNTyPsWnHsin/zsZUAb0YkkEtz/N5Yb/rsG+qxJMOfr04oaPIzvmcLP
McreLsolXS/du1lViXZ/vmWDM7+SDKrFQpvJiAZIw1g/DeOnQe676EV0NJyi
V+Raw7AsiRLIwcIfMW2QrLNGiet6BnItRLqaaFQlffB6xckx/zzX+uAmnmsJ
2vi5E9+aPf7NjLFbc9K3Lpj8asb0l++YtuHuKZsWTtu0YMKW+Qnrq4J7Lrut
NKKioRXArZffP4rg3jMIEe/y7HKuJJKsA5KkW06kayjEyXAtexpQbJsmjnLD
bCEl6ZbAtWx0aziuxetRtbz/A8+1VG3WyBcJtJrUAf9aW0ds1K2ynFfaaBjF
StMrJriRRBl7pNdCQWNEsfU7HkLFARKl0JaUd00+Wp5rFXMC13KiW0LmQTLB
5VWMooeqAVM3W1S1OAxoQUKta+kQxKKv8ELgqwXhJSBSa4Jcy70CuFcBVQWX
rjmjfXT5wYU3UFkhVE60NSfdnJ1mzI3qy0vqz51IZ8UzOSprXjSTEWnNiP9u
0Q11f+7S/PXZR598ZeGy9+cUfTlL88M1JUeuKTmWt2xvXsFH9y19u/Sxntfv
+9vJ3JvJjASQoeIyovvyx5ryRhHZIYasCfAGnjkVEjk8L5JdkNifHUtljSHm
j+3PiTAsHDVQ8shzbzz792WFY0q+UjcDRSOjaMO94I6s3WgnOTAUSBYMIgzy
LgjvTsqnxRjSiTwfIpaTqk4suMOk7NAHdWI+HZR7Byd4PtjkDZ1C7l2KWYkE
WpIKB7HIwadJwm7LVU3q3Ej3KkxpnJ0AJVQNEkTLCcEuXAsZemuQnAb1oS5B
jn+RGwyQawVUoB7lqB9ZOcp3oRbhrX3lP/HnexzJu7hzv2W3e4AKECG9MiNX
BgqHFweOwfsDQm3O1x9y1X+i75kM7p1B3T/DeFcq8WAyymXdfT398Hzw8ALi
jtnYXTOJB2Ya7ppwsb0IXDpmIU3IS4tDruiMrWpyZPxfDD5vDzRnLiraEddS
Ib9cFkYneyd0p4y9vfbHzriETFdAKSrSQU1wymi/SjqkgQlvYsIacFS8I9Sd
8c3y4C4yoIwMKieFpmO2VnquRKvcoWGrU5bYiWj5VA8RLQcLKZcia8HKBmWq
G9BWy7uJ9ICPf7BEcSb+t+JaE97MGPf2bWnvzJ3weta0LYumb86e9OrNY9+Y
OeHFR2Ke3eLdSytWYYqVjHsvCwmVYg2BdBErHBlXrwTXkqRbklxrGIsbsXje
SYwqId9yCncy6oghAy4ZuiXmWq59fJy4VrAOJfAh11KVcUHNpqiXSIFooQbZ
1ajsAiW1yviltgxLfbf/EgD8XoFGXIsmR0pqft8D7dxRpyUrjd/7pcmnig4p
lOBadq82cW9oMdfyKKOC65mwRkpZQQSWwFDG+ySXoBSEuA26bZHld4hKLRtZ
jMRaEcWoGjGk4VzBX5/78fYJfZmpYH4iyIyzQraTH4vlRLMLIsGCmIHc8XhW
Irgt8qv8/L8+/vq40ovxpZYorUVdTvhWM4paTlHHudfSflV4UIXZu4YJqCIi
dHS0lkPpkbrzt5R88sz/bP76jjmXc1NBVrg1MwnPjLBkJ+P5/tbcWCo7Hs9K
6M+Jx7KSudsS4SPns8KxhemvPfngjCd7FC0gtp1SNBKKVqBuMyk6qCF60+qc
XxLftYtCvVsJvyZTaLs5djkd1UOEtFtVbSZ1mz643erTRiLJaAfwhmhDNTve
7bYnotuCAN7OrFpZ55odgV+1uKTTZYxMfesQXG21JP2WhydaV8m1gl2i0PBc
S6URuBYLd3+Qa/nWM3CZg1xL8C9FW0INSN5o2msgrYwF+bjDKSzQl2H823/t
IABG41YU4lhAsQSg9CwmVF0jhxSDGXyw1VCy6OLdydZ7p+L3zx14KAXcPxvL
v15/+zj2/jjmgbHm5meoo4cAfQF11uAJlgG+JHxlkiNG9qf/VwOVrtPkexju
sxxTP0PB+aMu5veAMlwLrYYiumVnXKixBSRIVQwML0gj0YC6HIaUM4HF6NRb
pR2a5ENaxEHPQLRBqJA2KXX1JnXa3YiTWn6iUjtJogXhwRe1wevdExEP2q8J
KDa+pfgl6ddzreuGuNbOW+xca9wb+alvZaa+mTPx1cWQaE3bctO4LXmJLz8V
tvoDvy6Uy1KsgoSK9YEMauWAYhUu0qwKddk2ePTIEi2xqeBQLOUbakhW/UjW
/jidJArt2FzkW0NVP34yFdYOfqciIJMivhRRfIboyrXsdEvgWspypEQNQbGO
C2gwRW9A5syBPNEKQG4PaKqoeK4V1GIuPzrAu4kK1Wu2ODcyfseDgVttDC5U
ZpYpP2rxq8XDlnHhRYydbtmD0mDvYBFEXEvVaQisxQJQ8hPZiaA6Mg1rX08h
rRIBzaWwEoOiEihquKhCCtKtRN2pLXcvZTNCmKxkc17SQF4ClhlvzYrX5yaY
cxJBRiKeE9+XO+b5h5+6XnMwkN+GwN2lX4XFt4LyraCRNUolUvUEVvO9iWtt
neU961lFAwWvMmUlp6ymfBrxCbrTR/Mn4zmJxrwxdOaoi/nJWHYcM3cCNi9Z
vyiWyEm25KTgC8JBVqIxczSeGXk+Y15C5TFIsTyaMEUHq4YXdQ06Q7Sd04kY
l41lOYk57T16mnH/emN4iymuh4ruokLbrIJvvLLN6tdKIkP4dsS1fFoZ7zbE
tex+Duiuw/kgK5Zj2WuipRPpjUDsFS+wLDvXkinSkWhsIZjSSHZulc2uiw5Q
JLmW0olrFTlzraBiBilIX+oTuFaIjlXy3iCqMiakFOR8AE6BAWS4wPCCKhJc
FCzcf6NhQikRDDAYkmox8AfFAMjrUK8wvpEFifMNZcC5M2Dr80zj37Fl+ZbS
fGvlPWRvKfnpNtxyGWn1Kd47i0H2y4hmIcZFceD/xP95ZAiDAziJ/QJAwEqL
8vEBVTmIKgahIq4VLNYzCzOQh73gGqECHe746khItIKbKHUzp6pBybGgIr6k
GvF/1q+ERMpnlIBFLQ+ukmu59jhz0miJk1rDcC2vIa7F+jeijjbu/OWvbKUV
y08pfhn7z3KtG5241tg3b0x565aUN/Inbblrxuabp26ek/J8Q0znGcUqRrHK
5N7LekIetYJG5KobePUSKMFlA6JYbj2cgEElKjfkaWOHnWjJcC0vlwprV08b
VzMugWs594StBt5VHIST36lEDxQZrmWvQ3QNdEoR3bJzraAiG9eCy0HMRlRb
HTiY1AriVfHoKRpO9Tz9NUkBisYBzcJtJGtEbcFGtmi/54Eos2B8zXLvnh9Q
NFrUpSBkCRnKtyaHQUnNO9/CFVCIS8iJlD/igQtigAb4lhL+1YSqhQkrB+oy
EMLPE5SRGLSMCC4C4cVUuNaq4oWjnvxJdLimz68Sdb2PLrH4V5KPPPbWpYyp
IDPGuDDekpnOZSDrBktOGpk9jspOxLIjT+TNfO6+pXMKvlXUISPNyFKrdwVw
qwHqckLcJ8jB7q+WVtSjSwnOZCVv2xVcAUZVXd5+331UZgI1f0x/VhqZNQrP
TjNmp+jzYrHsBEn05U584Y+PhVYDBSJUF4PqkeOcewtt74bjXJIsxAEeDqSo
GfetH1A3GuK78PhuKrzFEtKgD282qJvN/g0YajnN962Gz/JplTVVdup+6LqP
k1NhyfezkLZ0cM1iyaWzXA1LhzH6c8plObQSk2rYCqHc2A//dSHlqGB/FGqz
wviXMAHLrd1HTl1E0xdZmBKAxgflVSNjZDgMvgEQSVN+r1+ILMT8SpAjTUQR
OTTBeNhlpXC3iMzAEd1C1dNoxqIDHeBZpvevxsIaQEQD6lUHyZU4JyYpZJUo
IHKxepBscyakVpwMVOXsmp26NvvWE54NwK3F6N1IB9TT8BfcV5z32Hu34lS8
24kJiuMpEO4nJ7ofH6c4Mtb9WKrnoQm+P0wK/H4K5FpB30xX7psZ+sW14Z/N
GvUZatATsWdW1EcT4nffPHrH7Snbb0vZdm3cuzelvpk35bXbp7962/hXFkQ/
v9y3p0/Ry/I+pQ4QFKde3U5aVhEc+2I429e0OZf8iKsR5azmXXopOosl5GRa
9s9cTLR8y1kU8XhTbkmD02HinvPWUsPAqRWqZeCC6K9FJ0dwxQzbpFfrKLi/
9i8FvlprTAkJ3wLGOrdy/J69Ry5RKKtOCH2sAEXwstSR8fsdQ1yLAx/2Wb07
McimQpfS6kLEtVBrciEiDaq2UM6BdyL1LaL8NJSykg2pRSmj0FIAIaTCVMUs
/AlJGoSPjvHQAXURiNFcgs8NLbNGFlMBJSB8Gbx9KVl7ovu+WnJupHmh6sId
qWB+Ep2dbMpNNGXFmbIT8NwYMD/mhfvKM5a9H1SLucGrphpEaayRWmS35VED
wsooB+96EUIrSB+dYDLPBlQbQ2D8rNOvevgJQ24QmxFqyR5P5UBGF6zPHktn
poDMaDmuheeEnciZk120G3KbgHoc2Z/WIxNU1zZePiJ9lCsH82kmfGsN6np9
QgeW0E1FNFvg7YgmQ2iTyb/e7N2Itmw8fWJ9m6UbGgqQ019dTW9Wx5pxWZYl
mcJyymW59j0UVxo6iI3lzw3FPVtdiRacexCq9QbfNrjekXCJVJeAaBiUionE
LabPjASSmdMkYKw037QLnYb/F/quj4zhB4fsTAmGTX+/X11KBxRxylIQXsTI
ca3gwQpZ1MqHn9VwifQtYYNr+f47NZyqAh1tC+XVShf7wSHdl6w9jrOtljh8
SbY4FBvFDx3xy7TG8KnDPeuBexPhhUTXrG8t8OgxeH7wDOJaJ8cqjqcqjo91
P5XufjzN7Uia+9HxclwLJbU+ngURu3th/O65STtvHPP2HSnv3jDhzfkTtuaO
fXPO6Nfyo1ZtD2qlPTqtinbg3sE4QbB6kOt/IcGyHLmWt4vNqQ1yhYcyLMt5
1ynTkNqVaAnnhmKiJcm1JOOeRHZLg1yPxFwrVAdCX+5X1nH+VRQMbmFVrEpH
+paiUtngFdaO0yZk2UfRKHmOWlgxxH9ja/r/qME3YuP4SkT2Wwsbtw6D0Sa8
ALXpgUDdyXnGJRAnwW8ZGWSVUb5aPKiSCa0FYZVwIlF2liUQLTvX8kPBigsr
tsBX86gGscXmoFLgx9diJBebXr/nkcs5yfpFMSBbac6eCjKCLblj8OxoQ36U
KSv6RPbsh//+XnzZ+VAN5YMamSHTeLjXcKsEimp0dQjJeeduQbaohVwH3ZHh
vFVRh67Epj+tMOclgqxJxLzks9njLi1ExYxsTiLIDjmTHyPHtdjMCLAgeMc9
j0Q26IOrgFc97g6DWL0zwxnyY+c7Stj6SogYkV8j7lejV9f1J3ZgSV1UZJMF
3oavGdpgDKg1edczKHqgyMD5NtqaYkvC9souJ4OSFMvVvk/knOzsTeqcM3dp
benCsgRpqHO0kYTSUb3gRLT4CSNBtCCC1hiCu5mgQiwIfqcaJrYAeJdb7txn
xIW5S1g5lneL5wVR5Ihv1chwGrzzP5wtj3xr9akEqkKkjnDYRTpyLbsqFTWT
QhXWrF857asjwxqAugYgt0ANGVxCo9S98FytBN2SoF525xMnC2gpxuUKp748
Yv8HJ9LlU4t51SJnLe86xLV8aoBbG+Hx+hrFiST308mKE+mK4+PdTqa5n0h1
O5rieWSiHNeK+Hhm1Me3jfogL27P9fG7bkjcceOYHTNStj447a3Z496ZHrPl
T4Er9ru3AaH7hlu71a2dVrRRdsC7ArycqJRM/kqSVonPBWSlWTL5fBeKNbTH
HPoYpRL4rv0vJFmWk5XNFeMejHIC14ILH2TvIUXI1FS9Ue/XBIKKkTlzZAXw
riSC4CK7DKS/3X+A5Pum0xSKbqg/PYcDZoRq/a4HxzefZvkeI2docN3bFv8y
KlzgV4U22A8TUSMnLeejwX3KiOBaOrQeqCtYdQkDfx9pm3nY1krNIIrBmGfM
MDopKkFMAeWlBaGlekUFSC++9O2i2eA2JZ2TQOep2ZwYMD/uUt5YQ14Mkx0J
MmLfvfehpNLLPjqkSvWpAFGFVERpf1C50RtObw2ILOHCtKS/SzG1/dLwqaJD
y/W+5UDBZ8NiKgybHnwUzFWxCxJBhhrPHwVy1dzccPO88UT2GMNCaaKF8lpZ
o4mcGDZDueSxre7NILgCbhVJleO+0hGcJPzqiYBKQ1h1X1KbeUwHHt1ghLcj
6voi6g3BNSbfWloIFD61rJ+UC59TwbJr2mqwrMahYbS9Z7QcnJvdV8j2ux8m
zshFG6UjbC2fShwQ4gI7y0IkvxD4rrKoejBVAa2Cf6eGUBWCoJXmly8T/Ikh
y3KkUEUrGLz/tpWII+M/YbDIPRBS8BUncUUdoy4iI4tpddHgHHOlW7ynLpy9
/qXAR0P7lJFBNchTN6SS12VpGPtGMkQoKJOq/ZFjXHJG0IIFhMC1AqsQhq5K
WcbFX92O1qa8KsAC6QQkWqhdez0NH3Rv5Dxe+FhxZJL7z4luJyYpjk9QnBwN
uZbHkRTvw9Nk81qf3Rj18S0xe26K3XVD/M7pSe/PSt6ekbJjTtqbt8ZtqAzq
PKdopRUdVkUrULRhHq0DihbaCW6tDIR0bsoVdumFVG9Epw6Jw58S2iKhoGpz
cIkXIMuyZGqrr9D/4sosiw99qN805FoaGs4Z+Cy0qsIp9KLep4lBxRrlTHAJ
6aujorTAuwY88tVFZFpKMoCj0O6Rb3NPcBQ9Itj6PQ+ON6Xle0vSJgDu+nTA
p8IahkoR+TPEQa4lSOVhIPIvpf20ZEAVFVKL6vvgDAkp4CLt6S9edypAuDtq
iWBZCcKLSWUxoS4mIorAtYVfn8uLteQkMNkJluwJ5qx0Q97ovkUpkG5R2RGX
csatfbAqRgs8KyjPciKgFEkmvCto3woioJxSlXEhqKraGFiOBWodjAXEF4V7
FYjWsME6dLIZUD6APCXqQMaSfTvumafPibPkTB3InoVlJsD3teYkUfPHyHEt
fU4KnZXUlx9nXpCUVHnBp5oNqHTulOFwRcsklAJqyIByfXjV5dEtpuR2fFSD
MaK6L6r6clRtn7LS6FdDI+Erv131d4kS0m9U7QSH/ZprDHFtZStOWAnpwaAK
Z37l4Ntwdfs42VNCPn8lSbHs/Mo2hYqG5p7XSiJkuTG6CKkB1cWYQmeeuBMz
MhzyiudIAgjic55rIV3Dv74568j4fQ2GZQASvew8TyjajCHFZHQxpVomovQi
5h88WNQDQ5aflvUvYwIqmZBaJqyRFTSocAIPxTdetiqe3s5aRCn2Jc+4OIkU
vUy+a7izxRqL/+AWLKCehJs4zzrOu+u04sB8j1NJvGRrvOJUovvxcR5Hkr2P
TJHjWlF7b4j+dGrMR1Nj35+X+P68pJ3XJ22fl7B9rvK5jf7NwL0BKJotimZc
0Uy5NaC77k2UEzyaaQi5HtNynGoYdYSr8bJY6O4SIaXPCuVqfJyKfYbXSAxf
ciiXuoezC3KtkEL0+yi4wSm3Th/QTIbpUMoCbiTDtSBCA7zXYq+dNyNzAAaS
LRbnkyGQZHGoA/TIXvJ3PDiBKiOuhZy3l/zQD3dGkD6F8OtdOA84MVTF9hBE
qqqQOjS4lAooxFSFTFgxiCiyrY/ImbkYwX7Xp4yOK6CVWjZQAwKLuYgCMLPg
5P7suda8SJCZYMwdb8xOIufHowxSXiSVnfhL7rUVj6z110Fu1j+qEB1kQ2IQ
VcjEFCCHLjj5g3VMgI71rAReFTbrCcmdo38ZF16Ke1fw51A6zKuaCS4DXtW0
rwasfXRp3x2Ticx4dGSZH6rPi9Fnj5XNa2XHmXITwYLo/vygnYvvQ96A1cCn
CtU8CnCmNNXSgOw0sFQfrruY3GhMbbXE1RkiKy5HVV6Kqe4LKR+A/9WfDwvo
RdANLkD0FmIMo6cavk7QCQEVQ/xKqH8RIDjTukYVOR3CFVmW3TxkELIUSy2a
NgLRgpzfpwv3W2WIXcqp4CMFFvfWS08eJvnFE+74KKtweGjPrVMjsWhkOA7k
uo2akh+4xAWuPhukoaOKSKUj1xLTLRhkAjSsn4YK0NGqamTsgARaZZSQsRe2
kIKyAj2Rz1c4bSicFlynUkfXeOV0tmjb8ricLV7xhNGGaiGSoP1XAMpusd41
jF+jRfHpX72OpXqcGK84kao4Ha84NsXtaLLXUfkzREi3PpkRs2t+wq5bR39w
U8LOWVFv3aFetU3RDBQtegXqukh5NPa517MQbvUA9V50gUcjI0minMWuV6Oz
khKgXtEPcPj8lSvF+ic0EpJft+seM5SfXWElNq6FshlFQPlcf3CzFdWU6VA7
jFGFwL9oYPz2C+cp1LOCRT0PhJ4VrKCRACNc6/c8bL2nUXILlc/Xnbkc0Iwh
pVYBUjVEFCOupSrkUPu5UhatwhW0qoKD00NVQIcsZeCcEdyYQ2WgLmGUpXjM
MrTIhvIarW/ycsF8NZWZSOTEGvISwTwfMD+yL28cm60cyBr99F9eSSy2qIsJ
viU6ao8YXgwCyvojitlAHe1XjowuY5aCyEI0dQNLZQ3tvcsgScNUpagCEb0I
nM8VFr8ycM0TW0obu1a1Nbz/1N3n70w1ZkWw80JAznBniMjpNDu6Py+Zygwt
+ttLbo1ApaNdN0S2C1YmmxRYQQZq+iO0F1Ia9GktlvhafZTuUkz55djKy2pd
P7zQApBlMb+TreZ8KhnJ1w+QChS24CwTNGyFyRJwTlsJZoxXnx63LyKSKiwn
iqUutkGSaLlOmzCeaIUWcMENVsULA3FPU4EFkKtbEjf2fzEAkNMox3spA7tS
i6UG9w0jY2TYB++4ZmEAfdIIUl//2Q9u4gpJdZGt8MeVaw0qtejgKjqkmg2t
4NnUUlatcSBaKt6kS6UBzp7PLhAvwYEupEvEuDhJy3rXZJezoMiRdPlU8H5N
lYxfJePL57t8qkj/Klaxo9HrULoncntIUpyKUxydqTiaMkwdYvgn10XtuTl2
zy3xO3Nj35sT8cbDAV1fwB2rovEccjKspT3qMY86k3st7l7DKRovKupIJ0Ay
BiGnO3Xten912SrnlL5rq1b7R+EQih39+SXip4hloSZNZXZIB8PAYcmVaxi0
cy11IW95BFfYQhD8rD64zQhnkVID97lk2FLg16jXHr7MhzEctZxGvXlwIPRk
5XU+/96raWT8bwbkWkgYL3AtGnRduhzUQaD5sJSBPyP4JBXkWgHFtH8Zuq5V
VQxShy6jIgpBTCFS0SsLWGURYxd3iQEDGiRFoehEEgsoAeOXGbbe8fDlvCRz
fgqYG3N5YVrfwlQyJ6w/fwydlXg2+7pn/rbJrxREaDBvOPl5iX5YIRuopeBU
59P1DJzhyMAZzu2yAaXWGCSvlEgopBHjqsLQL2utMFQqdCDt6Q9KyltXrGxq
XN5aXdP4fH3PR9pnLt6ZRs6JkONadEYaZFl4rhLPnGLJSTl1++hpJb94VbJC
fYpTlYq/a+uNclYAZFPBJf2RPNca12JJqNFH6y5BjKq4oNb2Beoo+DpwIYC/
GVDJwjjppJuyQ/y+4sSU3NbMZu8jdRToxLKcuJYTuXKVuNtLU+Xl7s5Ey861
hida4SKuFVVtVWy2JiyBTBXGTHLeLqErD+rJg2oPWX6rx7IWwFjgsjoSikaG
4+BTnmYOEOdwcP3us76VIKyIDNcMcS0nuuVbjLYhqhqgrKaCdJiymAhdhoqm
nXOwaH3kgjSseJ5fDd2S2xvaiBa/vot7Mg4d7sskqJ3oFpKzVsEHad9y1qcS
OeT4VhCBOqB481nvHyZ7nkhRnEzgudZsxTHItcbI5rU+vTb6o1tiP742dveM
iM3aoLbTHtVAUUl4VZCeVaxnDXCvpRU1rKKKc6uh3KtY+NMJ8Bcg5HSncixL
yvFPVjgR4KJHlXaqkf/o7B/vUIMAB6IlzbWGV0pIxkCBa0UMci0Y2VCCa02/
sscYxhedhZRag5eBiJeoz600r9HiJak0X2oNCJzmwGBOZGT8ToeVt0pj4f/z
X+aHRiL6+QvI9uEZAINMaAGjLCSVxXhQGRVUTsLFLqyQdkVoAYWOHQs4RLGK
WIhQuLAW0RDxT+LhWkZVAGk81fZwL8gMurRwjCk3FL89xpw7ispIZual0DlJ
+rzY+vuX+VYg5i8gtJgSINxVlZAhGkqAupQWEMq3z1O6yLDRZNaAwAKQWEJ6
aCi3alZZBiKfuvy4tmZl57r29hXdda3NtbUbNqx9d/f7J37Yf6j0AWNmFJYV
y2XGU9mxAwtHkZkxYF6sOSeBWzDKkjOWzIsx5av7csdQt43ZfOcT3pWo13ao
FqhLQZiGcK8Cah2I1AJFOeWspbSHSi0WohmIKr44tsY8qYlMqjTGlV2O011M
0PRFak1BOgLxqyq+vbKOr/SUJHLlQ4d9TtxJWckFw+dWQFLHQATq6IAyCiJY
xzghqIxGbW7KUeMtm0v2oH8jhKpUGpLBBIYItYYVI6SEERCqYQWoSxgxwkpY
iNBixgWcHcIUEgDDnd/Gy8oiLgjGqK6+V8/ggMHxkZgzMq5yoFMXimUoDFCP
fW3xrKKjkSIChKOoxcB9ItK38/bLQUWc/zI6qA41kkZ+uSWMcIotl7EPLXIg
bE5wqgGxw0lLP9RKQ0rf5VjAKO3TJdnD2vV0LLjhuM+xWxXHkrxPIb2W4sg0
/5NJiiMTfI9O8v4hxefAmOADk8O+vT70q+nqLyaHfjEzfO+ciI9nRu+6NfSl
51E6qwwoqjH3GsatirwaeFRCSkZByB35yWktnIoEf1XfCtdPQOpYcOgzlBRL
OG0qZct8NEMQf79y80Eo6lcVoiWST18wMOarm+iA5Vb4V4VoOdUSJloHrt17
nqPIEZ/A/9jBJ7VQLxLAnuDYa97sjyxCXAvVfJUAPy3rCxfoCrQ0wzU3hE9+
Xj38NCC6mICvM/eJH8GCYCIrzZSRYskebcqcYIHEZkG8OTeu//bYV+9/NLoA
xC9B+StXoB7WMpDbU8BLKaTA6FkOwqtoP7ihKLDe+9fG1hUre5ZXNrZ0F1YU
rV//wvZtu3768cQn27/qaq0v+J/iXYsW6jPHWXPG0JmT8cxJhrzR5tzoS7lR
7K1jjPPHmvP8DXfEgtyoswuTFy7ZoYBbyAo2BF6h1UbIu7wqIG8BQfVYoI6S
RIDOqtT0hRWdTK25MKllYHTNxbjysxCjy87F6PpDKjC4FfUrh4QWNQFEZSki
4iSGwKBcIe6ddEUEDnaoHLIV0qDvOkhmgVCW2L4ItDANwv6IslACTtMAkm0B
Ni+RgitAtcwGdRnwf/GiP/xTC+lprxm/twqn3iNca2Rc3WD4o2WOgfy86CDm
XYtFCkXThQzKoPLCBsi4AgtZ/1KUSgqqRNcgCnSQ6vNcC+XneZuIX8W1XAts
BQjVuK6MS05O72IZYZdqS/fIlk3gVBu8DmQrjo/1FKzjj07wRXamk7y+m+V7
8Br/72f5fTMzcN/E4H3j1J9fG/FpXtQXU0J33Bjc+5F/FfCsMbhVG+GOVVFJ
uFdIQ1FJCnCvsMGjkoK4eiolQFIE+2vFqJIZ/sFP7Mpad8nNu7iYmt9j2jB8
mY+Ya9lrqyMQ6WKUZVRoAxOwxhSqZYKWgehlwK/HuPxnIGTq/92Xzcj4Fwwb
iaZ58w4KB1T2R/0hz7Chy1DnJt8y4AlJBd8+IBQylqVDJlpiKy2I6CIQVciJ
wAjw5oujpyw7fTYr1ZqfCOYmWhag/s5YdiKWHwuywi/cnvjF4utSnkGZkHBE
/lkn2I6fhua2Q25WvL8QbzF4p0ESblE9l5KjloHZ//NSb3vJmu6O+vrOluqa
jt5Vr/xj056ffvhw77frepoXFTaGFOFR2sv3Lnlz5713mPKiDfkRxoWJICOJ
WBxH5o7C5k8i5qabcxKteUn9eWkf3zM3otwE/3WQhaLskw6ELGXctbRaizqj
2SHuux1cBv9yS3jBL2lVl6e2WtJq+pJ0FxK1F5NKfokp1atK6YBS1NojQGPj
S2IW5MCIhF1wmTPsb6TSXhlKx32ZGGoZ2MuvhoE4toQNC4lzw0JpwLjkt/6C
XwUIKR94/CucQEfdFH98ODJGxlUMFnluA+TCxrafpAJbDIJBTTBfMR1ZwutR
C+iAYtKvnA6oA6iRioaxEy2Ba6FE/W/EtQSXQgnG5dgKTdo+wlFdKVeCLQ0t
cN/5uOJ4utvxJLdTkxXHU70OT3Y/MtXzwEzfwyn+hyb5fHOj376Zqq+nhn05
K3zv9LBt9wW1XPTTAt9yq2c54VFJulXhisrzbuW4DAg73HU2eJSTcsTJqSza
T0pJJauJlaoTlIND/l87pKC4ok2N0xck/tYkWdbwXMtm6cbPq3BeDq3UUOpa
xm9df2ghHv4kjMlk/Jtn+2gAOIL6Dfu6joz/fwYJcKHSAaW1aBZY7vpW710O
JwahLqVCyqngclKlJcI0VNQyMuZpMmIpCH+GswPehYhchlIigcXOgA+Gwd/X
gE13LgWZQdbbR1kXTNIvDGazR+FZifSiRCpn3C+Lxs194vSov4PQUiKs2LbC
hhUgiBdc4RFXoK1isQSUSy+H1QDVUwb47uP+8HZLe03L2u6u2payqrrlnaWv
b9n87f4vP/v60/XrX3h8SdmUP+1RFVEqjSWimE0rMP/psU2fLL4NzI3Gs9PO
L47EMiZbM8YO5IYx8yPBrUlsVhJYGFH1l7aYElpZiET40RoAg1L0MgJuW5zZ
kT0FB/+qpabwp38eW3lxepMR/oQsK7Hwl9ElZ0Zp9KEaOghSrFJeJMkzLpuz
YqkzgmX+E3/MxwwD3oBxCKpiG+ynfjbAR6QgnOeqi0gnyJ39yYOWRGghISCs
iBQj4hngs8HgXwMSV+q3nEPupZYRG62RcfUDMS0asCwNuNf6uMiVF9EJTjEr
VPQEF7JBxQyyiK9ggiqpgHJCWcQJyYcwMdcaBr+Sazn0n3IwmnOWeLkmVSQl
lNJVjWXOj8CtnMf6Tb4nkhUn4hWnZrifTHT/aaLn4am+h0b7/DjF+4eJft9P
U+6fE7Z/atgns1WvLwmoBf5VA0irUA68dEaFrt9NZ3Irpdx0mDTKcDvctTZ4
lBFyCSg5KnVl0ihv8ef6r3bqUej6GV7RY3l4M8Cr51pwFYPc3s61Qgs4GHtD
Kxnvly6HLCUSngGKpv7Hv0VtxwBD4f/ui2Zk/EsGB6zAxMFFDJU7cCxH/PmE
WdEBFFrSgxd1I3esIjqggAks5AIKAd+cQgL2tdsJEYXg/ideu5Q989Liscg8
YX7ghdsTrDlJlgUJ5gXR1syAwr93hhSD2KeMfmVY0FJSWUQFF5JiwEcgnCnB
ICKLaYiIIsoJkLf4Pm2N0YG0v+wtbuzuXdVQ395ZU9PW2FX5woZNez7ceer7
859v2lxetGzS058h55NSABmmooKFf3NkERitvVT49/aLmVPBvCgm19+weAzI
UeKLQs8sngLmh1EZMebMiBsKvwwsAjA4+1XAkMLCFwkrtQSXUoNg0B55sNc2
oiVLL0cvOT6x+tysNkN65bnkkjPJRadTyk7Hai+FlmJo64QaSnKoA0gpIaiq
XKEqlYFMfk/yTDZkmH23TKyQy0fZ/RmuErJPkeFmoTAKbbQE1Fhvec/wM45K
oUlupBxnZFz1QDWqNH+SCL7EQNrLZ5GvURETjU6oWd8iylNH+1VzQdXItU9V
aLGZjRQ4cC2bEvVXQe4s6er4mITQS7iuh/ZW0jaqdmoRKCp7RA+W0b5Nl4IP
pyhOJbidvsb9ZJzbT2lehyf7/TDT+2Ca74HpQQfmqA+MU390XfC6NYHVqI9M
oJZSlwNVNeVdZlaUcG4a4FEC3Eqx4eExCE8tDiE+xbOLz+3Kf1e4VvFIFPVc
hUxCNk9l/wCl1FbDE6rhvsqiwR4rMvMBzigb1ypCxzehy0BIIROqZdw29aHT
Ig3wXXf+44sMjSrUqJHw9h85SLRwmdGXiwPBNa3mrClw1YWwLiyuG0/rotJb
ifFNxNgWOqWdHd0BEhsdkNDAQcTXswKG7taBuFoOIqVGv/nhP4DswP78NOP8
scaFSjB/VF/uZGpxGrgtaNsf75hUeT5KCyLrgbqJCqnBI2pYAeHVjBjqClIS
gt5S6DjjXcUJNyACtCAK/g1LD/1hafeaZ9vaO7patGV1rXXPrX3xo49/OPTt
d//YtrOiqn32I8/56BivelJZSavRhoj1KSeRbkqH+lXFlHFdjzcYFkxkb44x
ZiRgmUl9uVMu56X05yAz+a/zs4L4RtielaRXKQgoM3jpgEpLiSiQICxH13hU
KRu+1BD55Olx5foZTeTY8oHRRZeTCs4nlFyMKtGrivDAEob3S0Q5KMhdAzSs
GP4ljAA5fZprWLadCZbY4MS1xMorMdRXgrMkr0gCqkKZXy6Ufx05fVcRq3jB
HNjyS/GhAVQBjcyUwUhfsJFxtYNjiUEzkDMAzNr+s1qLuFbYEkZVyPiXMd5V
CIE6GlnKLyVsGXVbMSwbxhOtf4JrDa+odzp8REu5yA56eA4mPuuXPo50EYAh
JlZuCoYPfjFXcSZecXKy58kkxeFU78PjfX6c4nNwovLghNDvktW7sgJ6dwaU
wg01UFaag4r5pmxa4F3KuOn63DSsW4nRXWOVRgkuwIOHp4YQECxDjWTzUb+G
QckVRrke/NmrAsViiavhVFcsmr7a+bCMN0cqpuGsC+fr90MLuFANq9h8ORpu
J6uoee9fNCM9D2Xh3WtGxn/ewNGyhaGk5aCd6fZ+48L3zs7YYrnuFcsNW6w3
bbHO2Wyds4WYvYW8djM5+xX8hlcJiBtfI+FPePe6zdZrN1lu2IDduBG/cSMJ
ccMGYvaLxHXrsGtfsD5ev21gYRKRE8hkpOALEi8tigQLxhEZCZaMmLPzr29r
3Hzjc+CmLnDTenD98+QN68gbn2MhbljLzH6Whrh+DSXgpueBJG5bw0Dcupq+
ZRV180oS/oSAd697jprdczbz6c6WjvaO9ubWmsaO+qbVa7r/8c62o4e++OT9
d+pXNc4rW37dcuu4VezMlfS41WDSausNnfQ1nSB1BZjeTV7Xbhq9kpmwHNzV
sPe9P//BnDdtIGc6mRELMtSGxenmRenk/LHdf+1OeJZM7wXXdZyKWA7Sesi0
bgIitZNM6SBSOqjkdjK5jR7TSqV1cnFVl8ILjqZUn5/SgaXW9cfrzsaVnozX
/RJf3R/fhCe0s0kdzOg2OqmVSWjl7IhvYSHimhkBoxpYATH1jIDoOhoipgGX
xKg6wo6YWtyO6BpCQFQ17oAqQhLR1XRUFQURWUleHWg7IiooAeHlpP22/REb
dLQdYWWUgFAtGV6FB6w1x20+94HJig66WRZZzozIGUbGVQ6O795LsnwCH8z7
7AzcUgUX0n4lZICWEcpPUP65iIGEKkIqyxrGJyV+dV7r6jiYg3a6UIJx/W/z
YHZLfK0Vvp3/WzrFuVGKk+M9j493OzzF98gY759m+P84Trk/TvXO48qWi5Bl
BZeaEA/RItmDshgEaklPDabQmBXlxxTFJrcSiyTcizE7PIsQvIpxCDkWJKTd
XOFEESXhcNInV+85yKlc9XJ2luX62brSqv89y7JzrdAiG9eC0yxyKQhbhmou
3F8+H1oCPDsvNx8z8jIegAmOlyPjP28ghyIK2UOyFA3MDMdeYumN/WCfhfjc
gn9isXyMWz8hsM8I8mMzvqfPvLPfsktvhdhtwODP9/vMOy4Zt18ceL3fAvGG
3grxWp/1lUvmzReML58zHCx5iM1N1WfGcvOmsllqc24okRNvykw0Lw7veyx/
3fHjy42m1af6uvr6Vhy51P0z6Dpjgej82dxx2tR+yiig7eRA83GTgKZjRgGN
Rwcgao5Zqo+aq46YKg8bBcDb6O5RdlFhY2Nb08rVvU21zfXVNW0rlm/d+t53
P32/Z8+etS+++Ngz5SVvfVv8o6Hi64t//wo88a2p6Avi6a+xvxy8/Nh3lx/7
Gvvrl+Tjewce+9TyyFfkH7/BN25+4efCfOPiSeC2QFNmPJUTo88OO/nHqZqX
vnrgS8N9e8Aft9P3fHLpzo+xOz7CF+/Bbv8AX7Qby9+FLdxpXbgTn7+TvGbj
qbTOfdPXHr5py6UZ609PWPnj+J5vxnV8N2XtiWtfG5izDbtlm/Xmd4w3bjXO
3mq9+U0cYs5WDOKmN6w3vm4RcN0bOMS1r2MQs16zznzVImDWFkrAzM3kNZsI
iBkv4xDTNw5h2gbMjhkvUQKmv0gKmLaegJj6AimJyesoiEkvkAImPk/Ybj9L
Q0xcQzlhwmpaQPoqavxKEmLcCgIibQUpAxoidTkFkdJLQiT3EBCx7WT8OnL6
PhMOaJbh87AwGo2MkXGVg+PdinCaP0ykcvefDdUhruVRg9w+lVokRAwvpMN5
NoWqa5HxERNSSA2C+W25lqQGTHz2FOKkt3c5jnRiBXKMy6VWiI4o5LzWvaY4
H6U4keJ5bKr74Rt9j8Z5Hk7x/XaG3xv1vg0X/YW/sBiElRiCiolgDabWMcoy
4FFiVZScVxTjbkW0otgsCbciK4RH4RAQ3SrEhmdNEhD5ybhm7STMrOS5ljhz
NfQBaiROA0NdMvOSX80w3+CVsRQpWlWOXAu+TuDLFwOrQeo6/TbByYa3KKFH
6hBHhvxAFpMsOohEKTJI2FCejAbHDxBzk5hFY0yQmWRFErkJloxkQ3aKNTMS
ZCaZP3rbRKAjTJrpQ3JnBmn0f+2gadvhNsuyDF9LySHxGWjlR09PT1NTU0ND
Q3Nz8yuvvPLVV18d+P67F9av02hLd+zaSfPdXUwEhrO0hQN2mFlOBNDPgIsc
6AfAOmAhP9yBl/5xYEGsaX6Y4cHR1LyY/o4lBmPfKUD+CAynaHCWYc7QNMTP
FAVxmiQFnGCYV7/88t6iorqXXtpz8uSaHTsKuruXdnaWrFxdvf6lPad+PoST
P2HEQbP1Bwv2vcmy30wK+NZECPjGiEN8aaLs+MJI2vHpgDT29DGS+FDPfdDP
7u5jdl6m379EvXeR3H6R2HYBf/cC/c5F+u0L1FvnyTfOE6/9gr161gqx4RwD
8dIv9Poz5LqfiedPYc+dtEKsOkkIWHkCX34C6z1uheg6bmk9QbYcJyCaj+GN
R6wNhy0Q9YfMVYetEJWHLBAVP5nLfzTpfjBCFP+AQxQdxCAKv7cWfGdZdsAM
8efv9cu+Ogv/kj6hSQX8ijn4VY/EopFxVYNCPcotDKAYBgWG+sPArcvgjczV
mcAqNlhHIystLQQXwuuoQzVsWCkXrgUC4G3BIw4SD2UpDiESCSCFAPwFO+ye
cugpMkdUV+N36gDHkhY7lFo2uJQRtLKCNFS461/C+fNtjsUGLxCRpbh7CfCt
v6A4P8rrdILiSLri+EzFsaTAL+f6vrjJt5wNKoZkxgxfJEADArSmwBJCpQMR
OjpQCxQlJkUJrVh6ya2cUhSbeDhzLa+nTV7LcPdlhEch/Gl0W2JAN4popWCK
ztcHwbcILLJBLhMlWWyOzv5kfP9s/1VUGj9YIO/8ydtqpgodXGuGtOsFNiAK
tAyEQmokQCaRJfe4cOJsh/1xp+J9+23fF88E1uozPjMAgoYrJlrMOALO1X/3
dTMy/v8dvIkNQNkxyMwZUmhZh3dryczR1qxYLGcUkZ+EZUOulUgsTGXzEs7+
4XqAXUAFkDicYzAYspCl/dN8niAI+w0YUl944QVIsbq6ujo6Ompra+HtTZs2
7d69+8CBA6+//rquonzN2mc5fu024xjDH586gR4EhRqtU2hjzPKpXYYCv/zI
7n3DcNcE5uYU620J5rxp1Bfb0a9gvGmi1KsJPfv2ffHNM08XrF3zwpFDx//x
zo721q6mhtauzhXPrX3xxPEzDI36iaBiX/4v48AQWG4Isn8oJwMhMS0B8Xcn
Aad3gF8Qgxo9MwIoQAtw+KxgmOABd2jw3ysJhrUBRRYecBdHoS72nB04ywrA
GGaAA30W9N6QTAOa5CgkjSdGqNbIuLrBxwWCGwwtvefw8JdPKbsvjF5JpKwg
0nrIsT3kuC46rYtJ6aJHd1KjuwiIMd0kBLyR1IkndmAJ7daxXSCtk4NI7YAA
Ke0guRWMaQHJbbQgEhAwuoUUkNLOCkhuY8RIa+EEpDazYkyql0ZKExAjudGG
VB4pDQ5IrueSawmIlDrSDnh3TA2e0EzE1bPRrSavL3LVx2coTkYqTqTF78uN
Wv9FRJshugLE15jj602jakBMLYhtIkfV0pFVIK6CiKkEXlV9ntWYZ9k5RYVe
UXHZDaK8X6Hrcyvrh/DQGiB8yi57levhXffyfq/yPk/tJa8yvVeZNaTaBnUN
FlpLCAirI1UVQMV7NooRrOPklPMhWiAJu6+gGKiOW8Q/xQjVIkW6upQWbLFV
JaSymIAI1DICxMbOCMWUGHaui7oDlzB2BBTTAlxZnw3LHKBcykAEP0N7v0wE
v4j3noAR1kILKXuGHGFaI2PYwVKAr8YnEDOHqzFjZY23pxP5Y8zzRxE5sUz+
aJQOyoqjc+LMGbHGN3rhfpOPhCwJgyEL+MQY+U+8sZDaYoSNKwCfffZZaWlp
W1sbJFr19fXNzc1r1qz54IMPvvvuO0i3IPUqLy8XnsjxjaZslESGq9BAuAKM
8CfDFxDAv5nktR9gbSOWH2/NjDT/eREgL3PCYawc2WLZH779dtmTT65dseLY
jz/u2ratp62tuba2s7XtudVrjh8+goiUA0eiZEDLgJAEi3b2UuBIhMG78B/K
8dyHdwpFEF6WG4Qsl5P4lwqF9pwAp79S7uOh0Z5OAoizMzyDAwQJpxRgbF/W
yBgZVzHQbo4hSJbh7bipD3DLkz9cWPq58fFv9BBPfqV/at8AxBP7jH/9XP+X
z/vv/dxsxz17TXd/Zrzr04E7PzHkfWKCyP3YmPORKevDgcwPjAt2GSDm7SIh
5u4kIG57H4e49T0MYvY/TBDXv2uEuO6dATumvWWEmPrmwJStBgGT39BDJG/t
l8S4zQOSSNtiEiN1szFl00Dyy4axL2PjNuEC4O20jdbUDRaE54npL7AzXgSB
nxUoTo12+znV5/OCcWuPjH+WmbAKTFpFT16LwdvJK8GY1SD1eVPyOmv8Gjx9
pXnaWuC1Yr9i5UHf3n1end8oun+EcO865N5xyKP9iFfrUa+W495Nx73bjni2
HvdoOe7ZfNy35aRvw0n/+rPKxr5xPYyAsd2I0EKkdtIIK3ABKcsxiOReK8SY
HsvEbsIJk3pIiOldAGJapw1TOzgB17QDO2a0cXZc145wbRsrYFYrI2BaKxAw
mcekQUxodMDEJhvSW1hJTGwGEBOaOIj0RhZifAMDkdLE2ZHcyNoxphkIGN2E
kNQIEhtAQj1QrDFFbdOfg8sLMND8+gJIfCS8jYzhBsdi6BhQaFOHFknqQxh9
gi35cXhGHJ4dR2clGjLisfxYckHk5bx0QBpMmJUXOdNmju/9RMKn/2opjnBu
CBDPQUfdZ8+ebWho6O3t7erqampqqq6uXrVq1XvvvffNN998+eWXkHdptVqB
ldnPHEmSJ3gyiSRI33gKh7gHvBZIBm47hBNTSL4o7JfviZVPmvKTqB4daUvP
MJJ5JLivPvDT9489/feulT3fHTq4bdeOtp6Oqoaa5s7WFWtXwf9EoXwRpJ00
vEFwlJ1akY4Q57gc8l1yX4tcukvuP8ikwWTzdXKvLztk3kB8T/RCVpKh+BUT
438OHhiPFCKOjKsbrGD7wIcmloJbpNP8pkLYilCijYoFABOc5wwnBk2zFMVA
MAz6nzCEB0mShhCyr3ZYaVqAPTErfhBiAK6pPPQcJwbOAEn8QkjjBwsp4Ecr
BQFvHDQT3xmxjw2UgI/0JMSefuLDPhziFb1lm9nyj37TM3293scm/+1cw0uX
j79zGWy5fObVSxdfu2jefJlef4lce9609lz/unP9G8+Sq3+h1l1gVl0gxx5c
6f5VteLbMsXXGu99NT5f1vh8Xuv3aUPAR01BHzQH725V7mxTvt+r2rFS+Y/V
yrdXhr67NvyttTGvrx//j7f//L3l0e/Mjxww/Wm/8Q/fGB7+euDBfXqIu/fi
EHd9hkHc+an1jk8sAm77eEDArR8Zbtmjh7j5w36Imbv1ENfs6hcwY2efgPSd
F50w/v0LEGPfMaW9bRSQ+taAgJQ3Delv6iHGv4Uw9m19Go+Ud/QT3jJCpL85
ADF+q2HcG3oBE181TnhlACJ9i2H8Zj3EuE39EGM3GdJe1kOkbuyHSNnQJ2Ds
RpOAtA1GiNSXBgSMfc6attYiIPVZc8oaU/JqI8SkLRfu/foc7wFnYoR6WRob
4VojY7jBsbStF7mBJ+fAVPKANSfUmBtFZiaasqKZ+fF47jj89lgsI4LQ/YW2
yW9Qk02c5TP8xD+j2BJyWag8jYMEhWppaWltbe3u7oa0CpKu9vb2N954Y//+
/ZBrPfvss2VlZYcPHxaeyNLMVZ214XwsZhHLgtcAv8ZTgLPw8dmM3FD0gP5p
D9HyNPjmQ4Jh5bJOkA8dO3L06SefWt7T+8P3B3fv3AVvNNY3dLS1r1m1+sC3
+4donhx9GZYLyaa7ZF8HFfUh+ZMThINMCJY/NrQ/LnpRe+6L5Uj5N6YlnyKf
r5MZ7OBBJmVbN+ECyIyYmY6MqxwoL8ry04f3C0GzmuKz0jTKuQqwTVFWyJpK
Y3CIXxttxGR2P+zQafkQUG8pThqczJD7Z5FS4KOn3AXIfwY4OM0aVuDb0J6W
Aib6EifEG04gnHCvh3G8HRmMjwT67Og+YM44/xffH653P3qN4tBk9bcTw76Z
GPbVlMjPp4365JrYPbPid1+buOv65B23pG2bl/5O1tg3MsZtzZzwavbMTYsX
7XhSbo/mmNO2fxOcc1gb/A2558qGRMfwwqGzCAT4z8MGRblGltUzTD9N9zH0
OYqE+IUkzhL4GRz7GbNCnLZaDmFAwE9W8KMF4QczB/GFFeFzCwux18xAfGai
IXaY6O1GSsC2AVLAPwzEK3rcji39GMTmPivEs78QewcwRLAEFwB0wGMZ4Voj
Y9jB6yFQausSimT9A9b80fo74rGcaDIzuS8nCrV1zk03ZKn1OfFg91YTKZzh
0QAJomyZGe5/YVIJ6VZnZ2d9fX1vby/8WVVV1dbWtnnzZsiy9u3bB28UFhbu
3LnT/ss2fTVc/gkSyBMcBh0dIlUSw/8fi+gWJJXI+LUf4DSJslwoxpkx0GfE
UV4LSAI+7ZdTZ5c++czyzt6D336/Z+eHq3pWNtU2drZ0rO5d9dXefbbTN9qe
26ElQQFKEvJER/psjrFxqSEIawSJ+srbIP79Kx4hOufZ5DihayCVTJANxUwL
4Kx88yj+OJeFwYgZqdMZGVc5GFsFPX9p8f6BJLpeRGu6Ux4Wbh+kIFx+Egfm
3JW3R05bOrt2UfoPuMohPpIXXVBy3A9neS5Go1iEc32AwK3ocQxtpJAEE2dY
guEQG0H/UJ6XUcLHxrK5Fx4K+mFi4E8TQw4k+xyc6vvdVL9vpwXtu0a1d1bY
J7MjProh4sMbYnfdkLTj5rHb54/eenPyW3PTXl8wdVPeXbufQjssjhFl++2f
MzUEh4glEyyEAAh5shNkwp6TmnVozyt6TTsrpvnNpAyc4+QgJIgiLfVF2uK/
DPrQogejG4tzQh0HSuHLU+yRMTIEskTzpIU/k9u7i8xNMOaPprNjqcy0C4ui
mKxYMiNNnxl6+a4J4NwZht8qUiTOb+sAr7LmBdO/flgsFvgTsqmCgoKOjo7l
y5fX1tY2Nze/9NJLH3300cGDB1999dXKysr169dTFAq8DGc7cxOE9OhvZlin
fab9asABZgE4JsiE+AuUZYWMHAsGYLxCARwp1ACG9l647DUF3/Lc+YtPPrWk
vaPr62/27/5gz4qVq+vqG9s7O1auXrX3i88HKQY3yGFoScgEKNohdokhF7qc
1hrR42KJvohUuWTAbHkwx2DD8mCowVtXD8oOCpB24MBCAIwEBDPYcprjHGL2
yBgZwwzUngetpjhgrHBW89kb3Az4vK6QvHXML8nmT+T2CzJ5KonFWchfyakA
eEIiAZFmUqy3lNuLyX0OPNcZALQBxWgr+hSQzw9KoWC283mBKdgufIK/hCn0
egx7q+FuxbFkxYlx7ocSA76bFXBgZvA314fsuz58741RH8+J2XPzqA9ujds1
Z8z2W8dvWzDmjbmp72SM25o1fUPeA7uXSjAo13+9KM44xS9Rel76c5MVVcjH
Ycn/Lsu0kDXbEIby83JhTPZ7kU34w90+Luwh0TeCBIYjXGtkDDP4vYQFMQ+0
t6LwNXXWRen4/Dh6/igia+z5u2OojChiXhp1R6L1f26hMUQVcA6uoXx+iUan
QjiH/xNpLUFz9c03/6+984CL6kob96Rn99t82TQrvWMvMYm76SowhaImMfnv
t0l0s+vGGBOTGDWWgPQO0gVBkSIgCqJgA0REVARFRMGGJVFslGm33/M/514y
YbNiVpYEjO+zs5NxHGbOnZ/38Nz3vOd96xYuXJiamhoZGRkgkZKSUlFRUVtb
W1paGhYWtmzZMnmvosm1TP+c7xCoJ9BdU4XAswIvLyhKv+4p2iD9gWFbkXya
CBSLtD2tJuDPu3Ht+mefLogMj6g7Urtvb0XKmuSQoODwsJD4uJj9lRVd15A8
+8Ol7+3nittYkPx8T9fRPZ7j3V9j+i5u84x862my+Pe41A/8xO1MexF7+t3U
w+8yKTtOkFYfKfm3HkK9+HcC3J8InGzonCjtbZH+OVG3XZOSr3S6X3r8yxba
bhtGejqP/qO4Vk/nda9ef4e8zZ8uRPLSSWPgb+FrUzLLSFdhrEgyT0X5vMIu
x8hLbtJrOQOWOslNp976P0XTyIdOT3q6cfz/1o99sm7cU7Xjnzs0YUjVpOH7
XrTYO9mi7CXsWjYlbzhvd8Ou5VSsGlGoHr9B85fdC3s6rrt12v9Ao34y7/VE
9+vTH2Nl3Z1W/A/2BMn5fv++jPvvEyNvmrVu/w9U+hVGYpJYx2lOoLt+mwBA
T/DSPkKOJwovssblMxm1c7u7mVFtpVNZ6tQWRs1wg8aWdxnUnhAscO29+AR5
0jAV1DJlxbe2tn7zzTfx8fHh4eERERF+fn5JSUklJSW1EjExMSbR6kewUmq1
2s8//zw0NPTQoUNVVVVr1qwJDg7GY46KiqqsrDQdzs+4HwAAwC+MKC+4IuJz
b177+wOnnX/f7PDIyQl/aJjwRP2EJ+smPn34hUHVk4dWvjx87yvDy16xkOJa
ViVT7Yumjcp3wa41Isfjw11f9PNhAMBvD07u8SpdMbIGw9dqTuXUoRlqci09
di13B15lRm1MRr2pWkp2GsoeIj+QH2OJwnKFFSs5ORk/CAgIwNKVl5eHLevo
0aNr16719va+dOmS/A4mn+kXDAbDl19+GRIScvDgwQMHDuABBwUFya5VUVEB
rgUAwAABXAsABigkF4KTdq4h8cb3uvmv8SoHrWo4pbHCuqVVW+jUZnqNo9HD
GpVu7UXCjalUuElF5AdJSUlLly7FrhUiER0dvW7duiNHjpw4cSIzMxP/1b59
+7DGDIRK41gLlyxZEhgYiEWruro6JSVFdi085rKyMnAtAAAGCOBaADBg4UkF
AHKGMmdPdMyZICjtjCozo9qSUllqNWbEtVSOnV42qLbiDvWgesIkSyZxwk6C
FeXzzz9PS0uLjIwMDQ319/dfu3YtfvLUqVNFRUV+fn7p6ekcx8n2YjT2cx89
lmWXL1/u6+tbWVl56NAhPGzsXWFhYdi1du/ePRBsEAAAAIFrAcBARUrUZOS8
Qar+oPb/RggaW0ZliV2LVRLX0mvMDW4ObbOcUHMt16vcZmxZXXVHpfW4y5cv
f/LJJ1iuYmJiVq1ahb0lJSVl7969p0+fLi8vDwoKwq6F/lWx+tdnsPX5+Pis
XLkSD7Kmpmb9+vUm1yopKYFwFgAAAwRwLQAYmJDzUq7mLSL6ULnuPXtObUOp
rHRqC+Ja7uaMpwXt6tA5eyxqOSbefdqUqRGPvNb23XffYdGSG/HIraXj4+ML
Cwvr6uoOHDiwevVqLFparba7m/XdsfYSPHJ/f/9vvvmmrKystrY2IyNDdi08
2qKiInAtAAAGCOBaADAw6dquK++HPbBbP8uG0lgbVXY6jSXnZtnpPoz1smSm
2hvmTmIvHO3dplbZRrCxtLW1+fr6BgcHJyYmykUesHQVFBRUV1fX19enpaV9
9dVXly9flrv29G8+fHfw+PGYly5dWlpaevTo0aysLDxybInYtfDg+3t0AAAA
XYBrAcDAhJf+T0ol8QIruZZebaVXOejdrbpcy8OMedPGOG+S7nxNL+ojyRsP
ZXHClrJq1aqEhIQgCSwweXl5FRUV58+fz8/Px6KFjcv0g7JxcRw3EBKiwsLC
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
YdngOK6xsfHTTz9NTEwMCwuTizzgx3K59YqKCmwmWMDQv+467G4pA6ffdHfw
CK9duzZ79uzk5OS6ujrsjdiysGvJmyubmpq6v7IfxwkAwH0CKf4gkun6CNuo
OG3xh5ZxivMjFZf6bA1xYpZy3CaPiXkzJmV6jtmgGp3vMWqj6uVMrwPX6pG0
CoKnOoFn8S8PsgkRIlsA8HOQlUBWSrkUWL18pcSh9pXvIJfBlNdwWmPBq61Z
lTXrZqd1NdNPH9LxmRfiuXYiWToWkf+RKqgs2U6o1+sXLFgQHByMVWT16tXY
RrBx5efn19fXHzt2DIsKVi+dTidvEO4ezvpxMAPVVTo7Oz/88EPsjUeOHCkr
K5NbOmJ1xAeLNdL0MsjaAgDg10Ag1U3lxj3z2r9QXLB98MwoxXdOfeVaEza6
jc12H5/tOTln5phM5ehczZ8yZ644EkKusjkpR1cQ9XJfRh7dG3m3ANCvkPpa
xLVoqYaL1L0UP3V4GzPVnlE9p3cfolVb39JYUF4O9FRrrcdQNH0Uqq+kSBDb
wCAjOdnJj5FaEHPmzPHx8UlKSpJbS2PdysvLw3JSU1OTk5OzePHintLITbsX
BywMw7z//vvx8fGHDh2qqKiIi4vDxyhnyDc2NppeNsCPAgCA3wr4WlVK/2DF
y+iaVcuLijPOD58b0WdriNnKCbleYzd4TMr2nJCnGZWu+n+bFhxlGqUeI10p
Wnp5JYLsrYJ5DwB+BlHeVYw40loHkZPIwDGI0uu//NA49Vmd+zPtSttOlUXn
dEvB1UavHG5wGd6xai6i28luX2xnIumHik/4JRIpKSnBwcGBgYFhYWFpaWml
paXHjh3bvn37ihUr8GPUwyrhwHctzF//+tfY2NiDBw9WVlZi6bqtawEAAPwK
kKtcBnVw0joEi2L1ax4/PfbRvnOtcdnqiTnTx2d6jctUYdd6KfOtxOM52KtY
WoplSTUZSSIIK0oRNojnA8DPIOITVZCyrQTyAHG8iGg9h4zbN7BKS8ZjEOPm
iFysb7o/x6otjGrz6x7mwuzJqK7CyEvFX7g2fN5lbypYtGhRTExMdHS0XB8e
S9eOHTuam5v37t2L1SsjI6Pr4ySn+kkxLtNfDWTjwq6FD7C6unr//v1yyyHs
WvhIsWsN8JEDAPAbgyzb0aTellaqJH9JuP5C6wzFOes+i2tt9BiT4fFC3swJ
2ZpxOW7uRXNPoSuIkppgUxS+b5f7YbOIJ3VWB25pRAAY4AgdV/Ufa4wap3bP
52i3J4Sp9kaVTfsM8zYPC8bzWUPAlySjXsfgy6rzJy/PWzgbe0hsbGxQUFBA
QICcD19XV3fo0CH8/Jo1a+T3NAW1+jCvSUA8SemnWbKoiRAlcIjjSAaBVAyf
lzP/eQExejw3caKhq3sXJ+2dEcnaJ5kyBP2dPwWP/OOPPw4LC8OuVVVVlZSU
hA9TLmpx+PDhvjoWAACA/wRGzt3AuoWMNJnluC3GrYrTox9rsVG0PP+HRkfF
5UGKy06K5nGPnRj9WPNLd50bn6MemzHz+bxZ4zarxqyZmnZhB9l7DvsNAaCv
EVkOFaXTGjODcnjH9BGs2xDB3a5DbS66OhrdBmlnTGDqdpOGEZRxzkezg8Oj
sGj5+/sHBwdHRkZu2rTp2LFjR44cSUlJiYuLa29vx64iB3/6vDg8eTsOqxSp
i8qQKvgUWRM1oFukzSO+9iKfZ5Q2TkqFVklCKYVYI5YzniLFK6TkUq5n9ZMD
Vvj+s88+CwkJOSCRnJwsF2jF4D9CUAsAgF8TPD93bTHiKT3Z4ITOo7Nvty5S
nB301MVJigujHj5tp2hxfPTsqAcbnR45Ne6uXStD83zuDIcc9aQsj7/v/kbH
3yBdRSB8BQB9DdEH3Q16gZJ1tejUjOmcacu8OYh2t2ybZoGmOXZ4Paud84rI
t//jvb/5rFoeE5Mmt60JDAzMycnB+nH8+PG8vDw/Pz9sXIiEkbomBtTXm/VI
qIwSWKxPPEkdIBEtPUkpQFdbqLy1qLyIu94hhbc4uqu8MSvtB0BS1AubmFSL
r8c2jz+muy9ZsgQf3f79+w8ePJiamorFEh9yRERERUWF6YhAugAA+DVgGTm9
Fskbk6SZrYqt++P58Q812yqujHm4cbzijPPvWpwfw67VNPJuXWtyppdD9ptj
tqhfWPfOybaT+KKVrFqCawFAX4PPXYYW+OMHGHdnvWa4TjVapxzCa4Zdm2Eu
eo02THmMmm6d/M+PPl64PHl1XOzqGFm00tPT9+3bd+rUqYKCAm9v7127dqFu
1bRkJ+njIloiSc9ksGUJNJl5SOcgJBiud/zFlXr5KeTxPx3vDr45w0q/4M+G
NZ+iktT25v0s1SbHuPCPalE7g/Ws59i4SZ9WrVrl6+tbWVl5+PDhtLQ02bWi
oqLwMQ7MsmAAAPxm4UjDDk7q30Gy1TlpWVEQfTpCFCfNFFccFecnPnjG6eHz
Tk+cHPPIaae7X0OcOSrvzVGZUwOPrMUzLJngOJjmAKDvoXipaIqAOjL8GNfB
nNKe0lh3ejx308NS8BymVw065Dp24fvvZiamB6WuDvJZFhQUlJSUtHv37oaG
hurqamwmmzdv7t7xUBYSOcDVhzAiJV3SCQZZmUjUqlMbvUCc7oiUlpS7mc7D
2vCGFefmyMx01ist0NTX0a4CclkoyKla0nZl3c98CrbE0NBQbI/YtY4cOSK7
Vnh4+OrVq4uKivr8oAAAAO6AIAWayJTKYBUSpKRTkjF/C10b0fqW4tJwxRWn
R886KM6Pfrh54mMnHe7WtUbmzxyb7aIpnH2TaTVKs6TIUuBaANDn0KK0LZFi
GWTkV/6dmvacVu14w2sYchlhcP19k8ph8Qd/jQmND0gOCgxeviosNDo6GotW
TU3NwYMHo6Ki1q9fL4ez5AQtU+XS25Yw/W+gkJakxtMs0SdpZ2Tb+nCDu8UV
zbCrHnY3XayQhwNyt6NczKkpFrybLZUfhdDFW4glGmgkc4iBrDzeaVkTDxgP
Oy4ubvny5fv27autrV23bp3sWrGxsZs2bQLXAgDg14QjYsXzIiP5Fqknyku1
5PGzmUye4uwIxQWL352xU5wdqzg/8Yl6x7t1rdG5HqM3eOae2iyIZAOUSDIu
BKjVDAB9DglIGXmjVDqFudbM/sPt1tujDCozpHa+rLb5RvW8X2B88Ook/9Xe
If7fRiSkbNmypbq6+tixY2lpaVhCOjs7f3yrH6JbsmX1sZmIPxQuxqbF3DBU
rjOqx4oe5uK0J7h3rSm1o26qY6vaqtN9iO6tEZT/hwZ9O4c4muc4RlpERDxN
UrZ6Ttj6YeSpqalLly6tqKg4evTohg0b/Pz8wsLCsIBlZWWZFkkhXwsAgF8B
PNNwnE5AeukKltQ6xPM0mVgZ1Cled7v8yeNnnR45Y69oHqE4P/qp+jG96NHz
0R7v6+2tRrLVmxelq1FeBNcCgD6GZUk+AL580oksqaRVU8p5OIhKM0o5aLX7
uABvv5CEtMTgsAg//9CImI2pOVVVVc3Nzbm5uQEBAU1NTabte6ZcJlmxutfX
6qOBog5sSlJ5B1S5o8PdjvN4tl1pi1xH3vAaZnAZjFysWc+hrPrp9gXT0a1r
SCpHg3iKQUYSdmek7l49K5JJn7BfLV68uLy8HPtkZmYmdq3Q0FDsWunp6Vgm
TcfbZ8cFAADQE2RntQ6hTrKSSMvJWgK5hERkbXGzdvvTF155oGWE4pTdI6cd
/nhiwt261kub1FsbSzpIBzcBiUb8roKAYA0RAPoesjmPJgWoGFISgUYcv2M9
8nppz5Qx3gvmxaWkRwcFh/sF+/utSstbX76n+nTTld1bty+M8t61vxL/ECud
/Czp/cOQ7lmiIOtQ1ybAO4S2RJLZxQg8qZPatbpHbiKZXRhWasIosHL7U6RD
WoEUbpAiWzWbb8wcwUx72jjD3OBmwaiGs2oz1tVMUDl3TLHV/fM11FjS68sy
PKTNmzdj19qzZ099fX12dvaqVauwayUkJCQlJVEU1fcOCQAAcJdINXDI5Pt2
+ye/O2GrOD/60abxTzT0mBs/dPcb1qVv2ux6Y/yWqdY5rnaF0ydmqEYUqpZs
jriM2jl5wkY/5LVCXAsA+hweGUhrROxKxHe0JJLcWjD/7bkfvb08LXlleEhk
uE94aETWmozCgryG43UHtpeGRPts9F2BDJx0Wgo0WaDjEEU6dnFSZWHSGl4k
K3baO/TP4gWR/7GEgpzfJXA8LxjIFZaU/Y5EqWgWT+poSdImoA1pnW/adro9
afCyoabYMDNt26fbaF2Hs+62RpdnO//5PHuqEr9Y/Lm1wn/HFLDatm3bokWL
du7ciV0rJydHjmvFSxiNRohrAQDQ/wjk4pZCxgpd3ZMtE5+4MF5xeszTx3pc
QzQvfcN856u2216zK3xj3M7pDps1I/M8/rTO/cDV42S3EZ5peSSSbDBBlN8d
AIC+RSqsbmD1SKrEjgWp+HDFrDn/LywyNiIxI9IvJDBiZVhSVEFW4ammsxW1
NSEZCVtmq5DmVWFdhAEZOYboFC/qjAIykp6LPDltWZZMBDx+vufPFUhH1a4b
K/4oZV0poEYO6VhBL3AkgwAPjbp+kfH/GqlHUdMGU7Mc9Wor1s2GdrU3eAwz
ejh3TBnCLJjCXKxGUjUaw91/DSZ9Ki0tXbhwYXFx8bFjx/Ly8gICAmTXio6O
NhgMYFkAAPQ/AplBaalF9NJbiYrTw35/dvzv6sf35Fo2Za+Zlbw2olhpvu0N
p61TxhSqbdLVkVWxJKJF2vFwcrVnXp6ARVhFBIC+Bp9kDMm1kq5nuJbm5k/+
+VlAUGxKqG9MWGzwimD/1cEZhdlNB4+fqDudnlGQ8fe3WqZZt77zBPJyMC5e
gIROZCAp41K4B8nNcrBxMYgRScSL7uljSehLjn/JxbLErp+myFomK7IcLYq0
PD5aq7tyjv941rWZQ67P/L1uhpNh6jij0trgMZRS2xqmPMN7Weg/eY9ubSXT
BtXxw57Iu8MkUQcPHlywYEFRUVF9fX1+fn5gYGBISEhcXBw2LuxavfqKAQAA
+hJR6kpNlgAQq2V52wtuvztj9+ip53tyLdudf7baPc1hh9q6aKptwStOedO8
Chdc4VrJDCyvIwjyJkTp8pdl+vv4AOC3hiAY5LqgNI86DcaY0ODQ5d+uj06O
Wr3CLyIgbnVyyvrMiqr9pxvP5G/OCf/6n9fd7ShPG3bK0I73bK65PXvdwwHt
z8d+ZEBdy3yCyGDHopDAdPnb7eHxC4Qf414CiYmJtMhzZOmQI5Exmuw6pGgd
szHUMM3C6PYMrXquXT3ohnK4qHJGrnbaqU8bvAZ1vGXHLPsI6a4LlFwlXqB5
4Q41S+8MNq4TJ0588sknhYWFsmsFBQXJrhUQECC7FoS2AADoX4hrETGiOSka
VairUpy2/d2p0T25lnXJZJvdLsO3T3MqmDpmt9o5fVrRxV1Son3X4gLHCfIi
g8DxCPJRAaCvoZGR/aGDTXbe5g/nfhidEB4c6esbFPr1iq9z0zL3llfVnjhd
tG1nuv+i6nfGGN2eQ572aIr9TRerjlnDOff/1XrZ3FgxRzhzFLVfxu9HSjJI
TXS69gz2AE8y6gU5ZI3lSNplTJK0SHKmtN2G119jdyYLH0/jp1oYlRaM2oF2
s0UzR+qnDePdBrPqQfQ7jtq3xlIJPgjpjYIR3+NPbCNvLfQYTbsjcifHlpaW
uXPnbtmyBbvW5s2bgyWwa/n4+MiuBYnxAAD0M2QhQCfNshzDkooQ71xZ9NBR
q55cy670NbNtr5jvch29VemU6zZ7z2KDeItiuxYN8axLceTKl7SypZk7pNkC
ANA7jCwjV/jMy8qd9fa7kYlxIWui/FcHrQiJSclK3bWtuKHpTNn+/Ukh0Zv+
8T411Y6Zaq/VDGOUgw3uDh0eTsjNgnvjf41ez950t2W/fR+VbkGtt+SINPYu
lrvW8ydLhVywVQkiy5M2FMSxjB2kIdf3J+jCGPSZB1La6dRm7TOtOjws0bQJ
N6aZ6zXmWi/L1hmWOldb9OVs3eFtUh1lad2QCBrJ8O8gjRN7EwOXA1atra0f
ffRRXl4edq3CwsLQ0FDsWrGxscuXL9fpSN15cC0AAPoXaYZrp8gUypLNSYLh
ENNgfWJqj/la+1zMCyc771Hab1O9mDVrV2ulwFMkkwOJ+JqXXPZKW8jJ7iRo
RQYAvwSkqAK/s6rkvfemJ6+Oi4lKCAmN8lnuHRUbszU/+0xNY2X14bUbEiJC
/biWBjHmyw73UQbVIN30p1ilpfim4y2lrW6mLTttGKW2ZTTWhpn27fNe6Uj+
ijtehij6DvWsSIsvsSsvniCwqOPG1YYjaOU/dXOm3PCyu+lhqVXZMtPsWBdr
o2a4zmtwp9pWq7RArs+wbjZMblJn51Uk0FINVvxfUWp6LcXEpQ5ivUB2rba2
ttmzZ2/cuBG7VlFRUXh4eEhICHatpUuXarVaBK4FAEC/I5CpTkBaqZohKWt4
C934a6t/T641vGKaffErTkWvPlc07ZMjwTpS50FOz+oqtiPV3REEhpWSZgEA
+K+4ba7Rd999N2fOnNWrV0dGRkZFRfn6+kZERGDZOHz4cF1dXVZW1qJFi358
9ZHimwtm6V+3RJ6WbdPNbqrNGY0N4zJcVI9kXG2pqWac2ozxsLrubnPjgz8j
n9m68q3o3AnEGnhpe2DX6h7LdRVyYTv4C4c7t0TeWvqW8a3RyMVK52nW6WWm
dTc3qCxYV0vO1cagtO1Q2ejdrXjXYZ1ulvrAeejqKSw9HWTPY+9WC+/0zVAU
hV0rOzu7trZ2+/bt+DsJDg7GXwt2Lb1eD6IFAEC/I5r+I29qQoJWoL7X33qq
+c+DD7zy9Amnxw86PlPrYl3+4nMH/jSk7CWLXRrzsldGbp08onjm2RtNjCxU
/N1vIgIA4O7BgoHVYsWKFd9++y12rZiYmMDAQHy/fv36ysrKo0ePbt261dvb
GzuG3H+HmAYpescZqrcw8zTIxYzSPHvLfSincrri9Qz11lDkOVR0G4oFiVc7
Uyornetgg/qPBo9hHTPs2995XveRi/DlLLT0fXbxX/g5LxveHq9VOtEuTrzS
mVE7aN2t2jwsGBcL2sWKUtoZ3B06PWzbNMN1msGs52CDh12n31yxqVZKKpDL
KSMj3WcbA02Fs1iW/fDDDzMzM7FrFRcXY9cKCgqKjo5etmxZZ2cnuBYAAP1O
17Yjscu6eKltYidv9L2Z8GDd6Cdrxg468eqTe5+3qHzDYv8LQ8vfsNrp6lD6
8pAdLwcfie8ge72lDVGQlwUAvzxyBdFdu3bNnTtXrmkQEhKCvQJL1/79+xsa
GsrLy7Fp1NTUmDob4h/RI9bQoSep7SLTXlks+H2JPnK96GmFplkaXO2vq0ff
8Bh5S2OhUw8zuJvpPW10Gkud2sygMmPVZqR9oZc5qxmsc3ta5/Wc1v05g3ow
pzHn3a0olaVBZaHXWAoetnrN8E7NIINyMPEur0nsp39BIUvZU7sRq8Ofq9PL
MwxHM73Mgb/zd4L54IMP0tPTsWuVlJRgy5Jda+XKldevX4dNiAAA9DtddaDF
H0NbUoq70Ia0YxqUjx174akjb1hU/enJskn2Va8NK33dbsfrVqV/mlD6rp66
SSJaHI2vmKGyAwD8CmDR4nk+NTUVCxV2CXy/atUq/MedO3di0cKKFRwcnJ+f
L0dysGPInZcNpO+OVGeYlVYEaR5dOMGUpKGAedo5r+jczZGHGe9uo1Va6ZUW
tGoIcnHi3RwNSusOtcV15fBrbmZtKjuthzPSOFIqmzY3ixsqs5uaYVrVUFY1
FCmHG5XWxqlk1yH/sSsXv4SuKmBuXOKkiDctFdvixQ7StEdgRYbUOO1bZJWa
PXv22rVrsWvhrwKbZ2BgIL7HX86FCxfAtQAA6He6YlKSaJEGHKbyOiLaenXL
o/WTn6p7fXjlS88enDik7E3L8sm2pZOHlbyZ0bJFbp6GWHzJyt51dw0AAO4e
2bU2bNiQkJCAtcrf3z8qKionJweL1uHDh7FshIaGyq/s3leapaRiDqKOFTsY
cnWEiIPxLKIpofUqX1vNpoVp57vopltRnhZ6TxuD2qlTadOhNNN7mDEzLFgv
S0ZjzSitjC7mjJslUtoglR1S2TAaG8rLzvi2Y4ffPCo/ljtbzRmucrROoA1I
pESkRwwyUloj6qCRnlTwo6R0enSrD78QOaiFH8ydOzcpKQm71u7du2NjYwMC
ArBr4e+nsbERXAsAgH7nx2lIEH/swSGI5HqY5t+7sPj3NeOerJ40+NArQ8pf
tdz7wtDdE/6v9lueZxlSM1pgJFmDuBYA/ArIa4j79u0LCgqKjIwMCwvbsmVL
jUR2drafn1/3V3brA0jzIief2gzDcUhuHi0yP+hYVy8tikXnm7mK7WLKUib0
H/qv3PVzJhvfHUnNsNd7Wnfi20djjfNf5Za9w4R/qc2M66gq09+4QuJkUgEH
8jaksb1c/kXgRKlUqii1AGK6/lIv0EJvuvHc6QuRHyxcuDA+Ph67VmlpKX6A
LUuObuFvBlwLAIABQNdyA3ko/pi4xUhN1xoMJ+yPvPqHw8//ce8Uq8oXhpa+
NGK3y4H2o2RGZTleIIUC8VWz1KAHAIBfHHyqXrt2LSAgICQkZMOGDcXFxQ0N
Ddu2bcN/vHjxorxoSFFdO4B/yNoyks47RoYWeVqKXGMDEshFUjuHSKo63VWI
mIS2WSRqSexL2lMsl3P/oRkEqeUikPf8cboQUNe6JKniQFpQkOVLuQk1KZDK
y+ol7aDBQ5GC5n2XqN7dJ5ctWxYbG3vkyJHy8vKEhASsndi1goODsZeCawEA
MAAQbjv9icShSNlE/6tRgypeHFQ9ZdieSXZ7py2vD9eLpPYpZ6CwYjHSS8Ve
1SEEAOBn+XdVwM9gqcjKytq7d29jY+OuXbvWr19/9OjRn7z4x/13HLEdAymL
1aVEIglL6zhGbpFDQlz4RaKcvSlKbiS3SRVFikTASDceAWsaqa8lTxf4Oovm
OEb+OCm0RWJXQlc9Y45FjNRYkWN5hrwxCXXhd2DJj/N9Jlumg+V53sfHJyYm
Bn8t+DtJTEzErhUdHY1dq7S0FPYhAgAwAOiqi2XKjpcXEpGUxMoj4aS+6c9H
Zz1zcMygctXzldMbbzXoESvQZJozsEb8KlIEmobZDAB+PRiG0Wq17e3t169f
v3r1Kn5wHxqF7FrygUdGRoaGhmLX2rdvX1JSklxwLCEhIScnp/uLAQAABhgC
T6pTEwMLOR03qHbi0Ko/rzoe19+jAgDgX+A47v5s0dDdtWJjY0NCQmTXSk5O
9vPzCw8Pj4+Pz8zM7O9hAgAA9IwoIIElW4ZEZOQvvFTzruWR99rp7/t7WABw
v2PKU7rPMZW2wPcpKSlBQUHYtfbv35+ammpyLfy4v4cJAADQIzwvIpEmLW5J
2habdWN78o1i1Ne1cQAA6B3YMfj7u+lot42WKDMz09/fH7tWdXV1Wlqar68v
dq2EhASsW/09TAAAgB4hM7jIIJrCjwxyZ2qOZu+7lBAAuDe4D/O1ZOQo3+bN
m318fGpqag4fPrx+/fpVq1Zh10pMTIyIiEAQCQQAYKBCZm5RYAUjmaFIEUKp
gA7EtQCgvxEk5FpbJoW4b10LSSpVUlKyYsWKQ4cOYddKT0/H3oUtKykpKSAg
AIFrAQAwUOE5kqlFIY4WefwfPE/psW9xUNsBAAYE4g/090AGBOXl5d98882B
AwewbmVmZmLXCg8Px67l7e2NwLUAABjAGBhWulYmBXY4gSclt6BmKQAMAH5S
R+v+DGp1P+r9+/cvWbKkqqrq4MGDWVlZpjXEZcuWISj4AADAQIXjjWTBEE9R
nCA19eiqGg0AADAQMOXGY44fP/7VV19VVFQcPnwYu5ZcVx+71uLFi+WX3c+b
CAAAAAAAAP4bsE2dOnVq4cKF5eXl2LWys7MDAwNDQ0MTEhK++OKL7tsVAQAA
AAAAgP8ck0dduHDh008/3bNnT01NTW5ublBQUFhYWHx8PH4SgWgBAAAAAAD0
CnllEKtUa2vrvHnzdu7cWVtbu2nTJtm14uLi5s+fj+7vTZoAAAAAAAC9xuRa
bW1tH3/88fbt2+vq6rZs2RIcHBwSEoJd67PPPoNNiAAAAAAAAL3DJFGdnZ3Y
tQoLC48ePVpQUBAsER8f/+WXXxoMhv4dJAAAAAAAwL2LrFtarfaTTz7ZvHnz
sWPHsHGFhobKrrVo0aLW1tb+HiMAAAAAAMC9h2xZci4Wdq358+fn5+fX19dj
1woLCzO5VktLC6whAgAAAAAA9Bqe541G45IlSzZs2NDQ0FBUVBQZGRkYGIhd
a+XKlXV1df09QAAAAAAAgHsYQRAoilq2bFl6ejp2rW3btkVFRcmu5e3tffDg
wf4eIAAAAAAAwD2MKIrYtXx8fNatW3fixIni4uLo6GjsWrGxsX5+fuXl5bCG
CAAAAAAA8N+AXQvL1dq1a7FrlZSUrF69OiAgAN8HBwcXFRWBawEAAAAAAPw3
YNeKiIhYs2YNdq0dO3bExMT4+/tHRUVFRkZmZ2f39+gAAAAAAADuPbo3OsSu
FRcXFx8f39jYuGvXLvwYuxa2L/wgJSWlv0cKAAAAAABwb0PTdHJyMjYr7Fp7
9uxJSEgICAgIDw9PSkqKjY3t79EBAAAAAADc2zAMk5qairXq5MmTZWVliYmJ
smthAYuMjOzv0QEAAAAAANzb0DSdlZUVEREhx7XWrl3r7++PLQu7lp+fH/Se
BgAAAAAA6B1y+2lMTk5OWFgYdq2qqqqoqChfX99oiaCgoP4dIQAAAAAAwL2I
ybIYhsH3hYWFwcHBDQ0NlZWVa9aswd4VERGRmJj41VdfsSzbryMFAAAAAAC4
9zC5Fsdx+H737t3e3t7YtcrLy9etW/ftt99i9UpNTV22bBlN01BiCwAAAAAA
4G5hWdYkUbW1tdi16urqqqur09LSQiQSExPxY/SDjwEAAADAb5j/D1QXMXs=

     "], {{0, 276}, {804, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSizeRaw->{804, 276},
   PlotRange->{{0, 804}, {0, 276}}]], "Input"],
 "\n\n"
}], "Text",
 CellChangeTimes->{{3.766734006836011*^9, 3.7667340510550127`*^9}, {
   3.766734221836088*^9, 3.76673422905161*^9}, {3.766734578375074*^9, 
   3.766734578991417*^9}, {3.7667346100670557`*^9, 3.7667346296570673`*^9}, {
   3.76673468307583*^9, 3.766734768428916*^9}, {3.766734799482288*^9, 
   3.766734812053259*^9}, 3.7667348981778517`*^9, {3.766734939806645*^9, 
   3.7667349593978577`*^9}, {3.7667352759540367`*^9, 
   3.7667352902347307`*^9}, {3.76674437057404*^9, 3.766744373669269*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"drawAPI", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<p\>\"", ",", "\"\<p\>\"", ",", "\"\<r\>\"", ",", "\"\<p\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Pi", "/", "2"}], ",", 
      RowBox[{"Pi", "/", "2"}], ",", 
      RowBox[{"Pi", "/", "2"}], ",", "0"}], "}"}]}], "}"}], "]"}]], "Code",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{{3.766732822854618*^9, 3.766732853698729*^9}, {
  3.7667405225684137`*^9, 3.766740623640614*^9}, {3.76674066945008*^9, 
  3.766740669761703*^9}, {3.7667407906376038`*^9, 3.7667408342696323`*^9}, {
  3.766740888392727*^9, 3.766740920343566*^9}, {3.766740964555068*^9, 
  3.766741066298933*^9}, {3.766741182613991*^9, 3.766741193974172*^9}, {
  3.7667414234437637`*^9, 3.7667414322834377`*^9}, {3.766742761683202*^9, 
  3.766742804889868*^9}, {3.7667435941402197`*^9, 3.766743611837201*^9}, {
  3.766743754967668*^9, 3.7667437684624977`*^9}, {3.766743818467431*^9, 
  3.7667438800100718`*^9}, {3.766743914067481*^9, 3.766743914786619*^9}, {
  3.7667439681807632`*^9, 3.766743993292017*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{robotica`Private`g$$548$$550$$552$$554$$ = 1, 
    robotica`Private`params$$548$$550$$552$$554$$ = {0, 0, 0, 0, 0, 0}, 
    robotica`Private`planei$$548$$550$$552$$554$$ = 0, 
    robotica`Private`showRobot$$548$$550$$552$$554$$ = True, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[FE`robotica`Private`params$$548$$550$$552$$554], {0, 0, 0, 0, 0, 
       0}}}, {
      Hold[
       Dynamic[
        Grid[
         Table[
          With[{robotica`Private`p$ = robotica`Private`i}, 
           If[
            robotica`isPrismatic[
             Part[{"p", "p", "r", "p"}, robotica`Private`p$]], {
             Subscript["d", robotica`Private`p$], 
             Slider[
              Dynamic[
               Part[
               FE`robotica`Private`params$$548$$550$$552$$554, 
                robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
             Dynamic[
              Part[
              FE`robotica`Private`params$$548$$550$$552$$554, 
               robotica`Private`p$]]}, {
             Subscript["\[Theta]", robotica`Private`p$], 
             Slider[
              Dynamic[
               Part[
               FE`robotica`Private`params$$548$$550$$552$$554, 
                robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> Small], 
             
             Dynamic[
              Part[
              FE`robotica`Private`params$$548$$550$$552$$554, 
               robotica`Private`p$]]}]], {robotica`Private`i, 4}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[FE`robotica`Private`g$$548$$550$$552$$554], 1, "grip"}, 0, 1, 
      0.01}, {{
       Hold[FE`robotica`Private`showRobot$$548$$550$$552$$554], True, 
       "show robot"}, {True, False}}, {{
       Hold[FE`robotica`Private`planei$$548$$550$$552$$554], 0, "xy Plane"}, 
      0, 4, 1}}, Typeset`size$$ = {425., {210., 215.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False, 
    robotica`Private`g$$548$$550$$552$$554$956$$ = 0, 
    robotica`Private`showRobot$$548$$550$$552$$554$957$$ = False, 
    robotica`Private`planei$$548$$550$$552$$554$958$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       robotica`Private`g$$548$$550$$552$$554$$ = 1, 
        robotica`Private`params$$548$$550$$552$$554$$ = {0, 0, 0, 0, 0, 0}, 
        robotica`Private`planei$$548$$550$$552$$554$$ = 0, 
        robotica`Private`showRobot$$548$$550$$552$$554$$ = True}, 
      "ControllerVariables" :> {
        Hold[
        robotica`Private`g$$548$$550$$552$$554$$, 
         robotica`Private`g$$548$$550$$552$$554$956$$, 0], 
        Hold[
        robotica`Private`showRobot$$548$$550$$552$$554$$, 
         robotica`Private`showRobot$$548$$550$$552$$554$957$$, False], 
        Hold[
        robotica`Private`planei$$548$$550$$552$$554$$, 
         robotica`Private`planei$$548$$550$$552$$554$958$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> (Chop[
         Manipulate[
         Chop["/home/students/fapohund/Projects/robotica", 10^(-10)]; 
          Module[{robotica`Private`jr$ = 1/10, robotica`Private`ar$ = 1/40, 
             robotica`Private`Td$, robotica`Private`j$, robotica`Private`i$, 
             robotica`Private`d$, robotica`Private`theta$}, 
            robotica`Private`d$ = Range[6]; 
            robotica`Private`theta$ = Range[6]; 
            For[robotica`Private`i$ = 1, robotica`Private`i$ <= 3, 
              Increment[robotica`Private`i$], If[
                robotica`isPrismatic[
                 Part[{"r", "r", "p"}, robotica`Private`i$]], 
                Part[robotica`Private`theta$, robotica`Private`i$] = 0; 
                Part[robotica`Private`d$, robotica`Private`i$] = 
                 Part[FE`robotica`Private`params$$548$$550$$552, 
                   robotica`Private`i$], 
                Part[robotica`Private`theta$, robotica`Private`i$] = 
                 Part[
                  FE`robotica`Private`params$$548$$550$$552, 
                   robotica`Private`i$]; 
                Part[robotica`Private`d$, robotica`Private`i$] = 0; Null]; 
              Null]; robotica`Private`Td$[1] = Dot[
               RotationTransform[
                Part[robotica`Private`theta$, 1], {0, 0, 1}], 
               TranslationTransform[{0, 0, 
                 Part[robotica`Private`d$, 1]}], 
               TranslationTransform[{
                 Part[{1, 1, 1}, 1], 0, 0}], 
               RotationTransform[
                Part[{0, Pi, Rational[1, 2] Pi}, 1], {1, 0, 0}]]; 
            For[robotica`Private`j$ = 2, robotica`Private`j$ <= 3, 
              Increment[robotica`Private`j$], 
              robotica`Private`Td$[robotica`Private`j$] = Dot[
                 robotica`Private`Td$[robotica`Private`j$ - 1], 
                 RotationTransform[
                  Part[robotica`Private`theta$, robotica`Private`j$], {0, 0, 
                  1}], 
                 TranslationTransform[{0, 0, 
                   Part[robotica`Private`d$, robotica`Private`j$]}], 
                 TranslationTransform[{
                   Part[{1, 1, 1}, robotica`Private`j$], 0, 0}], 
                 RotationTransform[
                  Part[{0, Pi, Rational[1, 2] Pi}, robotica`Private`j$], {1, 
                  0, 0}]]; Null]; Graphics3D[{{LightBrown, 
                Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
               If[
                robotica`isRevolutionary[
                 Part[{"r", "r", "p"}, 1]], 
                robotica`drawJoint[
                 Part[{"r", "r", "p"}, 1], 
                 Part[robotica`Private`d$, 1], 
                 Part[{1, 1, 1}, 1], 
                 Part[FE`robotica`Private`params$$548$$550$$552, 1], 
                 OptionValue[
                 robotica`drawRobot, {{
                   robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                  robotica`Private`showArrows]], 
                robotica`drawJoint[
                 Part[{"r", "r", "p"}, 1], 
                 Part[FE`robotica`Private`params$$548$$550$$552, 1], 
                 Part[{1, 1, 1}, 1], 
                 Part[robotica`Private`theta$, 1]], 
                OptionValue[
                robotica`drawRobot, {{
                  robotica`Private`showArrows -> True, robotica`Private`showH -> 
                   True, robotica`Private`showManipEllipse -> False, 
                   robotica`Private`showPlanes -> False}}, 
                 robotica`Private`showArrows]], 
               If[3 == 1, 
                GeometricTransformation[
                 robotica`drawGripper[FE`robotica`Private`g$$548$$550$$552, 0, 
                  OptionValue[
                  robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                   robotica`Private`showArrows]], 
                 Chop[
                  robotica`Private`Td$[3]]], 
                If[FE`robotica`Private`showRobot$$548$$550$$552, 
                 Table[
                  If[
                   robotica`isRevolutionary[
                    Part[{"r", "r", "p"}, robotica`Private`i$]], 
                   GeometricTransformation[
                    robotica`drawJoint[
                    Part[{"r", "r", "p"}, robotica`Private`i$], 
                    Part[robotica`Private`d$, robotica`Private`i$], 
                    Part[{1, 1, 1}, robotica`Private`i$], 
                    Part[
                    FE`robotica`Private`params$$548$$550$$552, 
                    robotica`Private`i$], 
                    OptionValue[
                    robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                    robotica`Private`showArrows]], 
                    robotica`Private`Td$[robotica`Private`i$ - 1]], 
                   GeometricTransformation[
                    robotica`drawJoint[
                    Part[{"r", "r", "p"}, robotica`Private`i$], 
                    Part[
                    FE`robotica`Private`params$$548$$550$$552, 
                    robotica`Private`i$], 
                    Part[{1, 1, 1}, robotica`Private`i$], 
                    Part[robotica`Private`theta$, robotica`Private`i$], 
                    OptionValue[
                    robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                    robotica`Private`showArrows]], 
                    robotica`Private`Td$[robotica`Private`i$ - 1]]], {
                  robotica`Private`i$, 2, 3}]]], 
               GeometricTransformation[
                robotica`drawGripper[
                FE`robotica`Private`g$$548$$550$$552, 0, 
                 OptionValue[
                 robotica`drawRobot, {{
                   robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                  robotica`Private`showArrows]], 
                Chop[
                 robotica`Private`Td$[3]]], 
               If[
                OptionValue[
                robotica`drawRobot, {{
                  robotica`Private`showArrows -> True, robotica`Private`showH -> 
                   True, robotica`Private`showManipEllipse -> False, 
                   robotica`Private`showPlanes -> False}}, 
                 robotica`Private`showPlanes], 
                GeometricTransformation[{Thick, {Blue, 
                   Rotate[
                    robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                   Text[
                    Subscript[
                    "x", FE`robotica`Private`planei$$548$$550$$552], {
                    0.9, 0.2, 0}]}, {Green, 
                   Rotate[
                    robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                   Text[
                    Subscript[
                    "y", FE`robotica`Private`planei$$548$$550$$552], {
                    0.2, 0.9, 0}]}, Blue, 
                  Opacity[0.2], 
                  Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
                 
                 If[FE`robotica`Private`planei$$548$$550$$552 > 0, 
                  robotica`Private`Td$[
                  FE`robotica`Private`planei$$548$$550$$552], 
                  IdentityMatrix[4]; Null]]], 
               If[
                OptionValue[
                robotica`drawRobot, {{
                  robotica`Private`showArrows -> True, robotica`Private`showH -> 
                   True, robotica`Private`showManipEllipse -> False, 
                   robotica`Private`showPlanes -> False}}, 
                 robotica`Private`showH], 
                Text[
                 StringForm[
                 "\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
                  MatrixForm[
                   N[
                    Chop[
                    robotica`Private`Td$[3]], 2]]], {0, 0, -3.2}]]}, 
              SphericalRegion -> True, ImageSize -> 425, Boxed -> False]], {{
           FE`robotica`Private`params$$548$$550$$552, {0, 0, 0, 0, 0, 0}}, 
           ControlType -> None}, 
          Dynamic[
           Grid[
            Table[
             With[{robotica`Private`p$ = robotica`Private`i}, 
              If[
               robotica`isPrismatic[
                Part[{"r", "r", "p"}, robotica`Private`p$]], {
                Subscript["d", robotica`Private`p$], 
                Slider[
                 Dynamic[
                  Part[
                  FE`robotica`Private`params$$548$$550$$552, 
                   robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
                Dynamic[
                 Part[
                 FE`robotica`Private`params$$548$$550$$552, 
                  robotica`Private`p$]]}, {
                Subscript["\[Theta]", robotica`Private`p$], 
                Slider[
                 Dynamic[
                  Part[
                  FE`robotica`Private`params$$548$$550$$552, 
                   robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> 
                 Small], 
                Dynamic[
                 Part[
                 FE`robotica`Private`params$$548$$550$$552, 
                  robotica`Private`p$]]}]], {robotica`Private`i, 3}]]], 
          Delimiter, {{FE`robotica`Private`g$$548$$550$$552, 1, "grip"}, 0, 1,
            0.01, ImageSize -> Small, Appearance -> "Labeled"}, {{
           FE`robotica`Private`showRobot$$548$$550$$552, True, 
            "show robot"}, {True, False}}, {{
           FE`robotica`Private`planei$$548$$550$$552, 0, "xy Plane"}, 0, 3, 1,
            ImageSize -> Small, Appearance -> "Labeled", ControlType -> None},
           ControlPlacement -> Left, SaveDefinitions -> True], 10^(-10)]; 
       Module[{robotica`Private`jr$ = 1/10, robotica`Private`ar$ = 1/40, 
          robotica`Private`Td$, robotica`Private`j$, robotica`Private`i$, 
          robotica`Private`d$, robotica`Private`theta$}, 
         robotica`Private`d$ = Range[6]; robotica`Private`theta$ = Range[6]; 
         For[robotica`Private`i$ = 1, robotica`Private`i$ <= 4, 
           Increment[robotica`Private`i$], If[
             robotica`isPrismatic[
              Part[{"p", "p", "r", "p"}, robotica`Private`i$]], 
             Part[robotica`Private`theta$, robotica`Private`i$] = 0; 
             Part[robotica`Private`d$, robotica`Private`i$] = 
              Part[robotica`Private`params$$548$$550$$552$$554$$, 
                robotica`Private`i$], 
             Part[robotica`Private`theta$, robotica`Private`i$] = 
              Part[robotica`Private`params$$548$$550$$552$$554$$, 
                robotica`Private`i$]; 
             Part[robotica`Private`d$, robotica`Private`i$] = 0; Null]; Null]; 
         robotica`Private`Td$[1] = Dot[
            RotationTransform[
             Part[robotica`Private`theta$, 1], {0, 0, 1}], 
            TranslationTransform[{0, 0, 
              Part[robotica`Private`d$, 1]}], 
            TranslationTransform[{
              Part[{0, 0, 0, 0}, 1], 0, 0}], 
            RotationTransform[
             
             Part[{Rational[1, 2] Pi, Rational[1, 2] Pi, Rational[1, 2] Pi, 
               0}, 1], {1, 0, 0}]]; 
         For[robotica`Private`j$ = 2, robotica`Private`j$ <= 4, 
           Increment[robotica`Private`j$], 
           robotica`Private`Td$[robotica`Private`j$] = Dot[
              robotica`Private`Td$[robotica`Private`j$ - 1], 
              RotationTransform[
               Part[robotica`Private`theta$, robotica`Private`j$], {0, 0, 1}], 
              TranslationTransform[{0, 0, 
                Part[robotica`Private`d$, robotica`Private`j$]}], 
              TranslationTransform[{
                Part[{0, 0, 0, 0}, robotica`Private`j$], 0, 0}], 
              RotationTransform[
               
               Part[{Rational[1, 2] Pi, Rational[1, 2] Pi, Rational[1, 2] Pi, 
                 0}, robotica`Private`j$], {1, 0, 0}]]; Null]; 
         Graphics3D[{{LightBrown, 
             Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
            If[
             robotica`isRevolutionary[
              Part[{"p", "p", "r", "p"}, 1]], 
             robotica`drawJoint[
              Part[{"p", "p", "r", "p"}, 1], 
              Part[robotica`Private`d$, 1], 
              Part[{0, 0, 0, 0}, 1], 
              Part[robotica`Private`params$$548$$550$$552$$554$$, 1], 
              OptionValue[
              robotica`drawRobot, {{
                robotica`Private`showArrows -> True, robotica`Private`showH -> 
                 True, robotica`Private`showManipEllipse -> False, 
                 robotica`Private`showPlanes -> False}}, 
               robotica`Private`showArrows]], 
             robotica`drawJoint[
              Part[{"p", "p", "r", "p"}, 1], 
              Part[robotica`Private`params$$548$$550$$552$$554$$, 1], 
              Part[{0, 0, 0, 0}, 1], 
              Part[robotica`Private`theta$, 1]], 
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showArrows]], 
            If[4 == 1, 
             GeometricTransformation[
              robotica`drawGripper[
              robotica`Private`g$$548$$550$$552$$554$$, 0, 
               OptionValue[
               robotica`drawRobot, {{
                 robotica`Private`showArrows -> True, robotica`Private`showH -> 
                  True, robotica`Private`showManipEllipse -> False, 
                  robotica`Private`showPlanes -> False}}, 
                robotica`Private`showArrows]], 
              Chop[
               robotica`Private`Td$[4]]], 
             If[robotica`Private`showRobot$$548$$550$$552$$554$$, 
              Table[
               If[
                robotica`isRevolutionary[
                 Part[{"p", "p", "r", "p"}, robotica`Private`i$]], 
                GeometricTransformation[
                 robotica`drawJoint[
                  Part[{"p", "p", "r", "p"}, robotica`Private`i$], 
                  Part[robotica`Private`d$, robotica`Private`i$], 
                  Part[{0, 0, 0, 0}, robotica`Private`i$], 
                  Part[
                  robotica`Private`params$$548$$550$$552$$554$$, 
                   robotica`Private`i$], 
                  OptionValue[
                  robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                   robotica`Private`showArrows]], 
                 robotica`Private`Td$[robotica`Private`i$ - 1]], 
                GeometricTransformation[
                 robotica`drawJoint[
                  Part[{"p", "p", "r", "p"}, robotica`Private`i$], 
                  Part[
                  robotica`Private`params$$548$$550$$552$$554$$, 
                   robotica`Private`i$], 
                  Part[{0, 0, 0, 0}, robotica`Private`i$], 
                  Part[robotica`Private`theta$, robotica`Private`i$], 
                  OptionValue[
                  robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                   robotica`Private`showArrows]], 
                 robotica`Private`Td$[robotica`Private`i$ - 1]]], {
               robotica`Private`i$, 2, 4}]]], 
            GeometricTransformation[
             robotica`drawGripper[robotica`Private`g$$548$$550$$552$$554$$, 0, 
              OptionValue[
              robotica`drawRobot, {{
                robotica`Private`showArrows -> True, robotica`Private`showH -> 
                 True, robotica`Private`showManipEllipse -> False, 
                 robotica`Private`showPlanes -> False}}, 
               robotica`Private`showArrows]], 
             Chop[
              robotica`Private`Td$[4]]], 
            If[
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showPlanes], 
             GeometricTransformation[{Thick, {Blue, 
                Rotate[
                 robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                Text[
                 Subscript[
                 "x", robotica`Private`planei$$548$$550$$552$$554$$], {
                 0.9, 0.2, 0}]}, {Green, 
                Rotate[
                 robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                Text[
                 Subscript[
                 "y", robotica`Private`planei$$548$$550$$552$$554$$], {
                 0.2, 0.9, 0}]}, Blue, 
               Opacity[0.2], 
               Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
              If[robotica`Private`planei$$548$$550$$552$$554$$ > 0, 
               robotica`Private`Td$[
               robotica`Private`planei$$548$$550$$552$$554$$], 
               IdentityMatrix[4]; Null]]], 
            If[
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showH], 
             Text[
              StringForm["\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
               MatrixForm[
                N[
                 Chop[
                  robotica`Private`Td$[4]], 2]]], {0, 0, -3.2}]]}, 
           SphericalRegion -> True, ImageSize -> 425, Boxed -> False]]), 
      "Specifications" :> {{{
         robotica`Private`params$$548$$550$$552$$554$$, {0, 0, 0, 0, 0, 0}}, 
         ControlType -> None}, 
        Dynamic[
         Grid[
          Table[
           With[{robotica`Private`p$ = robotica`Private`i}, 
            If[
             robotica`isPrismatic[
              Part[{"p", "p", "r", "p"}, robotica`Private`p$]], {
              Subscript["d", robotica`Private`p$], 
              Slider[
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$554$$, 
                 robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
              Dynamic[
               Part[
               robotica`Private`params$$548$$550$$552$$554$$, 
                robotica`Private`p$]]}, {
              Subscript["\[Theta]", robotica`Private`p$], 
              Slider[
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$554$$, 
                 robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> Small], 
              Dynamic[
               Part[
               robotica`Private`params$$548$$550$$552$$554$$, 
                robotica`Private`p$]]}]], {robotica`Private`i, 4}]]], 
        Delimiter, {{robotica`Private`g$$548$$550$$552$$554$$, 1, "grip"}, 0, 
         1, 0.01, ImageSize -> Small, Appearance -> "Labeled"}, {{
         robotica`Private`showRobot$$548$$550$$552$$554$$, True, 
          "show robot"}, {True, False}}, {{
         robotica`Private`planei$$548$$550$$552$$554$$, 0, "xy Plane"}, 0, 4, 
         1, ImageSize -> Small, Appearance -> "Labeled", ControlType -> 
         None}}, "Options" :> {ControlPlacement -> Left}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{693., {242., 252.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({
      Attributes[robotica`Private`jr$] = {Temporary}, 
       Attributes[robotica`Private`ar$] = {Temporary}, 
       Attributes[robotica`Private`Td$] = {Temporary}, 
       Attributes[robotica`Private`j$] = {Temporary}, 
       Attributes[robotica`Private`i$] = {Temporary}, 
       Attributes[robotica`Private`d$] = {Temporary}, 
       Attributes[robotica`Private`theta$] = {Temporary}, robotica`isPrismatic[
         Pattern[robotica`Private`jtype, 
          Blank[String]]] := 
       MemberQ[{"Prismatic", "prismatic", "P", "p"}, robotica`Private`jtype], 
       
       TagSet[robotica`isPrismatic, 
        MessageName[robotica`isPrismatic, "usage"], ""], 
       FE`robotica`Private`params$$548$$550$$552 = {0, 0, 0, 0, 0, 0}, 
       robotica`isRevolutionary[
         Pattern[robotica`Private`jtype, 
          Blank[String]]] := 
       MemberQ[{"Revolute", "revolute", "R", "r"}, robotica`Private`jtype], 
       TagSet[robotica`isRevolutionary, 
        MessageName[robotica`isRevolutionary, "usage"], ""], 
       robotica`drawJoint[
         Pattern[robotica`Private`j, 
          Blank[]], 
         Pattern[robotica`Private`d, 
          Blank[]], 
         Pattern[robotica`Private`r, 
          Blank[]], 
         Pattern[robotica`Private`theta, 
          Blank[]], 
         Optional[
          Pattern[robotica`Private`showArrow, 
           Blank[]], True]] := 
       Module[{robotica`Private`jr = 1/5, robotica`Private`ar = 1/20, 
          robotica`Private`pr = 1/7, robotica`Private`vr = 1/6}, {
          If[robotica`Private`showArrow, 
           robotica`drawCoordAxes[robotica`Private`jr]], 
          Opacity[1], {
           Opacity[0.5], Gray, 
           If[
            robotica`isPrismatic[robotica`Private`j], 
            
            Cuboid[{-robotica`Private`ar, -robotica`Private`ar, -1 + 
              robotica`Private`d - robotica`Private`jr - 0.01}, {
             robotica`Private`ar, robotica`Private`ar, robotica`Private`d + 
              0.01}], 
            
            Cylinder[{{
              0, 0, Min[-robotica`Private`ar, robotica`Private`d - 
                 robotica`Private`jr] - 0.01}, {
              0, 0, Max[robotica`Private`ar, robotica`Private`d] + 0.01}}, 
             robotica`Private`ar]]}, {LightBlue, 
           If[
            robotica`isPrismatic[robotica`Private`j], {
             Cuboid[{-robotica`Private`jr, -robotica`Private`jr, -
               robotica`Private`jr}, {
              robotica`Private`jr, robotica`Private`jr, robotica`Private`jr - 
               0.1}], 
             Cuboid[{-robotica`Private`jr, -robotica`Private`jr, 
               Plus[robotica`Private`jr]}, {
              robotica`Private`jr, robotica`Private`jr, robotica`Private`jr + 
               0.05}]}, {
             
             Cylinder[{{0, 0, -robotica`Private`jr - 0.1}, {
               0, 0, robotica`Private`jr + 0.1}}, 0.9 robotica`Private`jr]}]}, 
          Rotate[{
            Opacity[0.5], Gray, 
            
            Cuboid[{-robotica`Private`ar, -robotica`Private`ar, 
              robotica`Private`d - robotica`Private`ar}, {
             robotica`Private`r, robotica`Private`ar, robotica`Private`d + 
              robotica`Private`ar}]}, robotica`Private`theta, {0, 0, 1}]}], 
       TagSet[robotica`drawJoint, 
        MessageName[robotica`drawJoint, "usage"], ""], 
       robotica`drawCoordAxes[
         Pattern[robotica`Private`jr, 
          Blank[]]] := {Thick, {Red, 
          robotica`drawZArrow[robotica`Private`jr]}, {Blue, 
          Rotate[
           robotica`drawZArrow[robotica`Private`jr], Pi/2, {0, 1, 0}]}, {
         Green, 
          Rotate[
           robotica`drawZArrow[robotica`Private`jr], -(Pi/2), {1, 0, 0}]}}, 
       TagSet[robotica`drawCoordAxes, 
        MessageName[robotica`drawCoordAxes, "usage"], ""], robotica`drawZArrow[
         Pattern[robotica`Private`jr, 
          Blank[]]] := 
       Line[{{{0, 0, 0}, {0, 0, 2 robotica`Private`jr}}, {{
           0, 0, 2 robotica`Private`jr}, {
           1/32, 0, (3 robotica`Private`jr)/2}}, {{
           0, 0, 2 robotica`Private`jr}, {(-1)/32, 0, (3 robotica`Private`jr)/
            2}}, {{0, 0, 2 robotica`Private`jr}, {
           0, 1/32, (3 robotica`Private`jr)/2}}, {{
           0, 0, 2 robotica`Private`jr}, {
           0, (-1)/32, (3 robotica`Private`jr)/2}}}], 
       TagSet[robotica`drawZArrow, 
        MessageName[robotica`drawZArrow, "usage"], ""], robotica`drawRobot[
         Pattern[robotica`Private`dof$, 
          Blank[]], 
         Pattern[robotica`Private`r$, 
          Blank[]], 
         Pattern[robotica`Private`alpha$, 
          Blank[]], 
         Pattern[robotica`Private`jointtype$, 
          Blank[]], 
         OptionsPattern[]] := Manipulate[Chop[
           Out[], 10^(-10)]; 
         Module[{robotica`Private`jr$ = 1/10, robotica`Private`ar$ = 1/40, 
            robotica`Private`Td$, robotica`Private`j$, robotica`Private`i$, 
            robotica`Private`d$, robotica`Private`theta$}, 
           robotica`Private`d$ = Range[6]; robotica`Private`theta$ = Range[6]; 
           For[robotica`Private`i$ = 1, robotica`Private`i$ <= 
             robotica`Private`dof$, 
             Increment[robotica`Private`i$], If[
               robotica`isPrismatic[
                Part[robotica`Private`jointtype$, robotica`Private`i$]], 
               Part[robotica`Private`theta$, robotica`Private`i$] = 0; 
               Part[robotica`Private`d$, robotica`Private`i$] = 
                Part[robotica`Private`params$$548$$550$$552$$554$$, 
                  robotica`Private`i$], 
               Part[robotica`Private`theta$, robotica`Private`i$] = 
                Part[robotica`Private`params$$548$$550$$552$$554$$, 
                  robotica`Private`i$]; 
               Part[robotica`Private`d$, robotica`Private`i$] = 0; Null]; 
             Null]; robotica`Private`Td$[1] = Dot[
              RotationTransform[
               Part[robotica`Private`theta$, 1], {0, 0, 1}], 
              TranslationTransform[{0, 0, 
                Part[robotica`Private`d$, 1]}], 
              TranslationTransform[{
                Part[robotica`Private`r$, 1], 0, 0}], 
              RotationTransform[
               Part[robotica`Private`alpha$, 1], {1, 0, 0}]]; 
           For[robotica`Private`j$ = 2, robotica`Private`j$ <= 
             robotica`Private`dof$, 
             Increment[robotica`Private`j$], 
             robotica`Private`Td$[robotica`Private`j$] = Dot[
                robotica`Private`Td$[robotica`Private`j$ - 1], 
                RotationTransform[
                 Part[robotica`Private`theta$, robotica`Private`j$], {0, 0, 
                 1}], 
                TranslationTransform[{0, 0, 
                  Part[robotica`Private`d$, robotica`Private`j$]}], 
                TranslationTransform[{
                  Part[robotica`Private`r$, robotica`Private`j$], 0, 0}], 
                RotationTransform[
                 Part[robotica`Private`alpha$, robotica`Private`j$], {1, 0, 
                 0}]]; Null]; Graphics3D[{{LightBrown, 
               Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
              If[
               robotica`isRevolutionary[
                Part[robotica`Private`jointtype$, 1]], 
               robotica`drawJoint[
                Part[robotica`Private`jointtype$, 1], 
                Part[robotica`Private`d$, 1], 
                Part[robotica`Private`r$, 1], 
                Part[robotica`Private`params$$548$$550$$552$$554$$, 1], 
                OptionValue[robotica`Private`showArrows]], 
               robotica`drawJoint[
                Part[robotica`Private`jointtype$, 1], 
                Part[robotica`Private`params$$548$$550$$552$$554$$, 1], 
                Part[robotica`Private`r$, 1], 
                Part[robotica`Private`theta$, 1]], 
               OptionValue[robotica`Private`showArrows]], 
              If[robotica`Private`dof$ == 1, 
               GeometricTransformation[
                robotica`drawGripper[
                robotica`Private`g$$548$$550$$552$$554$$, 0, 
                 OptionValue[robotica`Private`showArrows]], 
                Chop[
                 robotica`Private`Td$[robotica`Private`dof$]]], 
               If[robotica`Private`showRobot$$548$$550$$552$$554$$, 
                Table[
                 If[
                  robotica`isRevolutionary[
                   Part[robotica`Private`jointtype$, robotica`Private`i$]], 
                  GeometricTransformation[
                   robotica`drawJoint[
                    Part[robotica`Private`jointtype$, robotica`Private`i$], 
                    Part[robotica`Private`d$, robotica`Private`i$], 
                    Part[robotica`Private`r$, robotica`Private`i$], 
                    Part[
                    robotica`Private`params$$548$$550$$552$$554$$, 
                    robotica`Private`i$], 
                    OptionValue[robotica`Private`showArrows]], 
                   robotica`Private`Td$[robotica`Private`i$ - 1]], 
                  GeometricTransformation[
                   robotica`drawJoint[
                    Part[robotica`Private`jointtype$, robotica`Private`i$], 
                    Part[
                    robotica`Private`params$$548$$550$$552$$554$$, 
                    robotica`Private`i$], 
                    Part[robotica`Private`r$, robotica`Private`i$], 
                    Part[robotica`Private`theta$, robotica`Private`i$], 
                    OptionValue[robotica`Private`showArrows]], 
                   robotica`Private`Td$[robotica`Private`i$ - 1]]], {
                 robotica`Private`i$, 2, robotica`Private`dof$}]]], 
              GeometricTransformation[
               robotica`drawGripper[
               robotica`Private`g$$548$$550$$552$$554$$, 0, 
                OptionValue[robotica`Private`showArrows]], 
               Chop[
                robotica`Private`Td$[robotica`Private`dof$]]], 
              If[
               OptionValue[robotica`Private`showPlanes], 
               GeometricTransformation[{Thick, {Blue, 
                  Rotate[
                   robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                  Text[
                   Subscript[
                   "x", robotica`Private`planei$$548$$550$$552$$554$$], {
                   0.9, 0.2, 0}]}, {Green, 
                  Rotate[
                   robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                  Text[
                   Subscript[
                   "y", robotica`Private`planei$$548$$550$$552$$554$$], {
                   0.2, 0.9, 0}]}, Blue, 
                 Opacity[0.2], 
                 Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
                If[robotica`Private`planei$$548$$550$$552$$554$$ > 0, 
                 robotica`Private`Td$[
                 robotica`Private`planei$$548$$550$$552$$554$$], 
                 IdentityMatrix[4]; Null]]], 
              If[
               OptionValue[robotica`Private`showH], 
               Text[
                StringForm[
                "\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
                 MatrixForm[
                  N[
                   Chop[
                    robotica`Private`Td$[robotica`Private`dof$]], 2]]], {
                0, 0, -3.2}]]}, SphericalRegion -> True, ImageSize -> 425, 
             Boxed -> False]], {{
          robotica`Private`params$$548$$550$$552$$554$$, 
           ConstantArray[0, 6]}, ControlType -> None}, 
         Dynamic[
          Grid[
           Table[
            With[{robotica`Private`p$ = robotica`Private`i}, 
             If[
              robotica`isPrismatic[
               Part[robotica`Private`jointtype$, robotica`Private`p$]], {
               Subscript["d", robotica`Private`p$], 
               Slider[
                Dynamic[
                 Part[
                 robotica`Private`params$$548$$550$$552$$554$$, 
                  robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$554$$, 
                 robotica`Private`p$]]}, {
               Subscript["\[Theta]", robotica`Private`p$], 
               Slider[
                Dynamic[
                 Part[
                 robotica`Private`params$$548$$550$$552$$554$$, 
                  robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> 
                Small], 
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$554$$, 
                 robotica`Private`p$]]}]], {
            robotica`Private`i, robotica`Private`dof$}]]], 
         Delimiter, {{robotica`Private`g$$548$$550$$552$$554$$, 1, "grip"}, 0,
           1, 0.01, ImageSize -> Small, Appearance -> "Labeled"}, {{
          robotica`Private`showRobot$$548$$550$$552$$554$$, True, 
           "show robot"}, {True, False}}, {{
          robotica`Private`planei$$548$$550$$552$$554$$, 0, "xy Plane"}, 0, 
          robotica`Private`dof$, 1, ImageSize -> Small, Appearance -> 
          "Labeled", ControlType -> If[
            OptionValue[robotica`Private`showPlanes], Slider, None]}, 
         ControlPlacement -> Left, SaveDefinitions -> True], 
       Options[robotica`drawRobot] = {
        robotica`Private`showArrows -> True, robotica`Private`showH -> True, 
         robotica`Private`showManipEllipse -> False, 
         robotica`Private`showPlanes -> False}, 
       TagSet[robotica`drawRobot, 
        MessageName[robotica`drawRobot, "usage"], 
        "drawRobot[] displays a manipulate window and the robot so users can \
adjust on joint parameters.\nOptional parameters:\nshowArrows displays the \
coordinate axes,\nshowH writes the homogenous transform,\nshowManipEllipse-> \
False,\nshowPlanes displays a controller to show the xy plane at each axis \
(useful for inverse kinematics)\n"], 
       Attributes[robotica`Private`dof$] = {Temporary}, 
       Attributes[robotica`Private`r$] = {Temporary}, 
       Attributes[robotica`Private`alpha$] = {Temporary}, 
       Attributes[robotica`Private`jointtype$] = {Temporary}, 
       robotica`Private`params$$548$$550$$552$$554$$ = {0, 0, 0, 0, 0, 0}, 
       robotica`drawGripper[
         Pattern[robotica`Private`g, 
          Blank[]], 
         Pattern[robotica`Private`r, 
          Blank[]], 
         Optional[
          Pattern[robotica`Private`showArrow, 
           Blank[]], True]] := 
       Module[{robotica`Private`jr = 1/5, robotica`Private`ar = 1/20}, {
          Opacity[1], 
          If[robotica`Private`showArrow, 
           robotica`drawCoordAxes[robotica`Private`jr]], 
          If[robotica`Private`r != 0, {Gray, 
            
            Cuboid[{(-2) robotica`Private`ar, -robotica`Private`ar, (-4) 
              robotica`Private`ar}, {
             0, robotica`Private`ar, 4 robotica`Private`ar}], 
            
            Cuboid[{0 robotica`Private`ar, -robotica`Private`ar, 
              robotica`Private`g 2 robotica`Private`ar}, {
             4 robotica`Private`ar, robotica`Private`ar, 
              2 (1 + robotica`Private`g) robotica`Private`ar}], 
            
            Cuboid[{0 robotica`Private`ar, -
              robotica`Private`ar, -(robotica`Private`g 2 
               robotica`Private`ar)}, {
             4 robotica`Private`ar, 
              robotica`Private`ar, (-2) (1 + robotica`Private`g) 
              robotica`Private`ar}]}, {Gray, 
            
            Cuboid[{(-4) robotica`Private`ar, -robotica`Private`ar, (-2) 
              robotica`Private`ar}, {
             4 robotica`Private`ar, robotica`Private`ar, 0}], 
            
            Cuboid[{robotica`Private`g 2 robotica`Private`ar, -
              robotica`Private`ar, 0 robotica`Private`ar}, {
             2 (1 + robotica`Private`g) robotica`Private`ar, 
              robotica`Private`ar, 4 robotica`Private`ar}], 
            
            Cuboid[{-(robotica`Private`g 2 robotica`Private`ar), -
              robotica`Private`ar, 0 
              robotica`Private`ar}, {(-2) (1 + robotica`Private`g) 
              robotica`Private`ar, robotica`Private`ar, 4 
              robotica`Private`ar}]}]}], 
       TagSet[robotica`drawGripper, 
        MessageName[robotica`drawGripper, "usage"], ""], 
       robotica`Private`g$$548$$550$$552$$554$$ = 1, 
       robotica`Private`showRobot$$548$$550$$552$$554$$ = True, 
       Attributes[Subscript] = {NHoldRest}, 
       robotica`Private`planei$$548$$550$$552$$554$$ = 0, 
       Attributes[robotica`Private`p$] = {Temporary}, robotica`Private`i = 5, 
       FE`robotica`Private`g$$548$$550$$552 = 1, 
       FE`robotica`Private`showRobot$$548$$550$$552 = True, 
       FE`robotica`Private`planei$$548$$550$$552 = 0}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.766745854470293*^9, 3.766745857845428*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Kinematics", "Chapter",
 CellChangeTimes->{{3.766744185382244*^9, 3.766744191404426*^9}}],

Cell[TextData[{
 "\n",
 StyleBox["Joint variables",
  FontWeight->"Bold"],
 ": they are a list of parameters that describes exactly the state of a \
joint. \nThey are described by N-dimentionals vectors where N is the number \
of DoF of the joint.\n"
}], "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732862122991*^9}, 
   3.766744064927354*^9, {3.766744131552539*^9, 3.766744141218196*^9}, {
   3.7667442078793592`*^9, 3.766744235672567*^9}, {3.766744307682522*^9, 
   3.766744406039791*^9}}],

Cell[CellGroupData[{

Cell["Forward kinematics", "Subchapter",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732862122991*^9}, 
   3.766744064927354*^9, {3.766744131552539*^9, 3.766744141218196*^9}, {
   3.7667442078793592`*^9, 3.766744235672567*^9}, {3.766744307682522*^9, 
   3.766744402293893*^9}}],

Cell[TextData[{
 StyleBox["Forward Kinematics",
  FontWeight->"Bold"],
 " is the function that given the state of  N joint variable, calculates the \
position of the last joint compared to the position of the first one."
}], "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732862122991*^9}, 
   3.766744064927354*^9, {3.766744131552539*^9, 3.766744141218196*^9}, {
   3.7667442078793592`*^9, 3.766744235672567*^9}, {3.766744307682522*^9, 
   3.766744402293893*^9}, {3.766744440864676*^9, 3.76674448924778*^9}, 
   3.7667445213874197`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inverse kinematics", "Subchapter",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732862122991*^9}, 
   3.766744064927354*^9, {3.766744131552539*^9, 3.766744141218196*^9}, {
   3.7667442078793592`*^9, 3.766744235672567*^9}, {3.766744307682522*^9, 
   3.766744402293893*^9}, {3.766744440864676*^9, 3.766744498785865*^9}}],

Cell[TextData[{
 StyleBox["Inverse kinematics",
  FontWeight->"Bold"],
 " is the function that given the position of the end effector, calculates \
the necessary states of the N joints.\nIt is more difficult, since the \
solution is not guaranteed to be always unique or event existent.\n\n",
 StyleBox["We will explain the Forward kinematics in a robotic arm.",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732862122991*^9}, 
   3.766744064927354*^9, {3.766744131552539*^9, 3.766744141218196*^9}, {
   3.7667442078793592`*^9, 3.766744235672567*^9}, {3.766744307682522*^9, 
   3.766744402293893*^9}, {3.766744440864676*^9, 3.766744482205278*^9}, {
   3.766744517251584*^9, 3.766744578070939*^9}, {3.7667446103431587`*^9, 
   3.766744613351308*^9}, {3.766744662528042*^9, 3.766744686545166*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[TextData[{
 "In a robotic arm there is only one fixed joint to the ground so it can be \
viewed as a \njoin-chain called ",
 StyleBox["open kinematic chain.",
  FontWeight->"Bold"],
 " \n\nThe ",
 StyleBox["Denavit Hartemberg",
  FontWeight->"Bold"],
 " method is used to represent the geometric transformation applied by a open \
kinematics chains minimizing the number of parameter necessary.\n\nDH \
analizes one joint at time, knowing the position of the joint J[i] and the \
joint variables of J[i+1] it calculates the position of J[i+1].\n\n",
 StyleBox["State variables",
  FontWeight->"Bold"],
 " can create two types of geometric transformation:"
}], "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732869587101*^9}, {
  3.766744688048908*^9, 3.766744753251169*^9}}],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Transative",
 FontWeight->"Bold"]], "Item",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732869587101*^9}, {
  3.766744688048908*^9, 3.766744776091872*^9}}],

Cell[TextData[StyleBox["Rotative",
 FontWeight->"Bold"]], "Item",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732869587101*^9}, {
  3.766744688048908*^9, 3.7667447782438927`*^9}}]
}, Open  ]],

Cell["\<\
Both the geometric transformation can always be described by a matrix.\
\>", "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732869587101*^9}, {
  3.766744688048908*^9, 3.766744758378516*^9}, {3.766744792636671*^9, 
  3.766744794629567*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dhTransform", "[", 
  RowBox[{"dx", ",", "dy", ",", "dz", ",", "axy", ",", "ayz", ",", "azx"}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732878827338*^9}, {
  3.7667448007646847`*^9, 3.766744801829008*^9}, {3.7667449593780127`*^9, 
  3.766744962709847*^9}, {3.7667450835439672`*^9, 3.7667452037787113`*^9}, {
  3.766745251436462*^9, 3.766745325247952*^9}, {3.766745418495908*^9, 
  3.7667454215214167`*^9}, {3.766745869070156*^9, 3.766745908164887*^9}}],

Cell[BoxData[
 RowBox[{"TransformationFunction", "[", 
  RowBox[{"(", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{
         RowBox[{"Cos", "[", "ayz", "]"}], " ", 
         RowBox[{"Cos", "[", "azx", "]"}]}], "-", 
        RowBox[{
         RowBox[{"Sin", "[", "axy", "]"}], " ", 
         RowBox[{"Sin", "[", "ayz", "]"}], " ", 
         RowBox[{"Sin", "[", "azx", "]"}]}]}], 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cos", "[", "axy", "]"}]}], " ", 
        RowBox[{"Sin", "[", "azx", "]"}]}], 
       RowBox[{
        RowBox[{
         RowBox[{"Cos", "[", "azx", "]"}], " ", 
         RowBox[{"Sin", "[", "ayz", "]"}]}], "+", 
        RowBox[{
         RowBox[{"Cos", "[", "ayz", "]"}], " ", 
         RowBox[{"Sin", "[", "axy", "]"}], " ", 
         RowBox[{"Sin", "[", "azx", "]"}]}]}], 
       RowBox[{
        RowBox[{"dx", " ", 
         RowBox[{"Cos", "[", "azx", "]"}]}], "-", 
        RowBox[{"dy", " ", 
         RowBox[{"Sin", "[", "azx", "]"}]}]}]},
      {
       RowBox[{
        RowBox[{
         RowBox[{"Cos", "[", "azx", "]"}], " ", 
         RowBox[{"Sin", "[", "axy", "]"}], " ", 
         RowBox[{"Sin", "[", "ayz", "]"}]}], "+", 
        RowBox[{
         RowBox[{"Cos", "[", "ayz", "]"}], " ", 
         RowBox[{"Sin", "[", "azx", "]"}]}]}], 
       RowBox[{
        RowBox[{"Cos", "[", "axy", "]"}], " ", 
        RowBox[{"Cos", "[", "azx", "]"}]}], 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Cos", "[", "ayz", "]"}]}], " ", 
         RowBox[{"Cos", "[", "azx", "]"}], " ", 
         RowBox[{"Sin", "[", "axy", "]"}]}], "+", 
        RowBox[{
         RowBox[{"Sin", "[", "ayz", "]"}], " ", 
         RowBox[{"Sin", "[", "azx", "]"}]}]}], 
       RowBox[{
        RowBox[{"dy", " ", 
         RowBox[{"Cos", "[", "azx", "]"}]}], "+", 
        RowBox[{"dx", " ", 
         RowBox[{"Sin", "[", "azx", "]"}]}]}]},
      {
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cos", "[", "axy", "]"}]}], " ", 
        RowBox[{"Sin", "[", "ayz", "]"}]}], 
       RowBox[{"Sin", "[", "axy", "]"}], 
       RowBox[{
        RowBox[{"Cos", "[", "axy", "]"}], " ", 
        RowBox[{"Cos", "[", "ayz", "]"}]}], "dz"},
      {"0", "0", "0", "1"}
     },
     AutoDelete->False,
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {-2 -> True}, 
       "Rows" -> {{False}}, "RowsIndexed" -> {-2 -> True}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    #& ], ")"}], "]"}]], "Output",
 CellChangeTimes->{{3.766745855002748*^9, 3.766745909261425*^9}}]
}, Open  ]],

Cell["\<\
Immagini delle matrici per far vedere come cambiano rispetto alle due \
trasformazioni\
\>", "Text",
 CellChangeTimes->{{3.766746138060583*^9, 3.7667461553799257`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["", "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.766732884722907*^9}, 
   3.7667331392965717`*^9, 3.7667461726127167`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["\<\

f\
\>", "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.7667328901958017`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["\<\

f\
\>", "Text",
 CellChangeTimes->{{3.766732822854618*^9, 3.7667328964832077`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"Needs", "[", "\"\<robotica`\>\"", "]"}], ";"}]], "Code",
 Editable->False,
 CellChangeTimes->{
  3.7667312035394163`*^9, 3.766732165297564*^9, {3.766732252089415*^9, 
   3.76673225465727*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"drawAPI", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<r\>\"", ",", "\"\<r\>\"", ",", "\"\<p\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "Pi", ",", 
      RowBox[{"Pi", "/", "2"}]}], "}"}]}], "}"}], "]"}]], "Code",
 CellChangeTimes->{{3.766731285082245*^9, 3.7667313108588867`*^9}, {
  3.76673147836649*^9, 3.7667314960183563`*^9}, {3.766731949713562*^9, 
  3.7667319503280687`*^9}, {3.76673205032937*^9, 3.766732050888933*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{robotica`Private`g$$548$$550$$552$$554$$556$$ = 1, 
    robotica`Private`params$$548$$550$$552$$554$$556$$ = {0, 0, 0, 0, 0, 0}, 
    robotica`Private`planei$$548$$550$$552$$554$$556$$ = 0, 
    robotica`Private`showRobot$$548$$550$$552$$554$$556$$ = True, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[FE`robotica`Private`params$$548$$550$$552$$554$$556], {0, 0, 0, 0,
        0, 0}}}, {
      Hold[
       Dynamic[
        Grid[
         Table[
          With[{robotica`Private`p$ = robotica`Private`i}, 
           If[
            robotica`isPrismatic[
             Part[{"r", "r", "p"}, robotica`Private`p$]], {
             Subscript["d", robotica`Private`p$], 
             Slider[
              Dynamic[
               Part[
               FE`robotica`Private`params$$548$$550$$552$$554$$556, 
                robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
             Dynamic[
              Part[
              FE`robotica`Private`params$$548$$550$$552$$554$$556, 
               robotica`Private`p$]]}, {
             Subscript["\[Theta]", robotica`Private`p$], 
             Slider[
              Dynamic[
               Part[
               FE`robotica`Private`params$$548$$550$$552$$554$$556, 
                robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> Small], 
             
             Dynamic[
              Part[
              FE`robotica`Private`params$$548$$550$$552$$554$$556, 
               robotica`Private`p$]]}]], {robotica`Private`i, 3}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[FE`robotica`Private`g$$548$$550$$552$$554$$556], 1, "grip"}, 0, 1,
       0.01}, {{
       Hold[FE`robotica`Private`showRobot$$548$$550$$552$$554$$556], True, 
       "show robot"}, {True, False}}, {{
       Hold[FE`robotica`Private`planei$$548$$550$$552$$554$$556], 0, 
       "xy Plane"}, 0, 3, 1}}, Typeset`size$$ = {425., {210., 215.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False, 
    robotica`Private`g$$548$$550$$552$$554$$556$1107$$ = 0, 
    robotica`Private`showRobot$$548$$550$$552$$554$$556$1108$$ = False, 
    robotica`Private`planei$$548$$550$$552$$554$$556$1109$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       robotica`Private`g$$548$$550$$552$$554$$556$$ = 1, 
        robotica`Private`params$$548$$550$$552$$554$$556$$ = {0, 0, 0, 0, 0, 
         0}, robotica`Private`planei$$548$$550$$552$$554$$556$$ = 0, 
        robotica`Private`showRobot$$548$$550$$552$$554$$556$$ = True}, 
      "ControllerVariables" :> {
        Hold[
        robotica`Private`g$$548$$550$$552$$554$$556$$, 
         robotica`Private`g$$548$$550$$552$$554$$556$1107$$, 0], 
        Hold[
        robotica`Private`showRobot$$548$$550$$552$$554$$556$$, 
         robotica`Private`showRobot$$548$$550$$552$$554$$556$1108$$, False], 
        Hold[
        robotica`Private`planei$$548$$550$$552$$554$$556$$, 
         robotica`Private`planei$$548$$550$$552$$554$$556$1109$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> (Chop["/home/students/fapohund/Projects/robotica", 10^(-10)]; 
       Module[{robotica`Private`jr$ = 1/10, robotica`Private`ar$ = 1/40, 
          robotica`Private`Td$, robotica`Private`j$, robotica`Private`i$, 
          robotica`Private`d$, robotica`Private`theta$}, 
         robotica`Private`d$ = Range[6]; robotica`Private`theta$ = Range[6]; 
         For[robotica`Private`i$ = 1, robotica`Private`i$ <= 3, 
           Increment[robotica`Private`i$], If[
             robotica`isPrismatic[
              Part[{"r", "r", "p"}, robotica`Private`i$]], 
             Part[robotica`Private`theta$, robotica`Private`i$] = 0; 
             Part[robotica`Private`d$, robotica`Private`i$] = 
              Part[robotica`Private`params$$548$$550$$552$$554$$556$$, 
                robotica`Private`i$], 
             Part[robotica`Private`theta$, robotica`Private`i$] = 
              Part[robotica`Private`params$$548$$550$$552$$554$$556$$, 
                robotica`Private`i$]; 
             Part[robotica`Private`d$, robotica`Private`i$] = 0; Null]; Null]; 
         robotica`Private`Td$[1] = Dot[
            RotationTransform[
             Part[robotica`Private`theta$, 1], {0, 0, 1}], 
            TranslationTransform[{0, 0, 
              Part[robotica`Private`d$, 1]}], 
            TranslationTransform[{
              Part[{1, 1, 1}, 1], 0, 0}], 
            RotationTransform[
             Part[{0, Pi, Rational[1, 2] Pi}, 1], {1, 0, 0}]]; 
         For[robotica`Private`j$ = 2, robotica`Private`j$ <= 3, 
           Increment[robotica`Private`j$], 
           robotica`Private`Td$[robotica`Private`j$] = Dot[
              robotica`Private`Td$[robotica`Private`j$ - 1], 
              RotationTransform[
               Part[robotica`Private`theta$, robotica`Private`j$], {0, 0, 1}], 
              TranslationTransform[{0, 0, 
                Part[robotica`Private`d$, robotica`Private`j$]}], 
              TranslationTransform[{
                Part[{1, 1, 1}, robotica`Private`j$], 0, 0}], 
              RotationTransform[
               Part[{0, Pi, Rational[1, 2] Pi}, robotica`Private`j$], {1, 0, 
               0}]]; Null]; Graphics3D[{{LightBrown, 
             Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
            If[
             robotica`isRevolutionary[
              Part[{"r", "r", "p"}, 1]], 
             robotica`drawJoint[
              Part[{"r", "r", "p"}, 1], 
              Part[robotica`Private`d$, 1], 
              Part[{1, 1, 1}, 1], 
              Part[robotica`Private`params$$548$$550$$552$$554$$556$$, 1], 
              OptionValue[
              robotica`drawRobot, {{
                robotica`Private`showArrows -> True, robotica`Private`showH -> 
                 True, robotica`Private`showManipEllipse -> False, 
                 robotica`Private`showPlanes -> False}}, 
               robotica`Private`showArrows]], 
             robotica`drawJoint[
              Part[{"r", "r", "p"}, 1], 
              Part[robotica`Private`params$$548$$550$$552$$554$$556$$, 1], 
              Part[{1, 1, 1}, 1], 
              Part[robotica`Private`theta$, 1]], 
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showArrows]], 
            If[3 == 1, 
             GeometricTransformation[
              robotica`drawGripper[
              robotica`Private`g$$548$$550$$552$$554$$556$$, 0, 
               OptionValue[
               robotica`drawRobot, {{
                 robotica`Private`showArrows -> True, robotica`Private`showH -> 
                  True, robotica`Private`showManipEllipse -> False, 
                  robotica`Private`showPlanes -> False}}, 
                robotica`Private`showArrows]], 
              Chop[
               robotica`Private`Td$[3]]], 
             If[robotica`Private`showRobot$$548$$550$$552$$554$$556$$, 
              Table[
               If[
                robotica`isRevolutionary[
                 Part[{"r", "r", "p"}, robotica`Private`i$]], 
                GeometricTransformation[
                 robotica`drawJoint[
                  Part[{"r", "r", "p"}, robotica`Private`i$], 
                  Part[robotica`Private`d$, robotica`Private`i$], 
                  Part[{1, 1, 1}, robotica`Private`i$], 
                  Part[
                  robotica`Private`params$$548$$550$$552$$554$$556$$, 
                   robotica`Private`i$], 
                  OptionValue[
                  robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                   robotica`Private`showArrows]], 
                 robotica`Private`Td$[robotica`Private`i$ - 1]], 
                GeometricTransformation[
                 robotica`drawJoint[
                  Part[{"r", "r", "p"}, robotica`Private`i$], 
                  Part[
                  robotica`Private`params$$548$$550$$552$$554$$556$$, 
                   robotica`Private`i$], 
                  Part[{1, 1, 1}, robotica`Private`i$], 
                  Part[robotica`Private`theta$, robotica`Private`i$], 
                  OptionValue[
                  robotica`drawRobot, {{
                    robotica`Private`showArrows -> True, 
                    robotica`Private`showH -> True, 
                    robotica`Private`showManipEllipse -> False, 
                    robotica`Private`showPlanes -> False}}, 
                   robotica`Private`showArrows]], 
                 robotica`Private`Td$[robotica`Private`i$ - 1]]], {
               robotica`Private`i$, 2, 3}]]], 
            GeometricTransformation[
             robotica`drawGripper[
             robotica`Private`g$$548$$550$$552$$554$$556$$, 0, 
              OptionValue[
              robotica`drawRobot, {{
                robotica`Private`showArrows -> True, robotica`Private`showH -> 
                 True, robotica`Private`showManipEllipse -> False, 
                 robotica`Private`showPlanes -> False}}, 
               robotica`Private`showArrows]], 
             Chop[
              robotica`Private`Td$[3]]], 
            If[
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showPlanes], 
             GeometricTransformation[{Thick, {Blue, 
                Rotate[
                 robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                Text[
                 Subscript[
                 "x", robotica`Private`planei$$548$$550$$552$$554$$556$$], {
                 0.9, 0.2, 0}]}, {Green, 
                Rotate[
                 robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                Text[
                 Subscript[
                 "y", robotica`Private`planei$$548$$550$$552$$554$$556$$], {
                 0.2, 0.9, 0}]}, Blue, 
               Opacity[0.2], 
               Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
              If[robotica`Private`planei$$548$$550$$552$$554$$556$$ > 0, 
               robotica`Private`Td$[
               robotica`Private`planei$$548$$550$$552$$554$$556$$], 
               IdentityMatrix[4]; Null]]], 
            If[
             OptionValue[
             robotica`drawRobot, {{
               robotica`Private`showArrows -> True, robotica`Private`showH -> 
                True, robotica`Private`showManipEllipse -> False, 
                robotica`Private`showPlanes -> False}}, 
              robotica`Private`showH], 
             Text[
              StringForm["\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
               MatrixForm[
                N[
                 Chop[
                  robotica`Private`Td$[3]], 2]]], {0, 0, -3.2}]]}, 
           SphericalRegion -> True, ImageSize -> 425, Boxed -> False]]), 
      "Specifications" :> {{{
         robotica`Private`params$$548$$550$$552$$554$$556$$, {0, 0, 0, 0, 0, 
          0}}, ControlType -> None}, 
        Dynamic[
         Grid[
          Table[
           With[{robotica`Private`p$ = robotica`Private`i}, 
            If[
             robotica`isPrismatic[
              Part[{"r", "r", "p"}, robotica`Private`p$]], {
              Subscript["d", robotica`Private`p$], 
              Slider[
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$554$$556$$, 
                 robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
              Dynamic[
               Part[
               robotica`Private`params$$548$$550$$552$$554$$556$$, 
                robotica`Private`p$]]}, {
              Subscript["\[Theta]", robotica`Private`p$], 
              Slider[
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$554$$556$$, 
                 robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> Small], 
              Dynamic[
               Part[
               robotica`Private`params$$548$$550$$552$$554$$556$$, 
                robotica`Private`p$]]}]], {robotica`Private`i, 3}]]], 
        Delimiter, {{
         robotica`Private`g$$548$$550$$552$$554$$556$$, 1, "grip"}, 0, 1, 
         0.01, ImageSize -> Small, Appearance -> "Labeled"}, {{
         robotica`Private`showRobot$$548$$550$$552$$554$$556$$, True, 
          "show robot"}, {True, False}}, {{
         robotica`Private`planei$$548$$550$$552$$554$$556$$, 0, "xy Plane"}, 
         0, 3, 1, ImageSize -> Small, Appearance -> "Labeled", ControlType -> 
         None}}, "Options" :> {ControlPlacement -> Left}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{693., {242., 252.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({
      Attributes[robotica`Private`jr$] = {Temporary}, 
       Attributes[robotica`Private`ar$] = {Temporary}, 
       Attributes[robotica`Private`Td$] = {Temporary}, 
       Attributes[robotica`Private`j$] = {Temporary}, 
       Attributes[robotica`Private`i$] = {Temporary}, 
       Attributes[robotica`Private`d$] = {Temporary}, 
       Attributes[robotica`Private`theta$] = {Temporary}, robotica`isPrismatic[
         Pattern[robotica`Private`jtype, 
          Blank[String]]] := 
       MemberQ[{"Prismatic", "prismatic", "P", "p"}, robotica`Private`jtype], 
       
       TagSet[robotica`isPrismatic, 
        MessageName[robotica`isPrismatic, "usage"], ""], 
       robotica`Private`params$$548$$550$$552$$554$$556$$ = {0, 0, 0, 0, 0, 
        0}, robotica`isRevolutionary[
         Pattern[robotica`Private`jtype, 
          Blank[String]]] := 
       MemberQ[{"Revolute", "revolute", "R", "r"}, robotica`Private`jtype], 
       TagSet[robotica`isRevolutionary, 
        MessageName[robotica`isRevolutionary, "usage"], ""], 
       robotica`drawJoint[
         Pattern[robotica`Private`j, 
          Blank[]], 
         Pattern[robotica`Private`d, 
          Blank[]], 
         Pattern[robotica`Private`r, 
          Blank[]], 
         Pattern[robotica`Private`theta, 
          Blank[]], 
         Optional[
          Pattern[robotica`Private`showArrow, 
           Blank[]], True]] := 
       Module[{robotica`Private`jr = 1/5, robotica`Private`ar = 1/20, 
          robotica`Private`pr = 1/7, robotica`Private`vr = 1/6}, {
          If[robotica`Private`showArrow, 
           robotica`drawCoordAxes[robotica`Private`jr]], 
          Opacity[1], {
           Opacity[0.5], Gray, 
           If[
            robotica`isPrismatic[robotica`Private`j], 
            
            Cuboid[{-robotica`Private`ar, -robotica`Private`ar, -1 + 
              robotica`Private`d - robotica`Private`jr - 0.01}, {
             robotica`Private`ar, robotica`Private`ar, robotica`Private`d + 
              0.01}], 
            
            Cylinder[{{
              0, 0, Min[-robotica`Private`ar, robotica`Private`d - 
                 robotica`Private`jr] - 0.01}, {
              0, 0, Max[robotica`Private`ar, robotica`Private`d] + 0.01}}, 
             robotica`Private`ar]]}, {LightBlue, 
           If[
            robotica`isPrismatic[robotica`Private`j], {
             
             Cuboid[{-robotica`Private`jr, -robotica`Private`jr, -
               robotica`Private`jr}, {
              robotica`Private`jr, robotica`Private`jr, robotica`Private`jr - 
               0.1}], 
             Cuboid[{-robotica`Private`jr, -robotica`Private`jr, 
               Plus[robotica`Private`jr]}, {
              robotica`Private`jr, robotica`Private`jr, robotica`Private`jr + 
               0.05}]}, {
             
             Cylinder[{{0, 0, -robotica`Private`jr - 0.1}, {
               0, 0, robotica`Private`jr + 0.1}}, 0.9 robotica`Private`jr]}]}, 
          Rotate[{
            Opacity[0.5], Gray, 
            
            Cuboid[{-robotica`Private`ar, -robotica`Private`ar, 
              robotica`Private`d - robotica`Private`ar}, {
             robotica`Private`r, robotica`Private`ar, robotica`Private`d + 
              robotica`Private`ar}]}, robotica`Private`theta, {0, 0, 1}]}], 
       TagSet[robotica`drawJoint, 
        MessageName[robotica`drawJoint, "usage"], ""], 
       robotica`drawCoordAxes[
         Pattern[robotica`Private`jr, 
          Blank[]]] := {Thick, {Red, 
          robotica`drawZArrow[robotica`Private`jr]}, {Blue, 
          Rotate[
           robotica`drawZArrow[robotica`Private`jr], Pi/2, {0, 1, 0}]}, {
         Green, 
          Rotate[
           robotica`drawZArrow[robotica`Private`jr], -(Pi/2), {1, 0, 0}]}}, 
       TagSet[robotica`drawCoordAxes, 
        MessageName[robotica`drawCoordAxes, "usage"], ""], robotica`drawZArrow[
         Pattern[robotica`Private`jr, 
          Blank[]]] := 
       Line[{{{0, 0, 0}, {0, 0, 2 robotica`Private`jr}}, {{
           0, 0, 2 robotica`Private`jr}, {
           1/32, 0, (3 robotica`Private`jr)/2}}, {{
           0, 0, 2 robotica`Private`jr}, {(-1)/32, 0, (3 robotica`Private`jr)/
            2}}, {{0, 0, 2 robotica`Private`jr}, {
           0, 1/32, (3 robotica`Private`jr)/2}}, {{
           0, 0, 2 robotica`Private`jr}, {
           0, (-1)/32, (3 robotica`Private`jr)/2}}}], 
       TagSet[robotica`drawZArrow, 
        MessageName[robotica`drawZArrow, "usage"], ""], robotica`drawRobot[
         Pattern[robotica`Private`dof$, 
          Blank[]], 
         Pattern[robotica`Private`r$, 
          Blank[]], 
         Pattern[robotica`Private`alpha$, 
          Blank[]], 
         Pattern[robotica`Private`jointtype$, 
          Blank[]], 
         OptionsPattern[]] := Manipulate[Chop[
           Out[], 10^(-10)]; 
         Module[{robotica`Private`jr$ = 1/10, robotica`Private`ar$ = 1/40, 
            robotica`Private`Td$, robotica`Private`j$, robotica`Private`i$, 
            robotica`Private`d$, robotica`Private`theta$}, 
           robotica`Private`d$ = Range[6]; robotica`Private`theta$ = Range[6]; 
           For[robotica`Private`i$ = 1, robotica`Private`i$ <= 
             robotica`Private`dof$, 
             Increment[robotica`Private`i$], If[
               robotica`isPrismatic[
                Part[robotica`Private`jointtype$, robotica`Private`i$]], 
               Part[robotica`Private`theta$, robotica`Private`i$] = 0; 
               Part[robotica`Private`d$, robotica`Private`i$] = 
                Part[robotica`Private`params$$548$$550$$552$$554$$556$$, 
                  robotica`Private`i$], 
               Part[robotica`Private`theta$, robotica`Private`i$] = 
                Part[robotica`Private`params$$548$$550$$552$$554$$556$$, 
                  robotica`Private`i$]; 
               Part[robotica`Private`d$, robotica`Private`i$] = 0; Null]; 
             Null]; robotica`Private`Td$[1] = Dot[
              RotationTransform[
               Part[robotica`Private`theta$, 1], {0, 0, 1}], 
              TranslationTransform[{0, 0, 
                Part[robotica`Private`d$, 1]}], 
              TranslationTransform[{
                Part[robotica`Private`r$, 1], 0, 0}], 
              RotationTransform[
               Part[robotica`Private`alpha$, 1], {1, 0, 0}]]; 
           For[robotica`Private`j$ = 2, robotica`Private`j$ <= 
             robotica`Private`dof$, 
             Increment[robotica`Private`j$], 
             robotica`Private`Td$[robotica`Private`j$] = Dot[
                robotica`Private`Td$[robotica`Private`j$ - 1], 
                RotationTransform[
                 Part[robotica`Private`theta$, robotica`Private`j$], {0, 0, 
                 1}], 
                TranslationTransform[{0, 0, 
                  Part[robotica`Private`d$, robotica`Private`j$]}], 
                TranslationTransform[{
                  Part[robotica`Private`r$, robotica`Private`j$], 0, 0}], 
                RotationTransform[
                 Part[robotica`Private`alpha$, robotica`Private`j$], {1, 0, 
                 0}]]; Null]; Graphics3D[{{LightBrown, 
               Cylinder[{{0, 0, (-2)/5}, {0, 0, (-1)/5 - 1/20}}, 2.2]}, 
              If[
               robotica`isRevolutionary[
                Part[robotica`Private`jointtype$, 1]], 
               robotica`drawJoint[
                Part[robotica`Private`jointtype$, 1], 
                Part[robotica`Private`d$, 1], 
                Part[robotica`Private`r$, 1], 
                Part[robotica`Private`params$$548$$550$$552$$554$$556$$, 1], 
                OptionValue[robotica`Private`showArrows]], 
               robotica`drawJoint[
                Part[robotica`Private`jointtype$, 1], 
                Part[robotica`Private`params$$548$$550$$552$$554$$556$$, 1], 
                Part[robotica`Private`r$, 1], 
                Part[robotica`Private`theta$, 1]], 
               OptionValue[robotica`Private`showArrows]], 
              If[robotica`Private`dof$ == 1, 
               GeometricTransformation[
                robotica`drawGripper[
                robotica`Private`g$$548$$550$$552$$554$$556$$, 0, 
                 OptionValue[robotica`Private`showArrows]], 
                Chop[
                 robotica`Private`Td$[robotica`Private`dof$]]], 
               If[robotica`Private`showRobot$$548$$550$$552$$554$$556$$, 
                Table[
                 If[
                  robotica`isRevolutionary[
                   Part[robotica`Private`jointtype$, robotica`Private`i$]], 
                  GeometricTransformation[
                   robotica`drawJoint[
                    Part[robotica`Private`jointtype$, robotica`Private`i$], 
                    Part[robotica`Private`d$, robotica`Private`i$], 
                    Part[robotica`Private`r$, robotica`Private`i$], 
                    Part[
                    robotica`Private`params$$548$$550$$552$$554$$556$$, 
                    robotica`Private`i$], 
                    OptionValue[robotica`Private`showArrows]], 
                   robotica`Private`Td$[robotica`Private`i$ - 1]], 
                  GeometricTransformation[
                   robotica`drawJoint[
                    Part[robotica`Private`jointtype$, robotica`Private`i$], 
                    Part[
                    robotica`Private`params$$548$$550$$552$$554$$556$$, 
                    robotica`Private`i$], 
                    Part[robotica`Private`r$, robotica`Private`i$], 
                    Part[robotica`Private`theta$, robotica`Private`i$], 
                    OptionValue[robotica`Private`showArrows]], 
                   robotica`Private`Td$[robotica`Private`i$ - 1]]], {
                 robotica`Private`i$, 2, robotica`Private`dof$}]]], 
              GeometricTransformation[
               robotica`drawGripper[
               robotica`Private`g$$548$$550$$552$$554$$556$$, 0, 
                OptionValue[robotica`Private`showArrows]], 
               Chop[
                robotica`Private`Td$[robotica`Private`dof$]]], 
              If[
               OptionValue[robotica`Private`showPlanes], 
               GeometricTransformation[{Thick, {Blue, 
                  Rotate[
                   robotica`drawZArrow[1/2], Pi/2, {0, 1, 0}], 
                  Text[
                   Subscript[
                   "x", robotica`Private`planei$$548$$550$$552$$554$$556$$], {
                   0.9, 0.2, 0}]}, {Green, 
                  Rotate[
                   robotica`drawZArrow[1/2], -(Pi/2), {1, 0, 0}], 
                  Text[
                   Subscript[
                   "y", robotica`Private`planei$$548$$550$$552$$554$$556$$], {
                   0.2, 0.9, 0}]}, Blue, 
                 Opacity[0.2], 
                 Polygon[{{-1, -1, 0}, {-1, 1, 0}, {1, 1, 0}, {1, -1, 0}}]}, 
                If[robotica`Private`planei$$548$$550$$552$$554$$556$$ > 0, 
                 robotica`Private`Td$[
                 robotica`Private`planei$$548$$550$$552$$554$$556$$], 
                 IdentityMatrix[4]; Null]]], 
              If[
               OptionValue[robotica`Private`showH], 
               Text[
                StringForm[
                "\!\(\*StyleBox[\"H\",\nFontSlant->\"Italic\"]\)=``", 
                 MatrixForm[
                  N[
                   Chop[
                    robotica`Private`Td$[robotica`Private`dof$]], 2]]], {
                0, 0, -3.2}]]}, SphericalRegion -> True, ImageSize -> 425, 
             Boxed -> False]], {{
          robotica`Private`params$$548$$550$$552$$554$$556$$, 
           ConstantArray[0, 6]}, ControlType -> None}, 
         Dynamic[
          Grid[
           Table[
            With[{robotica`Private`p$ = robotica`Private`i}, 
             If[
              robotica`isPrismatic[
               Part[robotica`Private`jointtype$, robotica`Private`p$]], {
               Subscript["d", robotica`Private`p$], 
               Slider[
                Dynamic[
                 Part[
                 robotica`Private`params$$548$$550$$552$$554$$556$$, 
                  robotica`Private`p$]], {0, 1, 1/20}, ImageSize -> Small], 
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$554$$556$$, 
                 robotica`Private`p$]]}, {
               Subscript["\[Theta]", robotica`Private`p$], 
               Slider[
                Dynamic[
                 Part[
                 robotica`Private`params$$548$$550$$552$$554$$556$$, 
                  robotica`Private`p$]], {-Pi, Pi, Pi/32}, ImageSize -> 
                Small], 
               Dynamic[
                Part[
                robotica`Private`params$$548$$550$$552$$554$$556$$, 
                 robotica`Private`p$]]}]], {
            robotica`Private`i, robotica`Private`dof$}]]], 
         Delimiter, {{
          robotica`Private`g$$548$$550$$552$$554$$556$$, 1, "grip"}, 0, 1, 
          0.01, ImageSize -> Small, Appearance -> "Labeled"}, {{
          robotica`Private`showRobot$$548$$550$$552$$554$$556$$, True, 
           "show robot"}, {True, False}}, {{
          robotica`Private`planei$$548$$550$$552$$554$$556$$, 0, "xy Plane"}, 
          0, robotica`Private`dof$, 1, ImageSize -> Small, Appearance -> 
          "Labeled", ControlType -> If[
            OptionValue[robotica`Private`showPlanes], Slider, None]}, 
         ControlPlacement -> Left, SaveDefinitions -> True], 
       Options[robotica`drawRobot] = {
        robotica`Private`showArrows -> True, robotica`Private`showH -> True, 
         robotica`Private`showManipEllipse -> False, 
         robotica`Private`showPlanes -> False}, 
       TagSet[robotica`drawRobot, 
        MessageName[robotica`drawRobot, "usage"], 
        "drawRobot[] displays a manipulate window and the robot so users can \
adjust on joint parameters.\nOptional parameters:\nshowArrows displays the \
coordinate axes,\nshowH writes the homogenous transform,\nshowManipEllipse-> \
False,\nshowPlanes displays a controller to show the xy plane at each axis \
(useful for inverse kinematics)\n"], 
       Attributes[robotica`Private`dof$] = {Temporary}, 
       Attributes[robotica`Private`r$] = {Temporary}, 
       Attributes[robotica`Private`alpha$] = {Temporary}, 
       Attributes[robotica`Private`jointtype$] = {Temporary}, 
       robotica`drawGripper[
         Pattern[robotica`Private`g, 
          Blank[]], 
         Pattern[robotica`Private`r, 
          Blank[]], 
         Optional[
          Pattern[robotica`Private`showArrow, 
           Blank[]], True]] := 
       Module[{robotica`Private`jr = 1/5, robotica`Private`ar = 1/20}, {
          Opacity[1], 
          If[robotica`Private`showArrow, 
           robotica`drawCoordAxes[robotica`Private`jr]], 
          If[robotica`Private`r != 0, {Gray, 
            
            Cuboid[{(-2) robotica`Private`ar, -robotica`Private`ar, (-4) 
              robotica`Private`ar}, {
             0, robotica`Private`ar, 4 robotica`Private`ar}], 
            
            Cuboid[{0 robotica`Private`ar, -robotica`Private`ar, 
              robotica`Private`g 2 robotica`Private`ar}, {
             4 robotica`Private`ar, robotica`Private`ar, 
              2 (1 + robotica`Private`g) robotica`Private`ar}], 
            
            Cuboid[{0 robotica`Private`ar, -
              robotica`Private`ar, -(robotica`Private`g 2 
               robotica`Private`ar)}, {
             4 robotica`Private`ar, 
              robotica`Private`ar, (-2) (1 + robotica`Private`g) 
              robotica`Private`ar}]}, {Gray, 
            
            Cuboid[{(-4) robotica`Private`ar, -robotica`Private`ar, (-2) 
              robotica`Private`ar}, {
             4 robotica`Private`ar, robotica`Private`ar, 0}], 
            
            Cuboid[{robotica`Private`g 2 robotica`Private`ar, -
              robotica`Private`ar, 0 robotica`Private`ar}, {
             2 (1 + robotica`Private`g) robotica`Private`ar, 
              robotica`Private`ar, 4 robotica`Private`ar}], 
            
            Cuboid[{-(robotica`Private`g 2 robotica`Private`ar), -
              robotica`Private`ar, 0 
              robotica`Private`ar}, {(-2) (1 + robotica`Private`g) 
              robotica`Private`ar, robotica`Private`ar, 4 
              robotica`Private`ar}]}]}], 
       TagSet[robotica`drawGripper, 
        MessageName[robotica`drawGripper, "usage"], ""], 
       robotica`Private`g$$548$$550$$552$$554$$556$$ = 1, 
       robotica`Private`showRobot$$548$$550$$552$$554$$556$$ = True, 
       Attributes[Subscript] = {NHoldRest}, 
       robotica`Private`planei$$548$$550$$552$$554$$556$$ = 0, 
       Attributes[robotica`Private`p$] = {Temporary}, robotica`Private`i = 4}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7667458558599873`*^9, 3.766745861754375*^9}}]
}, Open  ]],

Cell["\<\
This is a robotic arm!
You can play with it changing the state of the joints!\
\>", "Text",
 CellChangeTimes->{
  3.7667312799131737`*^9, {3.766731425684317*^9, 3.766731465093631*^9}}],

Cell["\<\
frfrfr
frf
rf
rf
rf
rf
r
r
vt
v er
fr\
\>", "Text",
 CellChangeTimes->{{3.7667326933275003`*^9, 3.766732717319295*^9}, 
   3.7667327585202503`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["re", "Text"],

Cell["re", "Text"],

Cell["\<\

fer
f
er
fer
fer
f
er
ver
v
v
qv
v
e\
\>", "Text",
 CellChangeTimes->{{3.7667326933275003`*^9, 3.766732717319295*^9}, 
   3.7667327585202503`*^9}],

Cell["\<\
<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://web.resource.org/cc/\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:xlink=\"http://www.w3.org/1999/xlink\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"586.5755\"
   height=\"776.02057\"
   id=\"svg7054\"
   sodipodi:version=\"0.32\"
   inkscape:version=\"0.45.1\"
   sodipodi:docbase=\"C:\\Documents and Settings\\Sharayanan\\Bureau\"
   sodipodi:docname=\"Solid DoF.svg\"
   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"
   version=\"1.0\">
  <defs
     id=\"defs7056\">
    <linearGradient
       inkscape:collect=\"always\"
       id=\"linearGradient11397\">
      <stop
         style=\"stop-color:#000000;stop-opacity:1;\"
         offset=\"0\"
         id=\"stop11399\" />
      <stop
         style=\"stop-color:#000000;stop-opacity:0;\"
         offset=\"1\"
         id=\"stop11401\" />
    </linearGradient>
    <linearGradient
       id=\"linearGradient11281\">
      <stop
         style=\"stop-color:#5a5a5a;stop-opacity:1;\"
         offset=\"0\"
         id=\"stop11283\" />
      <stop
         id=\"stop11289\"
         offset=\"0.25042516\"
         style=\"stop-color:#dedede;stop-opacity:1;\" />
      <stop
         style=\"stop-color:#838383;stop-opacity:1;\"
         offset=\"0.5535714\"
         id=\"stop11291\" />
      <stop
         id=\"stop11293\"
         offset=\"0.875\"
         style=\"stop-color:#989898;stop-opacity:1;\" />
      <stop
         style=\"stop-color:#313131;stop-opacity:1;\"
         offset=\"1\"
         id=\"stop11285\" />
    </linearGradient>
    <linearGradient
       id=\"linearGradient10214\">
      <stop
         style=\"stop-color:#00de28;stop-opacity:1;\"
         offset=\"0\"
         id=\"stop10216\" />
      <stop
         style=\"stop-color:#31a74e;stop-opacity:1;\"
         offset=\"1\"
         id=\"stop10218\" />
    </linearGradient>
    <linearGradient
       id=\"linearGradient9067\">
      <stop
         style=\"stop-color:#00c9ff;stop-opacity:0.83838385;\"
         offset=\"0\"
         id=\"stop9069\" />
      <stop
         style=\"stop-color:#006cff;stop-opacity:0.47474748;\"
         offset=\"1\"
         id=\"stop9071\" />
    </linearGradient>
    <linearGradient
       id=\"linearGradient9043\">
      <stop
         style=\"stop-color:#d2f3f4;stop-opacity:1;\"
         offset=\"0\"
         id=\"stop9045\" />
      <stop
         style=\"stop-color:#00c1e3;stop-opacity:0.46464646;\"
         offset=\"1\"
         id=\"stop9047\" />
    </linearGradient>
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9081\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3833773,0,262.96894)\"
       cx=\"269.43454\"
       cy=\"426.46655\"
       fx=\"269.43454\"
       fy=\"426.46655\"
       r=\"117.24549\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9083\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3833773,0,262.96894)\"
       cx=\"269.43454\"
       cy=\"426.46655\"
       fx=\"269.43454\"
       fy=\"426.46655\"
       r=\"117.24549\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9085\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,1.8441511,0,-343.31244)\"
       cx=\"144.8354\"
       cy=\"406.6955\"
       fx=\"144.8354\"
       fy=\"406.6955\"
       r=\"38.16375\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9087\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,1.8441511,0,-343.31244)\"
       cx=\"144.8354\"
       cy=\"406.6955\"
       fx=\"144.8354\"
       fy=\"406.6955\"
       r=\"38.16375\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9089\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1900925,0,365.93359)\"
       cx=\"265.20639\"
       cy=\"451.82147\"
       fx=\"265.20639\"
       fy=\"451.82147\"
       r=\"143.47794\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9091\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1900925,0,365.93359)\"
       cx=\"265.20639\"
       cy=\"451.82147\"
       fx=\"265.20639\"
       fy=\"451.82147\"
       r=\"143.47794\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9093\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1705407,0,299.78139)\"
       cx=\"291.43454\"
       cy=\"473.11371\"
       fx=\"291.43454\"
       fy=\"473.11371\"
       r=\"151.01273\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9095\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1705407,0,299.78139)\"
       cx=\"291.43454\"
       cy=\"473.11371\"
       fx=\"291.43454\"
       fy=\"473.11371\"
       r=\"151.01273\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9097\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3368937,0,286.21222)\"
       cx=\"296.85446\"
       cy=\"328.07123\"
       fx=\"296.85446\"
       fy=\"328.07123\"
       r=\"140.91119\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9099\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3368937,0,286.21222)\"
       cx=\"296.85446\"
       cy=\"328.07123\"
       fx=\"296.85446\"
       fy=\"328.07123\"
       r=\"140.91119\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9101\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,5.0709833,0,-1658.5459)\"
       cx=\"388.13931\"
       cy=\"405.20007\"
       fx=\"388.13931\"
       fy=\"405.20007\"
       r=\"14.137065\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9103\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,5.0709833,0,-1658.5459)\"
       cx=\"388.13931\"
       cy=\"405.20007\"
       fx=\"388.13931\"
       fy=\"405.20007\"
       r=\"14.137065\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9119\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3833773,0,262.96894)\"
       cx=\"269.43454\"
       cy=\"426.46655\"
       fx=\"269.43454\"
       fy=\"426.46655\"
       r=\"117.24549\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9121\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3833773,0,262.96894)\"
       cx=\"269.43454\"
       cy=\"426.46655\"
       fx=\"269.43454\"
       fy=\"426.46655\"
       r=\"117.24549\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9123\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,1.8441511,0,-343.31244)\"
       cx=\"144.8354\"
       cy=\"406.6955\"
       fx=\"144.8354\"
       fy=\"406.6955\"
       r=\"38.16375\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9125\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,1.8441511,0,-343.31244)\"
       cx=\"144.8354\"
       cy=\"406.6955\"
       fx=\"144.8354\"
       fy=\"406.6955\"
       r=\"38.16375\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9127\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1900925,0,365.93359)\"
       cx=\"265.20639\"
       cy=\"451.82147\"
       fx=\"265.20639\"
       fy=\"451.82147\"
       r=\"143.47794\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9129\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1900925,0,365.93359)\"
       cx=\"265.20639\"
       cy=\"451.82147\"
       fx=\"265.20639\"
       fy=\"451.82147\"
       r=\"143.47794\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9131\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1705407,0,299.78139)\"
       cx=\"291.43454\"
       cy=\"473.11371\"
       fx=\"291.43454\"
       fy=\"473.11371\"
       r=\"151.01273\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9133\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1705407,0,299.78139)\"
       cx=\"291.43454\"
       cy=\"473.11371\"
       fx=\"291.43454\"
       fy=\"473.11371\"
       r=\"151.01273\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9135\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3368937,0,286.21222)\"
       cx=\"296.85446\"
       cy=\"328.07123\"
       fx=\"296.85446\"
       fy=\"328.07123\"
       r=\"140.91119\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9137\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3368937,0,286.21222)\"
       cx=\"296.85446\"
       cy=\"328.07123\"
       fx=\"296.85446\"
       fy=\"328.07123\"
       r=\"140.91119\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient9139\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,5.0709833,0,-1658.5459)\"
       cx=\"388.13931\"
       cy=\"405.20007\"
       fx=\"388.13931\"
       fy=\"405.20007\"
       r=\"14.137065\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient9141\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,5.0709833,0,-1658.5459)\"
       cx=\"388.13931\"
       cy=\"405.20007\"
       fx=\"388.13931\"
       fy=\"405.20007\"
       r=\"14.137065\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10224\"
       x1=\"29.117088\"
       y1=\"321.89136\"
       x2=\"73.915306\"
       y2=\"321.89136\"
       gradientUnits=\"userSpaceOnUse\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10236\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"29.117088\"
       y1=\"321.89136\"
       x2=\"73.915306\"
       y2=\"321.89136\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10238\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"29.995165\"
       y1=\"335.36884\"
       x2=\"73.023476\"
       y2=\"335.36884\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10240\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"-12.543173\"
       y1=\"248.33301\"
       x2=\"30.373201\"
       y2=\"248.33301\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10248\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"29.117088\"
       y1=\"321.89136\"
       x2=\"73.915306\"
       y2=\"321.89136\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10250\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"29.995165\"
       y1=\"335.36884\"
       x2=\"73.023476\"
       y2=\"335.36884\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10252\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"-12.543173\"
       y1=\"248.33301\"
       x2=\"30.373201\"
       y2=\"248.33301\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10260\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"29.117088\"
       y1=\"321.89136\"
       x2=\"73.915306\"
       y2=\"321.89136\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10262\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"29.995165\"
       y1=\"335.36884\"
       x2=\"73.023476\"
       y2=\"335.36884\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10264\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"-12.543173\"
       y1=\"248.33301\"
       x2=\"30.373201\"
       y2=\"248.33301\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10272\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"29.117088\"
       y1=\"321.89136\"
       x2=\"73.915306\"
       y2=\"321.89136\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10274\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"29.995165\"
       y1=\"335.36884\"
       x2=\"73.023476\"
       y2=\"335.36884\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10276\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"-12.543173\"
       y1=\"248.33301\"
       x2=\"30.373201\"
       y2=\"248.33301\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10300\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"-8.2796192\"
       y1=\"471.40216\"
       x2=\"44.506687\"
       y2=\"477.72388\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10302\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"-22.341829\"
       y1=\"238.53435\"
       x2=\"29.424944\"
       y2=\"243.59172\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10304\"
       x1=\"15.185369\"
       y1=\"402.27011\"
       x2=\"44.601852\"
       y2=\"403.81747\"
       gradientUnits=\"userSpaceOnUse\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10306\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"-3.7473464\"
       y1=\"457.86502\"
       x2=\"48.174374\"
       y2=\"460.12335\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient10214\"
       id=\"linearGradient10308\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"-30.184404\"
       y1=\"234.957\"
       x2=\"21.931051\"
       y2=\"236.65076\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient11281\"
       id=\"linearGradient11337\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"translate(0,-12)\"
       x1=\"317.38135\"
       y1=\"620.44849\"
       x2=\"317.38135\"
       y2=\"630.52209\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11339\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3833773,0,262.96894)\"
       cx=\"269.43454\"
       cy=\"426.46655\"
       fx=\"269.43454\"
       fy=\"426.46655\"
       r=\"117.24549\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11341\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3833773,0,262.96894)\"
       cx=\"269.43454\"
       cy=\"426.46655\"
       fx=\"269.43454\"
       fy=\"426.46655\"
       r=\"117.24549\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11343\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,1.8441511,0,-343.31244)\"
       cx=\"144.8354\"
       cy=\"406.6955\"
       fx=\"144.8354\"
       fy=\"406.6955\"
       r=\"38.16375\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11345\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,1.8441511,0,-343.31244)\"
       cx=\"144.8354\"
       cy=\"406.6955\"
       fx=\"144.8354\"
       fy=\"406.6955\"
       r=\"38.16375\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11347\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1900925,0,365.93359)\"
       cx=\"265.20639\"
       cy=\"451.82147\"
       fx=\"265.20639\"
       fy=\"451.82147\"
       r=\"143.47794\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11349\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1900925,0,365.93359)\"
       cx=\"265.20639\"
       cy=\"451.82147\"
       fx=\"265.20639\"
       fy=\"451.82147\"
       r=\"143.47794\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11351\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1705407,0,299.78139)\"
       cx=\"291.43454\"
       cy=\"473.11371\"
       fx=\"291.43454\"
       fy=\"473.11371\"
       r=\"151.01273\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11353\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1705407,0,299.78139)\"
       cx=\"291.43454\"
       cy=\"473.11371\"
       fx=\"291.43454\"
       fy=\"473.11371\"
       r=\"151.01273\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11355\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3368937,0,286.21222)\"
       cx=\"296.85446\"
       cy=\"328.07123\"
       fx=\"296.85446\"
       fy=\"328.07123\"
       r=\"140.91119\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11357\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3368937,0,286.21222)\"
       cx=\"296.85446\"
       cy=\"328.07123\"
       fx=\"296.85446\"
       fy=\"328.07123\"
       r=\"140.91119\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11359\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,5.0709833,0,-1658.5459)\"
       cx=\"388.13931\"
       cy=\"405.20007\"
       fx=\"388.13931\"
       fy=\"405.20007\"
       r=\"14.137065\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11361\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,5.0709833,0,-1658.5459)\"
       cx=\"388.13931\"
       cy=\"405.20007\"
       fx=\"388.13931\"
       fy=\"405.20007\"
       r=\"14.137065\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient11281\"
       id=\"linearGradient11363\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"317.38135\"
       y1=\"620.44849\"
       x2=\"317.38135\"
       y2=\"630.52209\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11365\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3833773,0,262.96894)\"
       cx=\"269.43454\"
       cy=\"426.46655\"
       fx=\"269.43454\"
       fy=\"426.46655\"
       r=\"117.24549\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11367\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3833773,0,262.96894)\"
       cx=\"269.43454\"
       cy=\"426.46655\"
       fx=\"269.43454\"
       fy=\"426.46655\"
       r=\"117.24549\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11369\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,1.8441511,0,-343.31244)\"
       cx=\"144.8354\"
       cy=\"406.6955\"
       fx=\"144.8354\"
       fy=\"406.6955\"
       r=\"38.16375\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11371\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,1.8441511,0,-343.31244)\"
       cx=\"144.8354\"
       cy=\"406.6955\"
       fx=\"144.8354\"
       fy=\"406.6955\"
       r=\"38.16375\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11373\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1900925,0,365.93359)\"
       cx=\"265.20639\"
       cy=\"451.82147\"
       fx=\"265.20639\"
       fy=\"451.82147\"
       r=\"143.47794\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11375\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1900925,0,365.93359)\"
       cx=\"265.20639\"
       cy=\"451.82147\"
       fx=\"265.20639\"
       fy=\"451.82147\"
       r=\"143.47794\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11377\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1705407,0,299.78139)\"
       cx=\"291.43454\"
       cy=\"473.11371\"
       fx=\"291.43454\"
       fy=\"473.11371\"
       r=\"151.01273\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11379\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.1705407,0,299.78139)\"
       cx=\"291.43454\"
       cy=\"473.11371\"
       fx=\"291.43454\"
       fy=\"473.11371\"
       r=\"151.01273\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11381\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3368937,0,286.21222)\"
       cx=\"296.85446\"
       cy=\"328.07123\"
       fx=\"296.85446\"
       fy=\"328.07123\"
       r=\"140.91119\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11383\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,0.3368937,0,286.21222)\"
       cx=\"296.85446\"
       cy=\"328.07123\"
       fx=\"296.85446\"
       fy=\"328.07123\"
       r=\"140.91119\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"radialGradient11385\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,5.0709833,0,-1658.5459)\"
       cx=\"388.13931\"
       cy=\"405.20007\"
       fx=\"388.13931\"
       fy=\"405.20007\"
       r=\"14.137065\" />
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9043\"
       id=\"radialGradient11387\"
       gradientUnits=\"userSpaceOnUse\"
       gradientTransform=\"matrix(1,0,0,5.0709833,0,-1658.5459)\"
       cx=\"388.13931\"
       cy=\"405.20007\"
       fx=\"388.13931\"
       fy=\"405.20007\"
       r=\"14.137065\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient11397\"
       id=\"linearGradient11418\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"281.83258\"
       y1=\"627.49561\"
       x2=\"281.09546\"
       y2=\"638.9151\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient11281\"
       id=\"linearGradient11420\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"388.07816\"
       y1=\"622.7276\"
       x2=\"388.58124\"
       y2=\"633.15338\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient9067\"
       id=\"linearGradient11422\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"322.26019\"
       y1=\"623.76721\"
       x2=\"154.21335\"
       y2=\"634.20184\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient11281\"
       id=\"linearGradient11424\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"154.21335\"
       y1=\"634.20184\"
       x2=\"154.60547\"
       y2=\"643.88049\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient11281\"
       id=\"linearGradient12400\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"191.4543\"
       y1=\"563.83466\"
       x2=\"197.79245\"
       y2=\"555.83105\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient11281\"
       id=\"linearGradient12402\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"191.4543\"
       y1=\"563.83466\"
       x2=\"220.73175\"
       y2=\"667.90686\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient11281\"
       id=\"linearGradient12412\"
       gradientUnits=\"userSpaceOnUse\"
       x1=\"191.4543\"
       y1=\"563.83466\"
       x2=\"197.79245\"
       y2=\"555.83105\"
       gradientTransform=\"matrix(0,-1,1,0,-289.54578,1017.3512)\" />
  </defs>
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.39061453\"
     inkscape:cx=\"343.90271\"
     inkscape:cy=\"535.54149\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"747\"
     inkscape:window-x=\"-4\"
     inkscape:window-y=\"-4\" />
  <metadata
     id=\"metadata7059\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Calque 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(-56.001715,-162.57844)\">
    <g
       id=\"g10242\"
       style=\"fill:url(#linearGradient10248);fill-opacity:1;stroke:none\"
       transform=\"matrix(0,0.5481466,0.5481466,0,-11.52344,302.20488)\">
      <rect
         transform=\"translate(0.4999999,0)\"
         y=\"320.36218\"
         x=\"30\"
         height=\"92\"
         width=\"43\"
         id=\"rect10244\"
         style=\"opacity:1;fill:url(#linearGradient10250);fill-opacity:1;fill-\
rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />
      <path
         transform=\"translate(43,73)\"
         d=\"M 60.910982,248.333 L -42.910982,248.333 L 9.0000003,158.42054 L \
60.910982,248.333 z \"
         inkscape:randomized=\"0\"
         inkscape:rounded=\"0\"
         inkscape:flatsided=\"true\"
         sodipodi:arg2=\"1.5707963\"
         sodipodi:arg1=\"0.52359878\"
         sodipodi:r2=\"29.970819\"
         sodipodi:r1=\"59.941639\"
         sodipodi:cy=\"218.36218\"
         sodipodi:cx=\"9\"
         sodipodi:sides=\"3\"
         id=\"path10246\"
         style=\"opacity:1;fill:url(#linearGradient10252);fill-opacity:1;fill-\
rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
         sodipodi:type=\"star\" />
    </g>
    <g
       id=\"g10266\"
       style=\"fill:url(#linearGradient10272);fill-opacity:1;stroke:none\"
       transform=\"matrix(0.5481466,0,0,-0.5481466,309.49638,594.33501)\">
      <rect
         transform=\"translate(0.4999999,0)\"
         y=\"320.36218\"
         x=\"30\"
         height=\"92\"
         width=\"43\"
         id=\"rect10268\"
         style=\"opacity:1;fill:url(#linearGradient10274);fill-opacity:1;fill-\
rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />
      <path
         transform=\"translate(43,73)\"
         d=\"M 60.910982,248.333 L -42.910982,248.333 L 9.0000003,158.42054 L \
60.910982,248.333 z \"
         inkscape:randomized=\"0\"
         inkscape:rounded=\"0\"
         inkscape:flatsided=\"true\"
         sodipodi:arg2=\"1.5707963\"
         sodipodi:arg1=\"0.52359878\"
         sodipodi:r2=\"29.970819\"
         sodipodi:r1=\"59.941639\"
         sodipodi:cy=\"218.36218\"
         sodipodi:cx=\"9\"
         sodipodi:sides=\"3\"
         id=\"path10270\"
         style=\"opacity:1;fill:url(#linearGradient10276);fill-opacity:1;fill-\
rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
         sodipodi:type=\"star\" />
    </g>
    <g
       transform=\"matrix(-1,0,0,-0.6863044,399.18201,579.81319)\"
       id=\"g10294\">
      <path
         transform=\"matrix(0.5481466,0,0,0.5481466,17.770448,151.4477)\"
         style=\"fill:url(#linearGradient10300);fill-opacity:1;fill-rule:\
evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;\
stroke-miterlimit:4;stroke-opacity:1\"
         d=\"M -15.331578,487.0654 L 42.291511,492.91464 L \
56.914601,411.32055 L 12.93303,410.13869 L -15.331578,487.0654 z \"
         id=\"path10296\"
         sodipodi:nodetypes=\"ccccc\" />
      <path
         transform=\"matrix(0.5481466,0,0,0.5481466,31.837045,273.63397)\"
         style=\"fill:url(#linearGradient10302);fill-opacity:1;fill-rule:\
evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;\
stroke-miterlimit:4;stroke-opacity:1\"
         d=\"M 56.864569,238.7178 L -54.609454,233.70991 L \
-36.331578,345.59609 L 56.864569,238.7178 z \"
         id=\"path10298\"
         sodipodi:nodetypes=\"cccc\" />
    </g>
    <g
       id=\"g9143\">
      <g
         transform=\"translate(80,-80)\"
         id=\"g9073\">
        <path
           style=\"opacity:1;fill:url(#radialGradient9081);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9083);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
           d=\"M 160.39433,470.75725 L 386.03682,470.91581 L \
386.18003,382.01728 L 152.68904,382.78959 L 160.39433,470.75725 z \"
           id=\"path8048\"
           sodipodi:nodetypes=\"ccccc\"
           transform=\"translate(22,-46)\" />
        <path
           sodipodi:nodetypes=\"ccccc\"
           id=\"path8046\"
           d=\"M 122.22846,476.57522 L 107.17166,384.76422 L \
174.75656,336.81578 L 182.49916,425.04738 L 122.22846,476.57522 z \"
           style=\"opacity:1;fill:url(#radialGradient9085);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9087);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
        <path
           style=\"opacity:1;fill:url(#radialGradient9089);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9091);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
           d=\"M 122.22846,476.57522 L 387.89857,478.59553 L \
408.18431,425.27799 L 182.49916,425.04738 L 122.22846,476.57522 z \"
           id=\"path8044\"
           sodipodi:nodetypes=\"ccccc\" />
        <path
           style=\"opacity:1;fill:url(#radialGradient9093);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9095);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
           d=\"M 174.75639,337.17417 L 408.10162,336.16402 L \
380.8275,386.67165 L 107.07617,384.65134 L 174.75639,337.17417 z \"
           id=\"rect7068\"
           sodipodi:nodetypes=\"ccccc\" />
        <path
           sodipodi:nodetypes=\"ccccc\"
           id=\"path7071\"
           d=\"M 122.22846,476.57522 L 387.89857,478.59553 L \
380.8275,386.67165 L 107.07617,384.65134 L 122.22846,476.57522 z \"
           style=\"opacity:1;fill:url(#radialGradient9097);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9099);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
        <path
           style=\"opacity:1;fill:url(#radialGradient9101);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9103);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
           d=\"M 408.10163,425.05744 L 387.89857,478.59553 L \
380.8275,386.67165 L 407.81542,336.21789 L 408.10163,425.05744 z \"
           id=\"path7073\"
           sodipodi:nodetypes=\"ccccc\"
           transform=\"translate(0.2592724,0)\" />
      </g>
      <g
         id=\"g9105\"
         transform=\"translate(80,-78)\">
        <path
           transform=\"translate(22,-46)\"
           sodipodi:nodetypes=\"ccccc\"
           id=\"path9107\"
           d=\"M 160.39433,470.75725 L 386.03682,470.91581 L \
386.18003,382.01728 L 152.68904,382.78959 L 160.39433,470.75725 z \"
           style=\"opacity:1;fill:url(#radialGradient9119);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9121);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
        <path
           style=\"opacity:1;fill:url(#radialGradient9123);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9125);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
           d=\"M 122.22846,476.57522 L 107.17166,384.76422 L \
174.75656,336.81578 L 182.49916,425.04738 L 122.22846,476.57522 z \"
           id=\"path9109\"
           sodipodi:nodetypes=\"ccccc\" />
        <path
           sodipodi:nodetypes=\"ccccc\"
           id=\"path9111\"
           d=\"M 122.22846,476.57522 L 387.89857,478.59553 L \
408.18431,425.27799 L 182.49916,425.04738 L 122.22846,476.57522 z \"
           style=\"opacity:1;fill:url(#radialGradient9127);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9129);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
        <path
           sodipodi:nodetypes=\"ccccc\"
           id=\"path9113\"
           d=\"M 174.75639,337.17417 L 408.10162,336.16402 L \
380.8275,386.67165 L 107.07617,384.65134 L 174.75639,337.17417 z \"
           style=\"opacity:1;fill:url(#radialGradient9131);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9133);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
        <path
           style=\"opacity:1;fill:url(#radialGradient9135);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9137);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
           d=\"M 122.22846,476.57522 L 387.89857,478.59553 L \
380.8275,386.67165 L 107.07617,384.65134 L 122.22846,476.57522 z \"
           id=\"path9115\"
           sodipodi:nodetypes=\"ccccc\" />
        <path
           transform=\"translate(0.2592724,0)\"
           sodipodi:nodetypes=\"ccccc\"
           id=\"path9117\"
           d=\"M 408.10163,425.05744 L 387.89857,478.59553 L \
380.8275,386.67165 L 407.81542,336.21789 L 408.10163,425.05744 z \"
           style=\"opacity:1;fill:url(#radialGradient9139);fill-opacity:1;\
fill-rule:evenodd;stroke:url(#radialGradient9141);stroke-width:1;stroke-\
linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
      </g>
    </g>
    <g
       transform=\"translate(80,320)\"
       id=\"g9161\">
      <path
         style=\"opacity:1;fill:url(#radialGradient11365);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11367);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
         d=\"M 160.39433,470.75725 L 386.03682,470.91581 L \
386.18003,382.01728 L 152.68904,382.78959 L 160.39433,470.75725 z \"
         id=\"path9163\"
         sodipodi:nodetypes=\"ccccc\"
         transform=\"translate(22,-46)\" />
      <path
         sodipodi:nodetypes=\"ccccc\"
         id=\"path9165\"
         d=\"M 122.22846,476.57522 L 107.17166,384.76422 L \
174.75656,336.81578 L 182.49916,425.04738 L 122.22846,476.57522 z \"
         style=\"opacity:1;fill:url(#radialGradient11369);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11371);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
      <path
         style=\"opacity:1;fill:url(#radialGradient11373);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11375);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
         d=\"M 122.22846,476.57522 L 387.89857,478.59553 L \
408.18431,425.27799 L 182.49916,425.04738 L 122.22846,476.57522 z \"
         id=\"path9167\"
         sodipodi:nodetypes=\"ccccc\" />
      <path
         style=\"opacity:1;fill:url(#radialGradient11377);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11379);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
         d=\"M 174.75639,337.17417 L 408.10162,336.16402 L 380.8275,386.67165 \
L 107.07617,384.65134 L 174.75639,337.17417 z \"
         id=\"path9169\"
         sodipodi:nodetypes=\"ccccc\" />
      <path
         sodipodi:nodetypes=\"ccccc\"
         id=\"path9171\"
         d=\"M 122.22846,476.57522 L 387.89857,478.59553 L 380.8275,386.67165 \
L 107.07617,384.65134 L 122.22846,476.57522 z \"
         style=\"opacity:1;fill:url(#radialGradient11381);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11383);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
      <path
         style=\"opacity:1;fill:url(#radialGradient11385);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11387);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
         d=\"M 408.10163,425.05744 L 387.89857,478.59553 L 380.8275,386.67165 \
L 407.81542,336.21789 L 408.10163,425.05744 z \"
         id=\"path9173\"
         sodipodi:nodetypes=\"ccccc\"
         transform=\"translate(0.2592724,0)\" />
    </g>
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:url(#linearGradient11363);\
stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:\
4;stroke-dasharray:none;stroke-opacity:1\"
       d=\"M 100.14025,625.44848 L 587.66516,625.44848\"
       id=\"path10310\"
       transform=\"translate(0,108)\" />
    <path
       transform=\"matrix(0,-1,1,0,-289.54578,1017.3512)\"
       id=\"path11393\"
       d=\"M 115.95187,640.38168 L 446.23902,625.44848\"
       style=\"fill:url(#linearGradient11422);fill-opacity:1;fill-rule:\
evenodd;stroke:url(#linearGradient11424);stroke-width:10;stroke-linecap:round;\
stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-\
opacity:1\"
       sodipodi:nodetypes=\"cc\" />
    <path
       sodipodi:nodetypes=\"cc\"
       style=\"fill:url(#linearGradient12402);fill-opacity:1;fill-rule:\
evenodd;stroke:url(#linearGradient12400);stroke-width:10;stroke-linecap:round;\
stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-\
opacity:1\"
       d=\"M 153.69608,527.14904 L 405.06352,728.38724\"
       id=\"path11426\"
       transform=\"matrix(0,-1,1,0,-289.54578,1017.3512)\" />
    <g
       id=\"g9175\"
       transform=\"translate(80,322)\">
      <path
         transform=\"translate(22,-46)\"
         sodipodi:nodetypes=\"ccccc\"
         id=\"path9177\"
         d=\"M 160.39433,470.75725 L 386.03682,470.91581 L \
386.18003,382.01728 L 152.68904,382.78959 L 160.39433,470.75725 z \"
         style=\"opacity:1;fill:url(#radialGradient11339);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11341);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
      <path
         style=\"opacity:1;fill:url(#radialGradient11343);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11345);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
         d=\"M 122.22846,476.57522 L 107.17166,384.76422 L \
174.75656,336.81578 L 182.49916,425.04738 L 122.22846,476.57522 z \"
         id=\"path9179\"
         sodipodi:nodetypes=\"ccccc\" />
      <path
         sodipodi:nodetypes=\"ccccc\"
         id=\"path9181\"
         d=\"M 122.22846,476.57522 L 387.89857,478.59553 L \
408.18431,425.27799 L 182.49916,425.04738 L 122.22846,476.57522 z \"
         style=\"opacity:1;fill:url(#radialGradient11347);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11349);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
      <path
         sodipodi:nodetypes=\"ccccc\"
         id=\"path9183\"
         d=\"M 174.75639,337.17417 L 408.10162,336.16402 L 380.8275,386.67165 \
L 107.07617,384.65134 L 174.75639,337.17417 z \"
         style=\"opacity:1;fill:url(#radialGradient11351);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11353);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
      <path
         style=\"opacity:1;fill:url(#radialGradient11355);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11357);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\"
         d=\"M 122.22846,476.57522 L 387.89857,478.59553 L 380.8275,386.67165 \
L 107.07617,384.65134 L 122.22846,476.57522 z \"
         id=\"path9185\"
         sodipodi:nodetypes=\"ccccc\" />
      <path
         transform=\"translate(0.2592724,0)\"
         sodipodi:nodetypes=\"ccccc\"
         id=\"path9187\"
         d=\"M 408.10163,425.05744 L 387.89857,478.59553 L 380.8275,386.67165 \
L 407.81542,336.21789 L 408.10163,425.05744 z \"
         style=\"opacity:1;fill:url(#radialGradient11359);fill-opacity:1;fill-\
rule:evenodd;stroke:url(#radialGradient11361);stroke-width:1;stroke-linecap:\
round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1\" />
    </g>
    <g
       id=\"g10286\"
       transform=\"matrix(1,0,0,0.6863044,294.27179,83.773807)\"
       style=\"fill:url(#linearGradient10304);fill-opacity:1\">
      <path
         sodipodi:nodetypes=\"ccccc\"
         id=\"rect9237\"
         d=\"M -15.331578,487.0654 L 42.291511,492.91464 L \
56.914601,411.32055 L 12.93303,410.13869 L -15.331578,487.0654 z \"
         style=\"fill:url(#linearGradient10306);fill-opacity:1;fill-rule:\
evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;\
stroke-miterlimit:4;stroke-opacity:1\"
         transform=\"matrix(0.5481466,0,0,0.5481466,17.770448,151.4477)\" />
      <path
         sodipodi:nodetypes=\"cccc\"
         id=\"path9239\"
         d=\"M 56.864569,238.7178 L -54.609454,233.70991 L \
-36.331578,345.59609 L 56.864569,238.7178 z \"
         style=\"fill:url(#linearGradient10308);fill-opacity:1;fill-rule:\
evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;\
stroke-miterlimit:4;stroke-opacity:1\"
         transform=\"matrix(0.5481466,0,0,0.5481466,31.837045,273.63397)\" />
    </g>
    <g
       transform=\"matrix(0,0.5481466,-0.5481466,0,701.36387,302.20488)\"
       style=\"fill:url(#linearGradient10236);fill-opacity:1;stroke:none\"
       id=\"g10230\">
      <rect
         style=\"opacity:1;fill:url(#linearGradient10238);fill-opacity:1;fill-\
rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
         id=\"rect10232\"
         width=\"43\"
         height=\"92\"
         x=\"30\"
         y=\"320.36218\"
         transform=\"translate(0.4999999,0)\" />
      <path
         sodipodi:type=\"star\"
         style=\"opacity:1;fill:url(#linearGradient10240);fill-opacity:1;fill-\
rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
         id=\"path10234\"
         sodipodi:sides=\"3\"
         sodipodi:cx=\"9\"
         sodipodi:cy=\"218.36218\"
         sodipodi:r1=\"59.941639\"
         sodipodi:r2=\"29.970819\"
         sodipodi:arg1=\"0.52359878\"
         sodipodi:arg2=\"1.5707963\"
         inkscape:flatsided=\"true\"
         inkscape:rounded=\"0\"
         inkscape:randomized=\"0\"
         d=\"M 60.910982,248.333 L -42.910982,248.333 L 9.0000003,158.42054 L \
60.910982,248.333 z \"
         transform=\"translate(43,73)\" />
    </g>
    <g
       transform=\"matrix(0.5481466,0,0,0.5481466,309.49638,61.4477)\"
       style=\"fill:url(#linearGradient10260);fill-opacity:1;stroke:none\"
       id=\"g10254\">
      <rect
         style=\"opacity:1;fill:url(#linearGradient10262);fill-opacity:1;fill-\
rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
         id=\"rect10256\"
         width=\"43\"
         height=\"92\"
         x=\"30\"
         y=\"320.36218\"
         transform=\"translate(0.4999999,0)\" />
      <path
         sodipodi:type=\"star\"
         style=\"opacity:1;fill:url(#linearGradient10264);fill-opacity:1;fill-\
rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
         id=\"path10258\"
         sodipodi:sides=\"3\"
         sodipodi:cx=\"9\"
         sodipodi:cy=\"218.36218\"
         sodipodi:r1=\"59.941639\"
         sodipodi:r2=\"29.970819\"
         sodipodi:arg1=\"0.52359878\"
         sodipodi:arg2=\"1.5707963\"
         inkscape:flatsided=\"true\"
         inkscape:rounded=\"0\"
         inkscape:randomized=\"0\"
         d=\"M 60.910982,248.333 L -42.910982,248.333 L 9.0000003,158.42054 L \
60.910982,248.333 z \"
         transform=\"translate(43,73)\" />
    </g>
    <path
       sodipodi:type=\"star\"
       style=\"opacity:1;fill:#f54b1f;fill-opacity:1;fill-rule:evenodd;stroke:\
#f54b1f;stroke-width:2.65936613;stroke-linecap:butt;stroke-linejoin:miter;\
stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
       id=\"path17314\"
       sodipodi:sides=\"3\"
       sodipodi:cx=\"72.679718\"
       sodipodi:cy=\"551.9903\"
       sodipodi:r1=\"35.420326\"
       sodipodi:r2=\"17.710163\"
       sodipodi:arg1=\"0.52359878\"
       sodipodi:arg2=\"1.5707963\"
       inkscape:flatsided=\"true\"
       inkscape:rounded=\"0\"
       inkscape:randomized=\"0\"
       d=\"M 103.35462,569.70046 L 42.004816,569.70046 L 72.679718,516.56997 \
L 103.35462,569.70046 z \"
       transform=\"matrix(0.2213093,-0.1187783,-0.266224,-0.4960321,684.80793,\
980.94071)\" />
    <path
       style=\"fill:url(#linearGradient11337);fill-opacity:1;fill-rule:\
evenodd;stroke:none;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;\
stroke-miterlimit:4;stroke-opacity:1\"
       d=\"M 100.125,608.4375 L 100.125,618.4375 L 192.15625,618.4375 L \
190.34375,608.4375 L 100.125,608.4375 z M 475.46875,608.4375 L \
476.1875,618.4375 L 587.65625,618.4375 L 587.65625,608.4375 L \
475.46875,608.4375 z \"
       id=\"path11309\"
       transform=\"translate(0,120)\" />
    <path
       sodipodi:nodetypes=\"cc\"
       style=\"fill:url(#linearGradient11418);fill-opacity:1;fill-rule:\
evenodd;stroke:url(#linearGradient11420);stroke-width:10;stroke-linecap:butt;\
stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-\
opacity:1\"
       d=\"M 333.71138,630.50677 L 446.23902,625.44848\"
       id=\"path11405\"
       transform=\"matrix(0,-1,1,0,-289.54578,1017.3512)\" />
    <path
       sodipodi:type=\"arc\"
       style=\"opacity:1;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#\
f54b1f;stroke-width:6.20745659;stroke-linecap:butt;stroke-linejoin:miter;\
stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
       id=\"path13384\"
       sodipodi:cx=\"122.53055\"
       sodipodi:cy=\"590.19373\"
       sodipodi:rx=\"24.692467\"
       sodipodi:ry=\"48.453144\"
       d=\"M 143.16869,616.79561 A 24.692467,48.453144 0 1 1 \
137.35867,551.44982\"
       sodipodi:start=\"0.58119464\"
       sodipodi:end=\"5.3565301\"
       sodipodi:open=\"true\"
       transform=\"matrix(1.8201885,0,0,0.912507,55.831307,279.99367)\" />
    <path
       style=\"fill:url(#linearGradient12412);fill-opacity:1;fill-rule:\
evenodd;stroke:none;stroke-width:10;stroke-linecap:round;stroke-linejoin:\
miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
       d=\"M 312.21875,762.46875 L 233.71875,860.53125 C 232.96699,861.43492 \
232.55762,862.57453 232.5625,863.75 C 232.56739,865.89048 233.9097,867.7834 \
235.9375,868.46875 C 237.96529,869.15409 240.22882,868.47988 \
241.53125,866.78125 L 325.03125,762.46875 L 312.21875,762.46875 z \"
       id=\"path12404\" />
    <path
       sodipodi:open=\"true\"
       sodipodi:end=\"5.3565301\"
       sodipodi:start=\"0.58119464\"
       d=\"M 143.16869,616.79561 A 24.692467,48.453144 0 1 1 \
137.35867,551.44982\"
       sodipodi:ry=\"48.453144\"
       sodipodi:rx=\"24.692467\"
       sodipodi:cy=\"590.19373\"
       sodipodi:cx=\"122.53055\"
       id=\"path14359\"
       style=\"opacity:1;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#\
f54b1f;stroke-width:6;stroke-linecap:butt;stroke-linejoin:miter;stroke-\
miterlimit:4;stroke-dasharray:none;stroke-opacity:0.90681823\"
       sodipodi:type=\"arc\"
       transform=\"matrix(0,-1,1,0,-252.33307,733.99211)\" />
    <path
       transform=\"translate(412.74911,138.83689)\"
       sodipodi:type=\"arc\"
       style=\"opacity:1;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#\
f54b1f;stroke-width:6;stroke-linecap:butt;stroke-linejoin:miter;stroke-\
miterlimit:4;stroke-dasharray:none;stroke-opacity:0.90681823\"
       id=\"path14361\"
       sodipodi:cx=\"122.53055\"
       sodipodi:cy=\"590.19373\"
       sodipodi:rx=\"24.692467\"
       sodipodi:ry=\"48.453144\"
       d=\"M 143.16869,616.79561 A 24.692467,48.453144 0 1 1 \
137.35867,551.44982\"
       sodipodi:start=\"0.58119464\"
       sodipodi:end=\"5.3565301\"
       sodipodi:open=\"true\" />
    <path
       transform=\"matrix(-0.1218959,-0.2196076,-0.4922179,0.2732115,586.\
74222,458.40431)\"
       d=\"M 103.35462,569.70046 L 42.004816,569.70046 L 72.679718,516.56997 \
L 103.35462,569.70046 z \"
       inkscape:randomized=\"0\"
       inkscape:rounded=\"0\"
       inkscape:flatsided=\"true\"
       sodipodi:arg2=\"1.5707963\"
       sodipodi:arg1=\"0.52359878\"
       sodipodi:r2=\"17.710163\"
       sodipodi:r1=\"35.420326\"
       sodipodi:cy=\"551.9903\"
       sodipodi:cx=\"72.679718\"
       sodipodi:sides=\"3\"
       id=\"path18285\"
       style=\"opacity:1;fill:#f54b1f;fill-opacity:1;fill-rule:evenodd;stroke:\
#f54b1f;stroke-width:2.65936613;stroke-linecap:butt;stroke-linejoin:miter;\
stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
       sodipodi:type=\"star\" />
    <path
       sodipodi:type=\"star\"
       style=\"opacity:1;fill:#f54b1f;fill-opacity:1;fill-rule:evenodd;stroke:\
#f54b1f;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-\
miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
       id=\"path18287\"
       sodipodi:sides=\"3\"
       sodipodi:cx=\"72.679718\"
       sodipodi:cy=\"551.9903\"
       sodipodi:r1=\"35.420326\"
       sodipodi:r2=\"17.710163\"
       sodipodi:arg1=\"0.52359878\"
       sodipodi:arg2=\"1.5707963\"
       inkscape:flatsided=\"true\"
       inkscape:rounded=\"0\"
       inkscape:randomized=\"0\"
       d=\"M 103.35462,569.70046 L 42.004816,569.70046 L 72.679718,516.56997 \
L 103.35462,569.70046 z \"
       transform=\"matrix(0.1938805,-0.2214618,-0.4778137,-0.4514339,555.\
94053,1051.522)\" />
  </g>
</svg>
\
\>", "Text"]
}, Open  ]]
},
ScreenStyleEnvironment->"Working",
WindowSize->{1280, 960},
WindowMargins->{{-1, Automatic}, {Automatic, -1}},
TaggingRules->{"SlideShow" -> True},
FrontEndVersion->"10.2 for Linux x86 (64-bit) (July 29, 2015)",
StyleDefinitions->FrontEnd`FileName[{"SlideShow"}, "Steel.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[580, 22, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[1302, 48, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[32601, 719, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[34555, 773, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[34949, 786, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[198941, 3490, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[241532, 4377, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[244331, 4448, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[245887, 4493, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[249298, 4593, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[249536, 4603, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[249734, 4615, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[249932, 4627, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[282119, 5320, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 337076, 6823}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[647, 25, 219, 7, 473, "Title"],
Cell[869, 34, 396, 9, 190, "Subtitle"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1302, 48, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[1391, 53, 144, 2, 66, "Chapter"],
Cell[1538, 57, 310, 8, 19, "Code",
 CellOpen->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[1885, 70, 330, 4, 59, "Chapter"],
Cell[CellGroupData[{
Cell[2240, 78, 432, 13, 19, "Code",
 CellOpen->False],
Cell[2675, 93, 29865, 619, 518, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[32601, 719, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[32690, 724, 355, 5, 66, "Chapter"],
Cell[33048, 731, 408, 7, 58, "Text"],
Cell[33459, 740, 468, 10, 59, "Item"],
Cell[33930, 752, 102, 1, 58, "Text"],
Cell[34035, 755, 390, 9, 59, "Item"],
Cell[34428, 766, 78, 1, 58, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[34555, 773, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[34622, 776, 290, 5, 88, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34949, 786, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[35038, 791, 91, 1, 66, "Chapter"],
Cell[35132, 794, 163760, 2690, 629, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[198941, 3490, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[199030, 3495, 1201, 26, 19, "Code",
 CellOpen->False],
Cell[200234, 3523, 41249, 848, 518, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[241532, 4377, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[241621, 4382, 95, 1, 66, "Chapter"],
Cell[241719, 4385, 502, 11, 146, "Text"],
Cell[CellGroupData[{
Cell[242246, 4400, 280, 4, 65, "Subchapter"],
Cell[242529, 4406, 545, 10, 88, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243111, 4421, 326, 4, 65, "Subchapter"],
Cell[243440, 4427, 830, 14, 206, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[244331, 4448, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[244398, 4451, 787, 17, 325, "Text"],
Cell[CellGroupData[{
Cell[245210, 4472, 182, 3, 59, "Item"],
Cell[245395, 4477, 182, 3, 59, "Item"]
}, Open  ]],
Cell[245592, 4483, 258, 5, 58, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245887, 4493, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[245976, 4498, 502, 8, 56, "Code"],
Cell[246481, 4508, 2587, 73, 252, "Output"]
}, Open  ]],
Cell[249083, 4584, 178, 4, 58, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249298, 4593, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[249365, 4596, 134, 2, 57, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249536, 4603, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[249603, 4606, 94, 4, 86, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249734, 4615, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[249801, 4618, 94, 4, 86, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249932, 4627, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[249999, 4630, 316, 8, 56, "Code"],
Cell[CellGroupData[{
Cell[250340, 4642, 566, 13, 56, "Code"],
Cell[250909, 4657, 30804, 634, 518, "Output"]
}, Open  ]],
Cell[281728, 5294, 194, 5, 87, "Text"],
Cell[281925, 5301, 157, 14, 347, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282119, 5320, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[282186, 5323, 18, 0, 57, "Text"],
Cell[282207, 5325, 18, 0, 57, "Text"],
Cell[282228, 5327, 157, 17, 435, "Text"],
Cell[282388, 5346, 54243, 1461, 43137, "Text"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
